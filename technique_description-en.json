[
  {
    "id": "T1608",
    "name": "Stage Capabilities",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1608.001", "name": "Upload Malware" },
      { "id": "T1608.002", "name": "Upload Tool" },
      { "id": "T1608.003", "name": "Install Digital Certificate" },
      { "id": "T1608.004", "name": "Drive-by Target" },
      { "id": "T1608.005", "name": "Link Target" },
      { "id": "T1608.006", "name": "SEO Poisoning" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications."
        }
      ],
      [
        {
          "type": "text",
          "content": "Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):"
        }
      ],
      [
        {
          "type": "li",
          "content": "Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site."
        },
        {
          "type": "li",
          "content": "Staging web resources for a link target to be used with spearphishing."
        },
        {
          "type": "li",
          "content": "Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer."
        },
        {
          "type": "li",
          "content": "Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1558",
    "name": "Steal or Forge Kerberos Tickets",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1558.001", "name": "Golden Ticket" },
      { "id": "T1558.002", "name": "Silver Ticket" },
      { "id": "T1558.003", "name": "Kerberoasting" },
      { "id": "T1558.004", "name": "AS-REP Roasting" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access."
        }
      ],
      [
        { "type": "text", "content": "On Windows, the built-in " },
        { "type": "code", "content": "klist" },
        {
          "type": "text",
          "content": " utility can be used to list and analyze cached Kerberos tickets."
        }
      ],
      [
        {
          "type": "text",
          "content": "Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts. On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in "
        },
        { "type": "code", "content": "/var/lib/sss/secrets/secrets.ldb" },
        {
          "type": "text",
          "content": " as well as the corresponding key located in "
        },
        { "type": "code", "content": "/var/lib/sss/secrets/.secrets.mkey" },
        {
          "type": "text",
          "content": ". Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo."
        }
      ],
      [
        {
          "type": "text",
          "content": "Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the "
        },
        { "type": "code", "content": "/etc/krb5.conf" },
        { "type": "text", "content": " configuration file and the " },
        { "type": "code", "content": "KRB5CCNAME" },
        {
          "type": "text",
          "content": " environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using "
        },
        { "type": "code", "content": "kinit" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "klist" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "ktutil" },
        { "type": "text", "content": ", and " },
        { "type": "code", "content": "kcc" },
        {
          "type": "text",
          "content": " built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts."
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1556",
    "name": "Modify Authentication Process",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1556.001", "name": "Domain Controller Authentication" },
      { "id": "T1556.002", "name": "Password Filter DLL" },
      { "id": "T1556.003", "name": "Pluggable Authentication Modules" },
      { "id": "T1556.004", "name": "Network Device Authentication" },
      { "id": "T1556.005", "name": "Reversible Encryption" },
      { "id": "T1556.006", "name": "Multi-Factor Authentication" },
      { "id": "T1556.007", "name": "Hybrid Identity" },
      { "id": "T1556.008", "name": "Network Provider DLL" }
    ],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Review authentication logs to ensure that mechanisms such as enforcement of MFA are functioning as intended."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review the hybrid identity solution in use for any discrepancies. For example, review all Pass Through Authentication (PTA) agents in the Azure Management Portal to identify any unwanted or unapproved ones. If ADFS is in use, review DLLs and executable files in the AD FS and Global Assembly Cache directories to ensure that they are signed by Microsoft. Note that in some cases binaries may be catalog-signed, which may cause the file to appear unsigned when viewing file properties."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review for new and unknown network provider DLLs within the Registry ("
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider\\ProviderPath"
            },
            {
              "type": "text",
              "content": "). Ensure only valid network provider DLLs are registered. The name of these can be found in the Registry key at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            {
              "type": "text",
              "content": ", and have corresponding service subkey pointing to a DLL at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentC ontrolSet\\Services\\<NetworkProviderName>\\NetworkProvider"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory ("
            },
            { "type": "code", "content": "C:\\Windows\\System32\\" },
            {
              "type": "text",
              "content": " by default) of a domain controller and/or local computer with a corresponding entry in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages"
            },
            { "type": "text", "content": ". " }
          ],
          [
            { "type": "text", "content": "Starting in Windows 11 22H2, the " },
            { "type": "code", "content": "EnableMPRNotifications" },
            {
              "type": "text",
              "content": " policy can be disabled through Group Policy or through a configuration service provider to prevent Winlogon from sending credentials to network providers."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            { "type": "text", "content": "Ensure that " },
            { "type": "code", "content": "AllowReversiblePasswordEncryption" },
            {
              "type": "text",
              "content": " property is set to disabled unless there are application requirements."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit access to the root account and prevent users from modifying protected components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities."
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit on-premises accounts with access to the hybrid identity solution in place. For example, limit Azure AD Global Administrator accounts to only those required, and ensure that these are dedicated cloud-only accounts rather than hybrid ones."
            }
          ]
        ]
      },
      {
        "id": "M1025",
        "name": "Privileged Process Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Enabled features, such as Protected Process Light (PPL), for LSA."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            { "type": "text", "content": "Restrict write access to the " },
            {
              "type": "code",
              "content": "/Library/Security/SecurityAgentPlugins"
            },
            { "type": "text", "content": " directory." }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict Registry permissions to disallow the modification of sensitive Registry keys such as "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that proper policies are implemented to dictate the the secure enrollment and deactivation of authentication mechanisms, such as MFA, for user accounts."
            }
          ]
        ]
      }
    ]
  }
]
